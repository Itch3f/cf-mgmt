// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/space"
)

type FakeCFClient struct {
	GetSpaceByGuidStub        func(spaceGUID string) (go_cfclient.Space, error)
	getSpaceByGuidMutex       sync.RWMutex
	getSpaceByGuidArgsForCall []struct {
		spaceGUID string
	}
	getSpaceByGuidReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	UpdateSpaceStub        func(spaceGUID string, req go_cfclient.SpaceRequest) (go_cfclient.Space, error)
	updateSpaceMutex       sync.RWMutex
	updateSpaceArgsForCall []struct {
		spaceGUID string
		req       go_cfclient.SpaceRequest
	}
	updateSpaceReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	ListSpacesByQueryStub        func(query url.Values) ([]go_cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		query url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []go_cfclient.Space
		result2 error
	}
	CreateSpaceStub        func(req go_cfclient.SpaceRequest) (go_cfclient.Space, error)
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		req go_cfclient.SpaceRequest
	}
	createSpaceReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	DeleteSpaceStub        func(guid string, recursive, async bool) error
	deleteSpaceMutex       sync.RWMutex
	deleteSpaceArgsForCall []struct {
		guid      string
		recursive bool
		async     bool
	}
	deleteSpaceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) GetSpaceByGuid(spaceGUID string) (go_cfclient.Space, error) {
	fake.getSpaceByGuidMutex.Lock()
	fake.getSpaceByGuidArgsForCall = append(fake.getSpaceByGuidArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("GetSpaceByGuid", []interface{}{spaceGUID})
	fake.getSpaceByGuidMutex.Unlock()
	if fake.GetSpaceByGuidStub != nil {
		return fake.GetSpaceByGuidStub(spaceGUID)
	} else {
		return fake.getSpaceByGuidReturns.result1, fake.getSpaceByGuidReturns.result2
	}
}

func (fake *FakeCFClient) GetSpaceByGuidCallCount() int {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return len(fake.getSpaceByGuidArgsForCall)
}

func (fake *FakeCFClient) GetSpaceByGuidArgsForCall(i int) string {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return fake.getSpaceByGuidArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) GetSpaceByGuidReturns(result1 go_cfclient.Space, result2 error) {
	fake.GetSpaceByGuidStub = nil
	fake.getSpaceByGuidReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpace(spaceGUID string, req go_cfclient.SpaceRequest) (go_cfclient.Space, error) {
	fake.updateSpaceMutex.Lock()
	fake.updateSpaceArgsForCall = append(fake.updateSpaceArgsForCall, struct {
		spaceGUID string
		req       go_cfclient.SpaceRequest
	}{spaceGUID, req})
	fake.recordInvocation("UpdateSpace", []interface{}{spaceGUID, req})
	fake.updateSpaceMutex.Unlock()
	if fake.UpdateSpaceStub != nil {
		return fake.UpdateSpaceStub(spaceGUID, req)
	} else {
		return fake.updateSpaceReturns.result1, fake.updateSpaceReturns.result2
	}
}

func (fake *FakeCFClient) UpdateSpaceCallCount() int {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	return len(fake.updateSpaceArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceArgsForCall(i int) (string, go_cfclient.SpaceRequest) {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	return fake.updateSpaceArgsForCall[i].spaceGUID, fake.updateSpaceArgsForCall[i].req
}

func (fake *FakeCFClient) UpdateSpaceReturns(result1 go_cfclient.Space, result2 error) {
	fake.UpdateSpaceStub = nil
	fake.updateSpaceReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesByQuery(query url.Values) ([]go_cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListSpacesByQuery", []interface{}{query})
	fake.listSpacesByQueryMutex.Unlock()
	if fake.ListSpacesByQueryStub != nil {
		return fake.ListSpacesByQueryStub(query)
	} else {
		return fake.listSpacesByQueryReturns.result1, fake.listSpacesByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return fake.listSpacesByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListSpacesByQueryReturns(result1 []go_cfclient.Space, result2 error) {
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpace(req go_cfclient.SpaceRequest) (go_cfclient.Space, error) {
	fake.createSpaceMutex.Lock()
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		req go_cfclient.SpaceRequest
	}{req})
	fake.recordInvocation("CreateSpace", []interface{}{req})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(req)
	} else {
		return fake.createSpaceReturns.result1, fake.createSpaceReturns.result2
	}
}

func (fake *FakeCFClient) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceArgsForCall(i int) go_cfclient.SpaceRequest {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return fake.createSpaceArgsForCall[i].req
}

func (fake *FakeCFClient) CreateSpaceReturns(result1 go_cfclient.Space, result2 error) {
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteSpace(guid string, recursive bool, async bool) error {
	fake.deleteSpaceMutex.Lock()
	fake.deleteSpaceArgsForCall = append(fake.deleteSpaceArgsForCall, struct {
		guid      string
		recursive bool
		async     bool
	}{guid, recursive, async})
	fake.recordInvocation("DeleteSpace", []interface{}{guid, recursive, async})
	fake.deleteSpaceMutex.Unlock()
	if fake.DeleteSpaceStub != nil {
		return fake.DeleteSpaceStub(guid, recursive, async)
	} else {
		return fake.deleteSpaceReturns.result1
	}
}

func (fake *FakeCFClient) DeleteSpaceCallCount() int {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return len(fake.deleteSpaceArgsForCall)
}

func (fake *FakeCFClient) DeleteSpaceArgsForCall(i int) (string, bool, bool) {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return fake.deleteSpaceArgsForCall[i].guid, fake.deleteSpaceArgsForCall[i].recursive, fake.deleteSpaceArgsForCall[i].async
}

func (fake *FakeCFClient) DeleteSpaceReturns(result1 error) {
	fake.DeleteSpaceStub = nil
	fake.deleteSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ space.CFClient = new(FakeCFClient)
