// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/space"
)

type FakeCFClient struct {
	RemoveSpaceAuditorByUsernameStub        func(spaceGUID, userName string) error
	removeSpaceAuditorByUsernameMutex       sync.RWMutex
	removeSpaceAuditorByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	removeSpaceAuditorByUsernameReturns struct {
		result1 error
	}
	RemoveSpaceDeveloperByUsernameStub        func(spaceGUID, userName string) error
	removeSpaceDeveloperByUsernameMutex       sync.RWMutex
	removeSpaceDeveloperByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	removeSpaceDeveloperByUsernameReturns struct {
		result1 error
	}
	RemoveSpaceManagerByUsernameStub        func(spaceGUID, userName string) error
	removeSpaceManagerByUsernameMutex       sync.RWMutex
	removeSpaceManagerByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	removeSpaceManagerByUsernameReturns struct {
		result1 error
	}
	ListSpaceAuditorsStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceAuditorsMutex       sync.RWMutex
	listSpaceAuditorsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceManagersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceManagersMutex       sync.RWMutex
	listSpaceManagersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceDevelopersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceDevelopersMutex       sync.RWMutex
	listSpaceDevelopersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceDevelopersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	AssociateOrgUserByUsernameStub        func(orgGUID, userName string) (go_cfclient.Org, error)
	associateOrgUserByUsernameMutex       sync.RWMutex
	associateOrgUserByUsernameArgsForCall []struct {
		orgGUID  string
		userName string
	}
	associateOrgUserByUsernameReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateSpaceAuditorByUsernameStub        func(spaceGUID, userName string) (go_cfclient.Space, error)
	associateSpaceAuditorByUsernameMutex       sync.RWMutex
	associateSpaceAuditorByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	associateSpaceAuditorByUsernameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperByUsernameStub        func(spaceGUID, userName string) (go_cfclient.Space, error)
	associateSpaceDeveloperByUsernameMutex       sync.RWMutex
	associateSpaceDeveloperByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	associateSpaceDeveloperByUsernameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceManagerByUsernameStub        func(spaceGUID, userName string) (go_cfclient.Space, error)
	associateSpaceManagerByUsernameMutex       sync.RWMutex
	associateSpaceManagerByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	associateSpaceManagerByUsernameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	ListOrgSpaceQuotasStub        func(orgGUID string) ([]go_cfclient.SpaceQuota, error)
	listOrgSpaceQuotasMutex       sync.RWMutex
	listOrgSpaceQuotasArgsForCall []struct {
		orgGUID string
	}
	listOrgSpaceQuotasReturns struct {
		result1 []go_cfclient.SpaceQuota
		result2 error
	}
	UpdateSpaceQuotaStub        func(spaceQuotaGUID string, spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error)
	updateSpaceQuotaMutex       sync.RWMutex
	updateSpaceQuotaArgsForCall []struct {
		spaceQuotaGUID string
		spaceQuote     go_cfclient.SpaceQuotaRequest
	}
	updateSpaceQuotaReturns struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}
	AssignSpaceQuotaStub        func(quotaGUID, spaceGUID string) error
	assignSpaceQuotaMutex       sync.RWMutex
	assignSpaceQuotaArgsForCall []struct {
		quotaGUID string
		spaceGUID string
	}
	assignSpaceQuotaReturns struct {
		result1 error
	}
	CreateSpaceQuotaStub        func(spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error)
	createSpaceQuotaMutex       sync.RWMutex
	createSpaceQuotaArgsForCall []struct {
		spaceQuote go_cfclient.SpaceQuotaRequest
	}
	createSpaceQuotaReturns struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}
	GetSpaceByGuidStub        func(spaceGUID string) (go_cfclient.Space, error)
	getSpaceByGuidMutex       sync.RWMutex
	getSpaceByGuidArgsForCall []struct {
		spaceGUID string
	}
	getSpaceByGuidReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	UpdateSpaceStub        func(spaceGUID string, req go_cfclient.SpaceRequest) (go_cfclient.Space, error)
	updateSpaceMutex       sync.RWMutex
	updateSpaceArgsForCall []struct {
		spaceGUID string
		req       go_cfclient.SpaceRequest
	}
	updateSpaceReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	ListSpacesByQueryStub        func(query url.Values) ([]go_cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		query url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []go_cfclient.Space
		result2 error
	}
	CreateSpaceStub        func(req go_cfclient.SpaceRequest) (go_cfclient.Space, error)
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		req go_cfclient.SpaceRequest
	}
	createSpaceReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	DeleteSpaceStub        func(guid string, recursive, async bool) error
	deleteSpaceMutex       sync.RWMutex
	deleteSpaceArgsForCall []struct {
		guid      string
		recursive bool
		async     bool
	}
	deleteSpaceReturns struct {
		result1 error
	}
	GetSpaceQuotaByNameStub        func(name string) (go_cfclient.SpaceQuota, error)
	getSpaceQuotaByNameMutex       sync.RWMutex
	getSpaceQuotaByNameArgsForCall []struct {
		name string
	}
	getSpaceQuotaByNameReturns struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsername(spaceGUID string, userName string) error {
	fake.removeSpaceAuditorByUsernameMutex.Lock()
	fake.removeSpaceAuditorByUsernameArgsForCall = append(fake.removeSpaceAuditorByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("RemoveSpaceAuditorByUsername", []interface{}{spaceGUID, userName})
	fake.removeSpaceAuditorByUsernameMutex.Unlock()
	if fake.RemoveSpaceAuditorByUsernameStub != nil {
		return fake.RemoveSpaceAuditorByUsernameStub(spaceGUID, userName)
	} else {
		return fake.removeSpaceAuditorByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameCallCount() int {
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	return len(fake.removeSpaceAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	return fake.removeSpaceAuditorByUsernameArgsForCall[i].spaceGUID, fake.removeSpaceAuditorByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameReturns(result1 error) {
	fake.RemoveSpaceAuditorByUsernameStub = nil
	fake.removeSpaceAuditorByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsername(spaceGUID string, userName string) error {
	fake.removeSpaceDeveloperByUsernameMutex.Lock()
	fake.removeSpaceDeveloperByUsernameArgsForCall = append(fake.removeSpaceDeveloperByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("RemoveSpaceDeveloperByUsername", []interface{}{spaceGUID, userName})
	fake.removeSpaceDeveloperByUsernameMutex.Unlock()
	if fake.RemoveSpaceDeveloperByUsernameStub != nil {
		return fake.RemoveSpaceDeveloperByUsernameStub(spaceGUID, userName)
	} else {
		return fake.removeSpaceDeveloperByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameCallCount() int {
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.removeSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	return fake.removeSpaceDeveloperByUsernameArgsForCall[i].spaceGUID, fake.removeSpaceDeveloperByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameReturns(result1 error) {
	fake.RemoveSpaceDeveloperByUsernameStub = nil
	fake.removeSpaceDeveloperByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsername(spaceGUID string, userName string) error {
	fake.removeSpaceManagerByUsernameMutex.Lock()
	fake.removeSpaceManagerByUsernameArgsForCall = append(fake.removeSpaceManagerByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("RemoveSpaceManagerByUsername", []interface{}{spaceGUID, userName})
	fake.removeSpaceManagerByUsernameMutex.Unlock()
	if fake.RemoveSpaceManagerByUsernameStub != nil {
		return fake.RemoveSpaceManagerByUsernameStub(spaceGUID, userName)
	} else {
		return fake.removeSpaceManagerByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameCallCount() int {
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.removeSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	return fake.removeSpaceManagerByUsernameArgsForCall[i].spaceGUID, fake.removeSpaceManagerByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameReturns(result1 error) {
	fake.RemoveSpaceManagerByUsernameStub = nil
	fake.removeSpaceManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListSpaceAuditors(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceAuditorsMutex.Lock()
	fake.listSpaceAuditorsArgsForCall = append(fake.listSpaceAuditorsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceAuditors", []interface{}{spaceGUID})
	fake.listSpaceAuditorsMutex.Unlock()
	if fake.ListSpaceAuditorsStub != nil {
		return fake.ListSpaceAuditorsStub(spaceGUID)
	} else {
		return fake.listSpaceAuditorsReturns.result1, fake.listSpaceAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceAuditorsCallCount() int {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return len(fake.listSpaceAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceAuditorsArgsForCall(i int) string {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return fake.listSpaceAuditorsArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceAuditorsStub = nil
	fake.listSpaceAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceManagersMutex.Lock()
	fake.listSpaceManagersArgsForCall = append(fake.listSpaceManagersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceManagers", []interface{}{spaceGUID})
	fake.listSpaceManagersMutex.Unlock()
	if fake.ListSpaceManagersStub != nil {
		return fake.ListSpaceManagersStub(spaceGUID)
	} else {
		return fake.listSpaceManagersReturns.result1, fake.listSpaceManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceManagersCallCount() int {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return len(fake.listSpaceManagersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceManagersArgsForCall(i int) string {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return fake.listSpaceManagersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceManagersStub = nil
	fake.listSpaceManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceDevelopersMutex.Lock()
	fake.listSpaceDevelopersArgsForCall = append(fake.listSpaceDevelopersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceDevelopers", []interface{}{spaceGUID})
	fake.listSpaceDevelopersMutex.Unlock()
	if fake.ListSpaceDevelopersStub != nil {
		return fake.ListSpaceDevelopersStub(spaceGUID)
	} else {
		return fake.listSpaceDevelopersReturns.result1, fake.listSpaceDevelopersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceDevelopersCallCount() int {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return len(fake.listSpaceDevelopersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceDevelopersArgsForCall(i int) string {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return fake.listSpaceDevelopersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceDevelopersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceDevelopersStub = nil
	fake.listSpaceDevelopersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsername(orgGUID string, userName string) (go_cfclient.Org, error) {
	fake.associateOrgUserByUsernameMutex.Lock()
	fake.associateOrgUserByUsernameArgsForCall = append(fake.associateOrgUserByUsernameArgsForCall, struct {
		orgGUID  string
		userName string
	}{orgGUID, userName})
	fake.recordInvocation("AssociateOrgUserByUsername", []interface{}{orgGUID, userName})
	fake.associateOrgUserByUsernameMutex.Unlock()
	if fake.AssociateOrgUserByUsernameStub != nil {
		return fake.AssociateOrgUserByUsernameStub(orgGUID, userName)
	} else {
		return fake.associateOrgUserByUsernameReturns.result1, fake.associateOrgUserByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameCallCount() int {
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	return len(fake.associateOrgUserByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	return fake.associateOrgUserByUsernameArgsForCall[i].orgGUID, fake.associateOrgUserByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgUserByUsernameStub = nil
	fake.associateOrgUserByUsernameReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsername(spaceGUID string, userName string) (go_cfclient.Space, error) {
	fake.associateSpaceAuditorByUsernameMutex.Lock()
	fake.associateSpaceAuditorByUsernameArgsForCall = append(fake.associateSpaceAuditorByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("AssociateSpaceAuditorByUsername", []interface{}{spaceGUID, userName})
	fake.associateSpaceAuditorByUsernameMutex.Unlock()
	if fake.AssociateSpaceAuditorByUsernameStub != nil {
		return fake.AssociateSpaceAuditorByUsernameStub(spaceGUID, userName)
	} else {
		return fake.associateSpaceAuditorByUsernameReturns.result1, fake.associateSpaceAuditorByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameCallCount() int {
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	return len(fake.associateSpaceAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	return fake.associateSpaceAuditorByUsernameArgsForCall[i].spaceGUID, fake.associateSpaceAuditorByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceAuditorByUsernameStub = nil
	fake.associateSpaceAuditorByUsernameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsername(spaceGUID string, userName string) (go_cfclient.Space, error) {
	fake.associateSpaceDeveloperByUsernameMutex.Lock()
	fake.associateSpaceDeveloperByUsernameArgsForCall = append(fake.associateSpaceDeveloperByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("AssociateSpaceDeveloperByUsername", []interface{}{spaceGUID, userName})
	fake.associateSpaceDeveloperByUsernameMutex.Unlock()
	if fake.AssociateSpaceDeveloperByUsernameStub != nil {
		return fake.AssociateSpaceDeveloperByUsernameStub(spaceGUID, userName)
	} else {
		return fake.associateSpaceDeveloperByUsernameReturns.result1, fake.associateSpaceDeveloperByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameCallCount() int {
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.associateSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	return fake.associateSpaceDeveloperByUsernameArgsForCall[i].spaceGUID, fake.associateSpaceDeveloperByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceDeveloperByUsernameStub = nil
	fake.associateSpaceDeveloperByUsernameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsername(spaceGUID string, userName string) (go_cfclient.Space, error) {
	fake.associateSpaceManagerByUsernameMutex.Lock()
	fake.associateSpaceManagerByUsernameArgsForCall = append(fake.associateSpaceManagerByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("AssociateSpaceManagerByUsername", []interface{}{spaceGUID, userName})
	fake.associateSpaceManagerByUsernameMutex.Unlock()
	if fake.AssociateSpaceManagerByUsernameStub != nil {
		return fake.AssociateSpaceManagerByUsernameStub(spaceGUID, userName)
	} else {
		return fake.associateSpaceManagerByUsernameReturns.result1, fake.associateSpaceManagerByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameCallCount() int {
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.associateSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	return fake.associateSpaceManagerByUsernameArgsForCall[i].spaceGUID, fake.associateSpaceManagerByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceManagerByUsernameStub = nil
	fake.associateSpaceManagerByUsernameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgSpaceQuotas(orgGUID string) ([]go_cfclient.SpaceQuota, error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	fake.listOrgSpaceQuotasArgsForCall = append(fake.listOrgSpaceQuotasArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgSpaceQuotas", []interface{}{orgGUID})
	fake.listOrgSpaceQuotasMutex.Unlock()
	if fake.ListOrgSpaceQuotasStub != nil {
		return fake.ListOrgSpaceQuotasStub(orgGUID)
	} else {
		return fake.listOrgSpaceQuotasReturns.result1, fake.listOrgSpaceQuotasReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgSpaceQuotasCallCount() int {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	return len(fake.listOrgSpaceQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgSpaceQuotasArgsForCall(i int) string {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	return fake.listOrgSpaceQuotasArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgSpaceQuotasReturns(result1 []go_cfclient.SpaceQuota, result2 error) {
	fake.ListOrgSpaceQuotasStub = nil
	fake.listOrgSpaceQuotasReturns = struct {
		result1 []go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceQuota(spaceQuotaGUID string, spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error) {
	fake.updateSpaceQuotaMutex.Lock()
	fake.updateSpaceQuotaArgsForCall = append(fake.updateSpaceQuotaArgsForCall, struct {
		spaceQuotaGUID string
		spaceQuote     go_cfclient.SpaceQuotaRequest
	}{spaceQuotaGUID, spaceQuote})
	fake.recordInvocation("UpdateSpaceQuota", []interface{}{spaceQuotaGUID, spaceQuote})
	fake.updateSpaceQuotaMutex.Unlock()
	if fake.UpdateSpaceQuotaStub != nil {
		return fake.UpdateSpaceQuotaStub(spaceQuotaGUID, spaceQuote)
	} else {
		return fake.updateSpaceQuotaReturns.result1, fake.updateSpaceQuotaReturns.result2
	}
}

func (fake *FakeCFClient) UpdateSpaceQuotaCallCount() int {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return len(fake.updateSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceQuotaArgsForCall(i int) (string, go_cfclient.SpaceQuotaRequest) {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return fake.updateSpaceQuotaArgsForCall[i].spaceQuotaGUID, fake.updateSpaceQuotaArgsForCall[i].spaceQuote
}

func (fake *FakeCFClient) UpdateSpaceQuotaReturns(result1 *go_cfclient.SpaceQuota, result2 error) {
	fake.UpdateSpaceQuotaStub = nil
	fake.updateSpaceQuotaReturns = struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssignSpaceQuota(quotaGUID string, spaceGUID string) error {
	fake.assignSpaceQuotaMutex.Lock()
	fake.assignSpaceQuotaArgsForCall = append(fake.assignSpaceQuotaArgsForCall, struct {
		quotaGUID string
		spaceGUID string
	}{quotaGUID, spaceGUID})
	fake.recordInvocation("AssignSpaceQuota", []interface{}{quotaGUID, spaceGUID})
	fake.assignSpaceQuotaMutex.Unlock()
	if fake.AssignSpaceQuotaStub != nil {
		return fake.AssignSpaceQuotaStub(quotaGUID, spaceGUID)
	} else {
		return fake.assignSpaceQuotaReturns.result1
	}
}

func (fake *FakeCFClient) AssignSpaceQuotaCallCount() int {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	return len(fake.assignSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) AssignSpaceQuotaArgsForCall(i int) (string, string) {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	return fake.assignSpaceQuotaArgsForCall[i].quotaGUID, fake.assignSpaceQuotaArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) AssignSpaceQuotaReturns(result1 error) {
	fake.AssignSpaceQuotaStub = nil
	fake.assignSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateSpaceQuota(spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error) {
	fake.createSpaceQuotaMutex.Lock()
	fake.createSpaceQuotaArgsForCall = append(fake.createSpaceQuotaArgsForCall, struct {
		spaceQuote go_cfclient.SpaceQuotaRequest
	}{spaceQuote})
	fake.recordInvocation("CreateSpaceQuota", []interface{}{spaceQuote})
	fake.createSpaceQuotaMutex.Unlock()
	if fake.CreateSpaceQuotaStub != nil {
		return fake.CreateSpaceQuotaStub(spaceQuote)
	} else {
		return fake.createSpaceQuotaReturns.result1, fake.createSpaceQuotaReturns.result2
	}
}

func (fake *FakeCFClient) CreateSpaceQuotaCallCount() int {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return len(fake.createSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceQuotaArgsForCall(i int) go_cfclient.SpaceQuotaRequest {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return fake.createSpaceQuotaArgsForCall[i].spaceQuote
}

func (fake *FakeCFClient) CreateSpaceQuotaReturns(result1 *go_cfclient.SpaceQuota, result2 error) {
	fake.CreateSpaceQuotaStub = nil
	fake.createSpaceQuotaReturns = struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceByGuid(spaceGUID string) (go_cfclient.Space, error) {
	fake.getSpaceByGuidMutex.Lock()
	fake.getSpaceByGuidArgsForCall = append(fake.getSpaceByGuidArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("GetSpaceByGuid", []interface{}{spaceGUID})
	fake.getSpaceByGuidMutex.Unlock()
	if fake.GetSpaceByGuidStub != nil {
		return fake.GetSpaceByGuidStub(spaceGUID)
	} else {
		return fake.getSpaceByGuidReturns.result1, fake.getSpaceByGuidReturns.result2
	}
}

func (fake *FakeCFClient) GetSpaceByGuidCallCount() int {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return len(fake.getSpaceByGuidArgsForCall)
}

func (fake *FakeCFClient) GetSpaceByGuidArgsForCall(i int) string {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return fake.getSpaceByGuidArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) GetSpaceByGuidReturns(result1 go_cfclient.Space, result2 error) {
	fake.GetSpaceByGuidStub = nil
	fake.getSpaceByGuidReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpace(spaceGUID string, req go_cfclient.SpaceRequest) (go_cfclient.Space, error) {
	fake.updateSpaceMutex.Lock()
	fake.updateSpaceArgsForCall = append(fake.updateSpaceArgsForCall, struct {
		spaceGUID string
		req       go_cfclient.SpaceRequest
	}{spaceGUID, req})
	fake.recordInvocation("UpdateSpace", []interface{}{spaceGUID, req})
	fake.updateSpaceMutex.Unlock()
	if fake.UpdateSpaceStub != nil {
		return fake.UpdateSpaceStub(spaceGUID, req)
	} else {
		return fake.updateSpaceReturns.result1, fake.updateSpaceReturns.result2
	}
}

func (fake *FakeCFClient) UpdateSpaceCallCount() int {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	return len(fake.updateSpaceArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceArgsForCall(i int) (string, go_cfclient.SpaceRequest) {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	return fake.updateSpaceArgsForCall[i].spaceGUID, fake.updateSpaceArgsForCall[i].req
}

func (fake *FakeCFClient) UpdateSpaceReturns(result1 go_cfclient.Space, result2 error) {
	fake.UpdateSpaceStub = nil
	fake.updateSpaceReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesByQuery(query url.Values) ([]go_cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListSpacesByQuery", []interface{}{query})
	fake.listSpacesByQueryMutex.Unlock()
	if fake.ListSpacesByQueryStub != nil {
		return fake.ListSpacesByQueryStub(query)
	} else {
		return fake.listSpacesByQueryReturns.result1, fake.listSpacesByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return fake.listSpacesByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListSpacesByQueryReturns(result1 []go_cfclient.Space, result2 error) {
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpace(req go_cfclient.SpaceRequest) (go_cfclient.Space, error) {
	fake.createSpaceMutex.Lock()
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		req go_cfclient.SpaceRequest
	}{req})
	fake.recordInvocation("CreateSpace", []interface{}{req})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(req)
	} else {
		return fake.createSpaceReturns.result1, fake.createSpaceReturns.result2
	}
}

func (fake *FakeCFClient) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceArgsForCall(i int) go_cfclient.SpaceRequest {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return fake.createSpaceArgsForCall[i].req
}

func (fake *FakeCFClient) CreateSpaceReturns(result1 go_cfclient.Space, result2 error) {
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteSpace(guid string, recursive bool, async bool) error {
	fake.deleteSpaceMutex.Lock()
	fake.deleteSpaceArgsForCall = append(fake.deleteSpaceArgsForCall, struct {
		guid      string
		recursive bool
		async     bool
	}{guid, recursive, async})
	fake.recordInvocation("DeleteSpace", []interface{}{guid, recursive, async})
	fake.deleteSpaceMutex.Unlock()
	if fake.DeleteSpaceStub != nil {
		return fake.DeleteSpaceStub(guid, recursive, async)
	} else {
		return fake.deleteSpaceReturns.result1
	}
}

func (fake *FakeCFClient) DeleteSpaceCallCount() int {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return len(fake.deleteSpaceArgsForCall)
}

func (fake *FakeCFClient) DeleteSpaceArgsForCall(i int) (string, bool, bool) {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return fake.deleteSpaceArgsForCall[i].guid, fake.deleteSpaceArgsForCall[i].recursive, fake.deleteSpaceArgsForCall[i].async
}

func (fake *FakeCFClient) DeleteSpaceReturns(result1 error) {
	fake.DeleteSpaceStub = nil
	fake.deleteSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) GetSpaceQuotaByName(name string) (go_cfclient.SpaceQuota, error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	fake.getSpaceQuotaByNameArgsForCall = append(fake.getSpaceQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetSpaceQuotaByName", []interface{}{name})
	fake.getSpaceQuotaByNameMutex.Unlock()
	if fake.GetSpaceQuotaByNameStub != nil {
		return fake.GetSpaceQuotaByNameStub(name)
	} else {
		return fake.getSpaceQuotaByNameReturns.result1, fake.getSpaceQuotaByNameReturns.result2
	}
}

func (fake *FakeCFClient) GetSpaceQuotaByNameCallCount() int {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return len(fake.getSpaceQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetSpaceQuotaByNameArgsForCall(i int) string {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return fake.getSpaceQuotaByNameArgsForCall[i].name
}

func (fake *FakeCFClient) GetSpaceQuotaByNameReturns(result1 go_cfclient.SpaceQuota, result2 error) {
	fake.GetSpaceQuotaByNameStub = nil
	fake.getSpaceQuotaByNameReturns = struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ space.CFClient = new(FakeCFClient)
