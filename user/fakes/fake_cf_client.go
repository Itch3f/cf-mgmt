// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/user"
)

type FakeCFClient struct {
	RemoveSpaceAuditorByUsernameAndOriginStub        func(spaceGUID, userName, origin string) error
	removeSpaceAuditorByUsernameAndOriginMutex       sync.RWMutex
	removeSpaceAuditorByUsernameAndOriginArgsForCall []struct {
		spaceGUID string
		userName  string
		origin    string
	}
	removeSpaceAuditorByUsernameAndOriginReturns struct {
		result1 error
	}
	RemoveSpaceDeveloperByUsernameAndOriginStub        func(spaceGUID, userName, origin string) error
	removeSpaceDeveloperByUsernameAndOriginMutex       sync.RWMutex
	removeSpaceDeveloperByUsernameAndOriginArgsForCall []struct {
		spaceGUID string
		userName  string
		origin    string
	}
	removeSpaceDeveloperByUsernameAndOriginReturns struct {
		result1 error
	}
	RemoveSpaceManagerByUsernameAndOriginStub        func(spaceGUID, userName, origin string) error
	removeSpaceManagerByUsernameAndOriginMutex       sync.RWMutex
	removeSpaceManagerByUsernameAndOriginArgsForCall []struct {
		spaceGUID string
		userName  string
		origin    string
	}
	removeSpaceManagerByUsernameAndOriginReturns struct {
		result1 error
	}
	ListSpaceAuditorsStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceAuditorsMutex       sync.RWMutex
	listSpaceAuditorsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceManagersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceManagersMutex       sync.RWMutex
	listSpaceManagersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceDevelopersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceDevelopersMutex       sync.RWMutex
	listSpaceDevelopersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceDevelopersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	AssociateOrgUserByUsernameAndOriginStub        func(orgGUID, userName, origin string) (go_cfclient.Org, error)
	associateOrgUserByUsernameAndOriginMutex       sync.RWMutex
	associateOrgUserByUsernameAndOriginArgsForCall []struct {
		orgGUID  string
		userName string
		origin   string
	}
	associateOrgUserByUsernameAndOriginReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateSpaceAuditorByUsernameAndOriginStub        func(spaceGUID, userName, origin string) (go_cfclient.Space, error)
	associateSpaceAuditorByUsernameAndOriginMutex       sync.RWMutex
	associateSpaceAuditorByUsernameAndOriginArgsForCall []struct {
		spaceGUID string
		userName  string
		origin    string
	}
	associateSpaceAuditorByUsernameAndOriginReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperByUsernameAndOriginStub        func(spaceGUID, userName, origin string) (go_cfclient.Space, error)
	associateSpaceDeveloperByUsernameAndOriginMutex       sync.RWMutex
	associateSpaceDeveloperByUsernameAndOriginArgsForCall []struct {
		spaceGUID string
		userName  string
		origin    string
	}
	associateSpaceDeveloperByUsernameAndOriginReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceManagerByUsernameAndOriginStub        func(spaceGUID, userName, origin string) (go_cfclient.Space, error)
	associateSpaceManagerByUsernameAndOriginMutex       sync.RWMutex
	associateSpaceManagerByUsernameAndOriginArgsForCall []struct {
		spaceGUID string
		userName  string
		origin    string
	}
	associateSpaceManagerByUsernameAndOriginReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	RemoveOrgUserByUsernameAndOriginStub        func(orgGUID, name, origin string) error
	removeOrgUserByUsernameAndOriginMutex       sync.RWMutex
	removeOrgUserByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	removeOrgUserByUsernameAndOriginReturns struct {
		result1 error
	}
	RemoveOrgAuditorByUsernameAndOriginStub        func(orgGUID, name, origin string) error
	removeOrgAuditorByUsernameAndOriginMutex       sync.RWMutex
	removeOrgAuditorByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	removeOrgAuditorByUsernameAndOriginReturns struct {
		result1 error
	}
	RemoveOrgBillingManagerByUsernameAndOriginStub        func(orgGUID, name, origin string) error
	removeOrgBillingManagerByUsernameAndOriginMutex       sync.RWMutex
	removeOrgBillingManagerByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	removeOrgBillingManagerByUsernameAndOriginReturns struct {
		result1 error
	}
	RemoveOrgManagerByUsernameAndOriginStub        func(orgGUID, name, origin string) error
	removeOrgManagerByUsernameAndOriginMutex       sync.RWMutex
	removeOrgManagerByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	removeOrgManagerByUsernameAndOriginReturns struct {
		result1 error
	}
	ListOrgAuditorsStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgAuditorsMutex       sync.RWMutex
	listOrgAuditorsArgsForCall []struct {
		orgGUID string
	}
	listOrgAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgManagersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgManagersMutex       sync.RWMutex
	listOrgManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgBillingManagersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgBillingManagersMutex       sync.RWMutex
	listOrgBillingManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgBillingManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	AssociateOrgAuditorByUsernameAndOriginStub        func(orgGUID, name, origin string) (go_cfclient.Org, error)
	associateOrgAuditorByUsernameAndOriginMutex       sync.RWMutex
	associateOrgAuditorByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	associateOrgAuditorByUsernameAndOriginReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateOrgManagerByUsernameAndOriginStub        func(orgGUID, name, origin string) (go_cfclient.Org, error)
	associateOrgManagerByUsernameAndOriginMutex       sync.RWMutex
	associateOrgManagerByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	associateOrgManagerByUsernameAndOriginReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateOrgBillingManagerByUsernameAndOriginStub        func(orgGUID, name, origin string) (go_cfclient.Org, error)
	associateOrgBillingManagerByUsernameAndOriginMutex       sync.RWMutex
	associateOrgBillingManagerByUsernameAndOriginArgsForCall []struct {
		orgGUID string
		name    string
		origin  string
	}
	associateOrgBillingManagerByUsernameAndOriginReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	ListOrgUsersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgUsersMutex       sync.RWMutex
	listOrgUsersArgsForCall []struct {
		orgGUID string
	}
	listOrgUsersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpacesByQueryStub        func(query url.Values) ([]go_cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		query url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []go_cfclient.Space
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOrigin(spaceGUID string, userName string, origin string) error {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Lock()
	fake.removeSpaceAuditorByUsernameAndOriginArgsForCall = append(fake.removeSpaceAuditorByUsernameAndOriginArgsForCall, struct {
		spaceGUID string
		userName  string
		origin    string
	}{spaceGUID, userName, origin})
	fake.recordInvocation("RemoveSpaceAuditorByUsernameAndOrigin", []interface{}{spaceGUID, userName, origin})
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Unlock()
	if fake.RemoveSpaceAuditorByUsernameAndOriginStub != nil {
		return fake.RemoveSpaceAuditorByUsernameAndOriginStub(spaceGUID, userName, origin)
	} else {
		return fake.removeSpaceAuditorByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginCallCount() int {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeSpaceAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	return fake.removeSpaceAuditorByUsernameAndOriginArgsForCall[i].spaceGUID, fake.removeSpaceAuditorByUsernameAndOriginArgsForCall[i].userName, fake.removeSpaceAuditorByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginReturns(result1 error) {
	fake.RemoveSpaceAuditorByUsernameAndOriginStub = nil
	fake.removeSpaceAuditorByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOrigin(spaceGUID string, userName string, origin string) error {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Lock()
	fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall = append(fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall, struct {
		spaceGUID string
		userName  string
		origin    string
	}{spaceGUID, userName, origin})
	fake.recordInvocation("RemoveSpaceDeveloperByUsernameAndOrigin", []interface{}{spaceGUID, userName, origin})
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	if fake.RemoveSpaceDeveloperByUsernameAndOriginStub != nil {
		return fake.RemoveSpaceDeveloperByUsernameAndOriginStub(spaceGUID, userName, origin)
	} else {
		return fake.removeSpaceDeveloperByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginCallCount() int {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	return fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall[i].spaceGUID, fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall[i].userName, fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginReturns(result1 error) {
	fake.RemoveSpaceDeveloperByUsernameAndOriginStub = nil
	fake.removeSpaceDeveloperByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOrigin(spaceGUID string, userName string, origin string) error {
	fake.removeSpaceManagerByUsernameAndOriginMutex.Lock()
	fake.removeSpaceManagerByUsernameAndOriginArgsForCall = append(fake.removeSpaceManagerByUsernameAndOriginArgsForCall, struct {
		spaceGUID string
		userName  string
		origin    string
	}{spaceGUID, userName, origin})
	fake.recordInvocation("RemoveSpaceManagerByUsernameAndOrigin", []interface{}{spaceGUID, userName, origin})
	fake.removeSpaceManagerByUsernameAndOriginMutex.Unlock()
	if fake.RemoveSpaceManagerByUsernameAndOriginStub != nil {
		return fake.RemoveSpaceManagerByUsernameAndOriginStub(spaceGUID, userName, origin)
	} else {
		return fake.removeSpaceManagerByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginCallCount() int {
	fake.removeSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeSpaceManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.RUnlock()
	return fake.removeSpaceManagerByUsernameAndOriginArgsForCall[i].spaceGUID, fake.removeSpaceManagerByUsernameAndOriginArgsForCall[i].userName, fake.removeSpaceManagerByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginReturns(result1 error) {
	fake.RemoveSpaceManagerByUsernameAndOriginStub = nil
	fake.removeSpaceManagerByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListSpaceAuditors(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceAuditorsMutex.Lock()
	fake.listSpaceAuditorsArgsForCall = append(fake.listSpaceAuditorsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceAuditors", []interface{}{spaceGUID})
	fake.listSpaceAuditorsMutex.Unlock()
	if fake.ListSpaceAuditorsStub != nil {
		return fake.ListSpaceAuditorsStub(spaceGUID)
	} else {
		return fake.listSpaceAuditorsReturns.result1, fake.listSpaceAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceAuditorsCallCount() int {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return len(fake.listSpaceAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceAuditorsArgsForCall(i int) string {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return fake.listSpaceAuditorsArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceAuditorsStub = nil
	fake.listSpaceAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceManagersMutex.Lock()
	fake.listSpaceManagersArgsForCall = append(fake.listSpaceManagersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceManagers", []interface{}{spaceGUID})
	fake.listSpaceManagersMutex.Unlock()
	if fake.ListSpaceManagersStub != nil {
		return fake.ListSpaceManagersStub(spaceGUID)
	} else {
		return fake.listSpaceManagersReturns.result1, fake.listSpaceManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceManagersCallCount() int {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return len(fake.listSpaceManagersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceManagersArgsForCall(i int) string {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return fake.listSpaceManagersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceManagersStub = nil
	fake.listSpaceManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceDevelopersMutex.Lock()
	fake.listSpaceDevelopersArgsForCall = append(fake.listSpaceDevelopersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceDevelopers", []interface{}{spaceGUID})
	fake.listSpaceDevelopersMutex.Unlock()
	if fake.ListSpaceDevelopersStub != nil {
		return fake.ListSpaceDevelopersStub(spaceGUID)
	} else {
		return fake.listSpaceDevelopersReturns.result1, fake.listSpaceDevelopersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceDevelopersCallCount() int {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return len(fake.listSpaceDevelopersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceDevelopersArgsForCall(i int) string {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return fake.listSpaceDevelopersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceDevelopersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceDevelopersStub = nil
	fake.listSpaceDevelopersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOrigin(orgGUID string, userName string, origin string) (go_cfclient.Org, error) {
	fake.associateOrgUserByUsernameAndOriginMutex.Lock()
	fake.associateOrgUserByUsernameAndOriginArgsForCall = append(fake.associateOrgUserByUsernameAndOriginArgsForCall, struct {
		orgGUID  string
		userName string
		origin   string
	}{orgGUID, userName, origin})
	fake.recordInvocation("AssociateOrgUserByUsernameAndOrigin", []interface{}{orgGUID, userName, origin})
	fake.associateOrgUserByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgUserByUsernameAndOriginStub != nil {
		return fake.AssociateOrgUserByUsernameAndOriginStub(orgGUID, userName, origin)
	} else {
		return fake.associateOrgUserByUsernameAndOriginReturns.result1, fake.associateOrgUserByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginCallCount() int {
	fake.associateOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgUserByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.RUnlock()
	return fake.associateOrgUserByUsernameAndOriginArgsForCall[i].orgGUID, fake.associateOrgUserByUsernameAndOriginArgsForCall[i].userName, fake.associateOrgUserByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgUserByUsernameAndOriginStub = nil
	fake.associateOrgUserByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOrigin(spaceGUID string, userName string, origin string) (go_cfclient.Space, error) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Lock()
	fake.associateSpaceAuditorByUsernameAndOriginArgsForCall = append(fake.associateSpaceAuditorByUsernameAndOriginArgsForCall, struct {
		spaceGUID string
		userName  string
		origin    string
	}{spaceGUID, userName, origin})
	fake.recordInvocation("AssociateSpaceAuditorByUsernameAndOrigin", []interface{}{spaceGUID, userName, origin})
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Unlock()
	if fake.AssociateSpaceAuditorByUsernameAndOriginStub != nil {
		return fake.AssociateSpaceAuditorByUsernameAndOriginStub(spaceGUID, userName, origin)
	} else {
		return fake.associateSpaceAuditorByUsernameAndOriginReturns.result1, fake.associateSpaceAuditorByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginCallCount() int {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateSpaceAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	return fake.associateSpaceAuditorByUsernameAndOriginArgsForCall[i].spaceGUID, fake.associateSpaceAuditorByUsernameAndOriginArgsForCall[i].userName, fake.associateSpaceAuditorByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceAuditorByUsernameAndOriginStub = nil
	fake.associateSpaceAuditorByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOrigin(spaceGUID string, userName string, origin string) (go_cfclient.Space, error) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Lock()
	fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall = append(fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall, struct {
		spaceGUID string
		userName  string
		origin    string
	}{spaceGUID, userName, origin})
	fake.recordInvocation("AssociateSpaceDeveloperByUsernameAndOrigin", []interface{}{spaceGUID, userName, origin})
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	if fake.AssociateSpaceDeveloperByUsernameAndOriginStub != nil {
		return fake.AssociateSpaceDeveloperByUsernameAndOriginStub(spaceGUID, userName, origin)
	} else {
		return fake.associateSpaceDeveloperByUsernameAndOriginReturns.result1, fake.associateSpaceDeveloperByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginCallCount() int {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	return fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall[i].spaceGUID, fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall[i].userName, fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceDeveloperByUsernameAndOriginStub = nil
	fake.associateSpaceDeveloperByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOrigin(spaceGUID string, userName string, origin string) (go_cfclient.Space, error) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.Lock()
	fake.associateSpaceManagerByUsernameAndOriginArgsForCall = append(fake.associateSpaceManagerByUsernameAndOriginArgsForCall, struct {
		spaceGUID string
		userName  string
		origin    string
	}{spaceGUID, userName, origin})
	fake.recordInvocation("AssociateSpaceManagerByUsernameAndOrigin", []interface{}{spaceGUID, userName, origin})
	fake.associateSpaceManagerByUsernameAndOriginMutex.Unlock()
	if fake.AssociateSpaceManagerByUsernameAndOriginStub != nil {
		return fake.AssociateSpaceManagerByUsernameAndOriginStub(spaceGUID, userName, origin)
	} else {
		return fake.associateSpaceManagerByUsernameAndOriginReturns.result1, fake.associateSpaceManagerByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginCallCount() int {
	fake.associateSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateSpaceManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.RUnlock()
	return fake.associateSpaceManagerByUsernameAndOriginArgsForCall[i].spaceGUID, fake.associateSpaceManagerByUsernameAndOriginArgsForCall[i].userName, fake.associateSpaceManagerByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceManagerByUsernameAndOriginStub = nil
	fake.associateSpaceManagerByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOrigin(orgGUID string, name string, origin string) error {
	fake.removeOrgUserByUsernameAndOriginMutex.Lock()
	fake.removeOrgUserByUsernameAndOriginArgsForCall = append(fake.removeOrgUserByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("RemoveOrgUserByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.removeOrgUserByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgUserByUsernameAndOriginStub != nil {
		return fake.RemoveOrgUserByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.removeOrgUserByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginCallCount() int {
	fake.removeOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgUserByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.RUnlock()
	return fake.removeOrgUserByUsernameAndOriginArgsForCall[i].orgGUID, fake.removeOrgUserByUsernameAndOriginArgsForCall[i].name, fake.removeOrgUserByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginReturns(result1 error) {
	fake.RemoveOrgUserByUsernameAndOriginStub = nil
	fake.removeOrgUserByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOrigin(orgGUID string, name string, origin string) error {
	fake.removeOrgAuditorByUsernameAndOriginMutex.Lock()
	fake.removeOrgAuditorByUsernameAndOriginArgsForCall = append(fake.removeOrgAuditorByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("RemoveOrgAuditorByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.removeOrgAuditorByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgAuditorByUsernameAndOriginStub != nil {
		return fake.RemoveOrgAuditorByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.removeOrgAuditorByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginCallCount() int {
	fake.removeOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.RUnlock()
	return fake.removeOrgAuditorByUsernameAndOriginArgsForCall[i].orgGUID, fake.removeOrgAuditorByUsernameAndOriginArgsForCall[i].name, fake.removeOrgAuditorByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginReturns(result1 error) {
	fake.RemoveOrgAuditorByUsernameAndOriginStub = nil
	fake.removeOrgAuditorByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOrigin(orgGUID string, name string, origin string) error {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Lock()
	fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall = append(fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("RemoveOrgBillingManagerByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgBillingManagerByUsernameAndOriginStub != nil {
		return fake.RemoveOrgBillingManagerByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.removeOrgBillingManagerByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginCallCount() int {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	return fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall[i].orgGUID, fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall[i].name, fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginReturns(result1 error) {
	fake.RemoveOrgBillingManagerByUsernameAndOriginStub = nil
	fake.removeOrgBillingManagerByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOrigin(orgGUID string, name string, origin string) error {
	fake.removeOrgManagerByUsernameAndOriginMutex.Lock()
	fake.removeOrgManagerByUsernameAndOriginArgsForCall = append(fake.removeOrgManagerByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("RemoveOrgManagerByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.removeOrgManagerByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgManagerByUsernameAndOriginStub != nil {
		return fake.RemoveOrgManagerByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.removeOrgManagerByUsernameAndOriginReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginCallCount() int {
	fake.removeOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.RUnlock()
	return fake.removeOrgManagerByUsernameAndOriginArgsForCall[i].orgGUID, fake.removeOrgManagerByUsernameAndOriginArgsForCall[i].name, fake.removeOrgManagerByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginReturns(result1 error) {
	fake.RemoveOrgManagerByUsernameAndOriginStub = nil
	fake.removeOrgManagerByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListOrgAuditors(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgAuditorsMutex.Lock()
	fake.listOrgAuditorsArgsForCall = append(fake.listOrgAuditorsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgAuditors", []interface{}{orgGUID})
	fake.listOrgAuditorsMutex.Unlock()
	if fake.ListOrgAuditorsStub != nil {
		return fake.ListOrgAuditorsStub(orgGUID)
	} else {
		return fake.listOrgAuditorsReturns.result1, fake.listOrgAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgAuditorsCallCount() int {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return len(fake.listOrgAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListOrgAuditorsArgsForCall(i int) string {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return fake.listOrgAuditorsArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgAuditorsStub = nil
	fake.listOrgAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgManagersMutex.Lock()
	fake.listOrgManagersArgsForCall = append(fake.listOrgManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgManagers", []interface{}{orgGUID})
	fake.listOrgManagersMutex.Unlock()
	if fake.ListOrgManagersStub != nil {
		return fake.ListOrgManagersStub(orgGUID)
	} else {
		return fake.listOrgManagersReturns.result1, fake.listOrgManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgManagersCallCount() int {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return len(fake.listOrgManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgManagersArgsForCall(i int) string {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return fake.listOrgManagersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgManagersStub = nil
	fake.listOrgManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgBillingManagersMutex.Lock()
	fake.listOrgBillingManagersArgsForCall = append(fake.listOrgBillingManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgBillingManagers", []interface{}{orgGUID})
	fake.listOrgBillingManagersMutex.Unlock()
	if fake.ListOrgBillingManagersStub != nil {
		return fake.ListOrgBillingManagersStub(orgGUID)
	} else {
		return fake.listOrgBillingManagersReturns.result1, fake.listOrgBillingManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgBillingManagersCallCount() int {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return len(fake.listOrgBillingManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgBillingManagersArgsForCall(i int) string {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return fake.listOrgBillingManagersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgBillingManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgBillingManagersStub = nil
	fake.listOrgBillingManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOrigin(orgGUID string, name string, origin string) (go_cfclient.Org, error) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.Lock()
	fake.associateOrgAuditorByUsernameAndOriginArgsForCall = append(fake.associateOrgAuditorByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("AssociateOrgAuditorByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.associateOrgAuditorByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgAuditorByUsernameAndOriginStub != nil {
		return fake.AssociateOrgAuditorByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.associateOrgAuditorByUsernameAndOriginReturns.result1, fake.associateOrgAuditorByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginCallCount() int {
	fake.associateOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.RUnlock()
	return fake.associateOrgAuditorByUsernameAndOriginArgsForCall[i].orgGUID, fake.associateOrgAuditorByUsernameAndOriginArgsForCall[i].name, fake.associateOrgAuditorByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgAuditorByUsernameAndOriginStub = nil
	fake.associateOrgAuditorByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOrigin(orgGUID string, name string, origin string) (go_cfclient.Org, error) {
	fake.associateOrgManagerByUsernameAndOriginMutex.Lock()
	fake.associateOrgManagerByUsernameAndOriginArgsForCall = append(fake.associateOrgManagerByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("AssociateOrgManagerByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.associateOrgManagerByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgManagerByUsernameAndOriginStub != nil {
		return fake.AssociateOrgManagerByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.associateOrgManagerByUsernameAndOriginReturns.result1, fake.associateOrgManagerByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginCallCount() int {
	fake.associateOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.RUnlock()
	return fake.associateOrgManagerByUsernameAndOriginArgsForCall[i].orgGUID, fake.associateOrgManagerByUsernameAndOriginArgsForCall[i].name, fake.associateOrgManagerByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgManagerByUsernameAndOriginStub = nil
	fake.associateOrgManagerByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOrigin(orgGUID string, name string, origin string) (go_cfclient.Org, error) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Lock()
	fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall = append(fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall, struct {
		orgGUID string
		name    string
		origin  string
	}{orgGUID, name, origin})
	fake.recordInvocation("AssociateOrgBillingManagerByUsernameAndOrigin", []interface{}{orgGUID, name, origin})
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgBillingManagerByUsernameAndOriginStub != nil {
		return fake.AssociateOrgBillingManagerByUsernameAndOriginStub(orgGUID, name, origin)
	} else {
		return fake.associateOrgBillingManagerByUsernameAndOriginReturns.result1, fake.associateOrgBillingManagerByUsernameAndOriginReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginCallCount() int {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	return fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall[i].orgGUID, fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall[i].name, fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall[i].origin
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgBillingManagerByUsernameAndOriginStub = nil
	fake.associateOrgBillingManagerByUsernameAndOriginReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgUsers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgUsersMutex.Lock()
	fake.listOrgUsersArgsForCall = append(fake.listOrgUsersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgUsers", []interface{}{orgGUID})
	fake.listOrgUsersMutex.Unlock()
	if fake.ListOrgUsersStub != nil {
		return fake.ListOrgUsersStub(orgGUID)
	} else {
		return fake.listOrgUsersReturns.result1, fake.listOrgUsersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgUsersCallCount() int {
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	return len(fake.listOrgUsersArgsForCall)
}

func (fake *FakeCFClient) ListOrgUsersArgsForCall(i int) string {
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	return fake.listOrgUsersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgUsersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgUsersStub = nil
	fake.listOrgUsersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesByQuery(query url.Values) ([]go_cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListSpacesByQuery", []interface{}{query})
	fake.listSpacesByQueryMutex.Unlock()
	if fake.ListSpacesByQueryStub != nil {
		return fake.ListSpacesByQueryStub(query)
	} else {
		return fake.listSpacesByQueryReturns.result1, fake.listSpacesByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return fake.listSpacesByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListSpacesByQueryReturns(result1 []go_cfclient.Space, result2 error) {
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	fake.removeSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.RUnlock()
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	fake.associateOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.RUnlock()
	fake.associateSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	fake.associateSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.RUnlock()
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	fake.associateOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.RUnlock()
	fake.associateOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.RUnlock()
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.CFClient = new(FakeCFClient)
