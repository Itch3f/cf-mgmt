// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/user"
)

type FakeCFClient struct {
	ListSpaceAuditorsStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceAuditorsMutex       sync.RWMutex
	listSpaceAuditorsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceManagersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceManagersMutex       sync.RWMutex
	listSpaceManagersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceDevelopersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceDevelopersMutex       sync.RWMutex
	listSpaceDevelopersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceDevelopersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgAuditorsStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgAuditorsMutex       sync.RWMutex
	listOrgAuditorsArgsForCall []struct {
		orgGUID string
	}
	listOrgAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgManagersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgManagersMutex       sync.RWMutex
	listOrgManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgBillingManagersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgBillingManagersMutex       sync.RWMutex
	listOrgBillingManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgBillingManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgUsersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgUsersMutex       sync.RWMutex
	listOrgUsersArgsForCall []struct {
		orgGUID string
	}
	listOrgUsersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpacesByQueryStub        func(query url.Values) ([]go_cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		query url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []go_cfclient.Space
		result2 error
	}
	RemoveSpaceAuditorStub        func(spaceGUID, userGUID string) error
	removeSpaceAuditorMutex       sync.RWMutex
	removeSpaceAuditorArgsForCall []struct {
		spaceGUID string
		userGUID  string
	}
	removeSpaceAuditorReturns struct {
		result1 error
	}
	RemoveSpaceDeveloperStub        func(spaceGUID, userGUID string) error
	removeSpaceDeveloperMutex       sync.RWMutex
	removeSpaceDeveloperArgsForCall []struct {
		spaceGUID string
		userGUID  string
	}
	removeSpaceDeveloperReturns struct {
		result1 error
	}
	RemoveSpaceManagerStub        func(spaceGUID, userGUID string) error
	removeSpaceManagerMutex       sync.RWMutex
	removeSpaceManagerArgsForCall []struct {
		spaceGUID string
		userGUID  string
	}
	removeSpaceManagerReturns struct {
		result1 error
	}
	AssociateOrgUserStub        func(orgGUID, userGUID string) (go_cfclient.Org, error)
	associateOrgUserMutex       sync.RWMutex
	associateOrgUserArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	associateOrgUserReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateSpaceAuditorStub        func(spaceGUID, userGUID string) (go_cfclient.Space, error)
	associateSpaceAuditorMutex       sync.RWMutex
	associateSpaceAuditorArgsForCall []struct {
		spaceGUID string
		userGUID  string
	}
	associateSpaceAuditorReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperStub        func(spaceGUID, userGUID string) (go_cfclient.Space, error)
	associateSpaceDeveloperMutex       sync.RWMutex
	associateSpaceDeveloperArgsForCall []struct {
		spaceGUID string
		userGUID  string
	}
	associateSpaceDeveloperReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceManagerStub        func(spaceGUID, userGUID string) (go_cfclient.Space, error)
	associateSpaceManagerMutex       sync.RWMutex
	associateSpaceManagerArgsForCall []struct {
		spaceGUID string
		userGUID  string
	}
	associateSpaceManagerReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	RemoveOrgUserStub        func(orgGUID, userGUID string) error
	removeOrgUserMutex       sync.RWMutex
	removeOrgUserArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	removeOrgUserReturns struct {
		result1 error
	}
	RemoveOrgAuditorStub        func(orgGUID, userGUID string) error
	removeOrgAuditorMutex       sync.RWMutex
	removeOrgAuditorArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	removeOrgAuditorReturns struct {
		result1 error
	}
	RemoveOrgBillingManagerStub        func(orgGUID, userGUID string) error
	removeOrgBillingManagerMutex       sync.RWMutex
	removeOrgBillingManagerArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	removeOrgBillingManagerReturns struct {
		result1 error
	}
	RemoveOrgManagerStub        func(orgGUID, userGUID string) error
	removeOrgManagerMutex       sync.RWMutex
	removeOrgManagerArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	removeOrgManagerReturns struct {
		result1 error
	}
	AssociateOrgAuditorStub        func(orgGUID, userGUID string) (go_cfclient.Org, error)
	associateOrgAuditorMutex       sync.RWMutex
	associateOrgAuditorArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	associateOrgAuditorReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateOrgManagerStub        func(orgGUID, userGUID string) (go_cfclient.Org, error)
	associateOrgManagerMutex       sync.RWMutex
	associateOrgManagerArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	associateOrgManagerReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateOrgBillingManagerStub        func(orgGUID, userGUID string) (go_cfclient.Org, error)
	associateOrgBillingManagerMutex       sync.RWMutex
	associateOrgBillingManagerArgsForCall []struct {
		orgGUID  string
		userGUID string
	}
	associateOrgBillingManagerReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListSpaceAuditors(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceAuditorsMutex.Lock()
	fake.listSpaceAuditorsArgsForCall = append(fake.listSpaceAuditorsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceAuditors", []interface{}{spaceGUID})
	fake.listSpaceAuditorsMutex.Unlock()
	if fake.ListSpaceAuditorsStub != nil {
		return fake.ListSpaceAuditorsStub(spaceGUID)
	} else {
		return fake.listSpaceAuditorsReturns.result1, fake.listSpaceAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceAuditorsCallCount() int {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return len(fake.listSpaceAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceAuditorsArgsForCall(i int) string {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return fake.listSpaceAuditorsArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceAuditorsStub = nil
	fake.listSpaceAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceManagersMutex.Lock()
	fake.listSpaceManagersArgsForCall = append(fake.listSpaceManagersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceManagers", []interface{}{spaceGUID})
	fake.listSpaceManagersMutex.Unlock()
	if fake.ListSpaceManagersStub != nil {
		return fake.ListSpaceManagersStub(spaceGUID)
	} else {
		return fake.listSpaceManagersReturns.result1, fake.listSpaceManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceManagersCallCount() int {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return len(fake.listSpaceManagersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceManagersArgsForCall(i int) string {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return fake.listSpaceManagersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceManagersStub = nil
	fake.listSpaceManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceDevelopersMutex.Lock()
	fake.listSpaceDevelopersArgsForCall = append(fake.listSpaceDevelopersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceDevelopers", []interface{}{spaceGUID})
	fake.listSpaceDevelopersMutex.Unlock()
	if fake.ListSpaceDevelopersStub != nil {
		return fake.ListSpaceDevelopersStub(spaceGUID)
	} else {
		return fake.listSpaceDevelopersReturns.result1, fake.listSpaceDevelopersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceDevelopersCallCount() int {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return len(fake.listSpaceDevelopersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceDevelopersArgsForCall(i int) string {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return fake.listSpaceDevelopersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceDevelopersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceDevelopersStub = nil
	fake.listSpaceDevelopersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgAuditors(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgAuditorsMutex.Lock()
	fake.listOrgAuditorsArgsForCall = append(fake.listOrgAuditorsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgAuditors", []interface{}{orgGUID})
	fake.listOrgAuditorsMutex.Unlock()
	if fake.ListOrgAuditorsStub != nil {
		return fake.ListOrgAuditorsStub(orgGUID)
	} else {
		return fake.listOrgAuditorsReturns.result1, fake.listOrgAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgAuditorsCallCount() int {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return len(fake.listOrgAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListOrgAuditorsArgsForCall(i int) string {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return fake.listOrgAuditorsArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgAuditorsStub = nil
	fake.listOrgAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgManagersMutex.Lock()
	fake.listOrgManagersArgsForCall = append(fake.listOrgManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgManagers", []interface{}{orgGUID})
	fake.listOrgManagersMutex.Unlock()
	if fake.ListOrgManagersStub != nil {
		return fake.ListOrgManagersStub(orgGUID)
	} else {
		return fake.listOrgManagersReturns.result1, fake.listOrgManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgManagersCallCount() int {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return len(fake.listOrgManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgManagersArgsForCall(i int) string {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return fake.listOrgManagersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgManagersStub = nil
	fake.listOrgManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgBillingManagersMutex.Lock()
	fake.listOrgBillingManagersArgsForCall = append(fake.listOrgBillingManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgBillingManagers", []interface{}{orgGUID})
	fake.listOrgBillingManagersMutex.Unlock()
	if fake.ListOrgBillingManagersStub != nil {
		return fake.ListOrgBillingManagersStub(orgGUID)
	} else {
		return fake.listOrgBillingManagersReturns.result1, fake.listOrgBillingManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgBillingManagersCallCount() int {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return len(fake.listOrgBillingManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgBillingManagersArgsForCall(i int) string {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return fake.listOrgBillingManagersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgBillingManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgBillingManagersStub = nil
	fake.listOrgBillingManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgUsers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgUsersMutex.Lock()
	fake.listOrgUsersArgsForCall = append(fake.listOrgUsersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgUsers", []interface{}{orgGUID})
	fake.listOrgUsersMutex.Unlock()
	if fake.ListOrgUsersStub != nil {
		return fake.ListOrgUsersStub(orgGUID)
	} else {
		return fake.listOrgUsersReturns.result1, fake.listOrgUsersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgUsersCallCount() int {
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	return len(fake.listOrgUsersArgsForCall)
}

func (fake *FakeCFClient) ListOrgUsersArgsForCall(i int) string {
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	return fake.listOrgUsersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgUsersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgUsersStub = nil
	fake.listOrgUsersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesByQuery(query url.Values) ([]go_cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListSpacesByQuery", []interface{}{query})
	fake.listSpacesByQueryMutex.Unlock()
	if fake.ListSpacesByQueryStub != nil {
		return fake.ListSpacesByQueryStub(query)
	} else {
		return fake.listSpacesByQueryReturns.result1, fake.listSpacesByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return fake.listSpacesByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListSpacesByQueryReturns(result1 []go_cfclient.Space, result2 error) {
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveSpaceAuditor(spaceGUID string, userGUID string) error {
	fake.removeSpaceAuditorMutex.Lock()
	fake.removeSpaceAuditorArgsForCall = append(fake.removeSpaceAuditorArgsForCall, struct {
		spaceGUID string
		userGUID  string
	}{spaceGUID, userGUID})
	fake.recordInvocation("RemoveSpaceAuditor", []interface{}{spaceGUID, userGUID})
	fake.removeSpaceAuditorMutex.Unlock()
	if fake.RemoveSpaceAuditorStub != nil {
		return fake.RemoveSpaceAuditorStub(spaceGUID, userGUID)
	} else {
		return fake.removeSpaceAuditorReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceAuditorCallCount() int {
	fake.removeSpaceAuditorMutex.RLock()
	defer fake.removeSpaceAuditorMutex.RUnlock()
	return len(fake.removeSpaceAuditorArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorArgsForCall(i int) (string, string) {
	fake.removeSpaceAuditorMutex.RLock()
	defer fake.removeSpaceAuditorMutex.RUnlock()
	return fake.removeSpaceAuditorArgsForCall[i].spaceGUID, fake.removeSpaceAuditorArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveSpaceAuditorReturns(result1 error) {
	fake.RemoveSpaceAuditorStub = nil
	fake.removeSpaceAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloper(spaceGUID string, userGUID string) error {
	fake.removeSpaceDeveloperMutex.Lock()
	fake.removeSpaceDeveloperArgsForCall = append(fake.removeSpaceDeveloperArgsForCall, struct {
		spaceGUID string
		userGUID  string
	}{spaceGUID, userGUID})
	fake.recordInvocation("RemoveSpaceDeveloper", []interface{}{spaceGUID, userGUID})
	fake.removeSpaceDeveloperMutex.Unlock()
	if fake.RemoveSpaceDeveloperStub != nil {
		return fake.RemoveSpaceDeveloperStub(spaceGUID, userGUID)
	} else {
		return fake.removeSpaceDeveloperReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperCallCount() int {
	fake.removeSpaceDeveloperMutex.RLock()
	defer fake.removeSpaceDeveloperMutex.RUnlock()
	return len(fake.removeSpaceDeveloperArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperArgsForCall(i int) (string, string) {
	fake.removeSpaceDeveloperMutex.RLock()
	defer fake.removeSpaceDeveloperMutex.RUnlock()
	return fake.removeSpaceDeveloperArgsForCall[i].spaceGUID, fake.removeSpaceDeveloperArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveSpaceDeveloperReturns(result1 error) {
	fake.RemoveSpaceDeveloperStub = nil
	fake.removeSpaceDeveloperReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManager(spaceGUID string, userGUID string) error {
	fake.removeSpaceManagerMutex.Lock()
	fake.removeSpaceManagerArgsForCall = append(fake.removeSpaceManagerArgsForCall, struct {
		spaceGUID string
		userGUID  string
	}{spaceGUID, userGUID})
	fake.recordInvocation("RemoveSpaceManager", []interface{}{spaceGUID, userGUID})
	fake.removeSpaceManagerMutex.Unlock()
	if fake.RemoveSpaceManagerStub != nil {
		return fake.RemoveSpaceManagerStub(spaceGUID, userGUID)
	} else {
		return fake.removeSpaceManagerReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceManagerCallCount() int {
	fake.removeSpaceManagerMutex.RLock()
	defer fake.removeSpaceManagerMutex.RUnlock()
	return len(fake.removeSpaceManagerArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerArgsForCall(i int) (string, string) {
	fake.removeSpaceManagerMutex.RLock()
	defer fake.removeSpaceManagerMutex.RUnlock()
	return fake.removeSpaceManagerArgsForCall[i].spaceGUID, fake.removeSpaceManagerArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveSpaceManagerReturns(result1 error) {
	fake.RemoveSpaceManagerStub = nil
	fake.removeSpaceManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AssociateOrgUser(orgGUID string, userGUID string) (go_cfclient.Org, error) {
	fake.associateOrgUserMutex.Lock()
	fake.associateOrgUserArgsForCall = append(fake.associateOrgUserArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("AssociateOrgUser", []interface{}{orgGUID, userGUID})
	fake.associateOrgUserMutex.Unlock()
	if fake.AssociateOrgUserStub != nil {
		return fake.AssociateOrgUserStub(orgGUID, userGUID)
	} else {
		return fake.associateOrgUserReturns.result1, fake.associateOrgUserReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgUserCallCount() int {
	fake.associateOrgUserMutex.RLock()
	defer fake.associateOrgUserMutex.RUnlock()
	return len(fake.associateOrgUserArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserArgsForCall(i int) (string, string) {
	fake.associateOrgUserMutex.RLock()
	defer fake.associateOrgUserMutex.RUnlock()
	return fake.associateOrgUserArgsForCall[i].orgGUID, fake.associateOrgUserArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateOrgUserReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgUserStub = nil
	fake.associateOrgUserReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditor(spaceGUID string, userGUID string) (go_cfclient.Space, error) {
	fake.associateSpaceAuditorMutex.Lock()
	fake.associateSpaceAuditorArgsForCall = append(fake.associateSpaceAuditorArgsForCall, struct {
		spaceGUID string
		userGUID  string
	}{spaceGUID, userGUID})
	fake.recordInvocation("AssociateSpaceAuditor", []interface{}{spaceGUID, userGUID})
	fake.associateSpaceAuditorMutex.Unlock()
	if fake.AssociateSpaceAuditorStub != nil {
		return fake.AssociateSpaceAuditorStub(spaceGUID, userGUID)
	} else {
		return fake.associateSpaceAuditorReturns.result1, fake.associateSpaceAuditorReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceAuditorCallCount() int {
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	return len(fake.associateSpaceAuditorArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorArgsForCall(i int) (string, string) {
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	return fake.associateSpaceAuditorArgsForCall[i].spaceGUID, fake.associateSpaceAuditorArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateSpaceAuditorReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceAuditorStub = nil
	fake.associateSpaceAuditorReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloper(spaceGUID string, userGUID string) (go_cfclient.Space, error) {
	fake.associateSpaceDeveloperMutex.Lock()
	fake.associateSpaceDeveloperArgsForCall = append(fake.associateSpaceDeveloperArgsForCall, struct {
		spaceGUID string
		userGUID  string
	}{spaceGUID, userGUID})
	fake.recordInvocation("AssociateSpaceDeveloper", []interface{}{spaceGUID, userGUID})
	fake.associateSpaceDeveloperMutex.Unlock()
	if fake.AssociateSpaceDeveloperStub != nil {
		return fake.AssociateSpaceDeveloperStub(spaceGUID, userGUID)
	} else {
		return fake.associateSpaceDeveloperReturns.result1, fake.associateSpaceDeveloperReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperCallCount() int {
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	return len(fake.associateSpaceDeveloperArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperArgsForCall(i int) (string, string) {
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	return fake.associateSpaceDeveloperArgsForCall[i].spaceGUID, fake.associateSpaceDeveloperArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateSpaceDeveloperReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceDeveloperStub = nil
	fake.associateSpaceDeveloperReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManager(spaceGUID string, userGUID string) (go_cfclient.Space, error) {
	fake.associateSpaceManagerMutex.Lock()
	fake.associateSpaceManagerArgsForCall = append(fake.associateSpaceManagerArgsForCall, struct {
		spaceGUID string
		userGUID  string
	}{spaceGUID, userGUID})
	fake.recordInvocation("AssociateSpaceManager", []interface{}{spaceGUID, userGUID})
	fake.associateSpaceManagerMutex.Unlock()
	if fake.AssociateSpaceManagerStub != nil {
		return fake.AssociateSpaceManagerStub(spaceGUID, userGUID)
	} else {
		return fake.associateSpaceManagerReturns.result1, fake.associateSpaceManagerReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceManagerCallCount() int {
	fake.associateSpaceManagerMutex.RLock()
	defer fake.associateSpaceManagerMutex.RUnlock()
	return len(fake.associateSpaceManagerArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerArgsForCall(i int) (string, string) {
	fake.associateSpaceManagerMutex.RLock()
	defer fake.associateSpaceManagerMutex.RUnlock()
	return fake.associateSpaceManagerArgsForCall[i].spaceGUID, fake.associateSpaceManagerArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateSpaceManagerReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceManagerStub = nil
	fake.associateSpaceManagerReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveOrgUser(orgGUID string, userGUID string) error {
	fake.removeOrgUserMutex.Lock()
	fake.removeOrgUserArgsForCall = append(fake.removeOrgUserArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("RemoveOrgUser", []interface{}{orgGUID, userGUID})
	fake.removeOrgUserMutex.Unlock()
	if fake.RemoveOrgUserStub != nil {
		return fake.RemoveOrgUserStub(orgGUID, userGUID)
	} else {
		return fake.removeOrgUserReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgUserCallCount() int {
	fake.removeOrgUserMutex.RLock()
	defer fake.removeOrgUserMutex.RUnlock()
	return len(fake.removeOrgUserArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgUserArgsForCall(i int) (string, string) {
	fake.removeOrgUserMutex.RLock()
	defer fake.removeOrgUserMutex.RUnlock()
	return fake.removeOrgUserArgsForCall[i].orgGUID, fake.removeOrgUserArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveOrgUserReturns(result1 error) {
	fake.RemoveOrgUserStub = nil
	fake.removeOrgUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditor(orgGUID string, userGUID string) error {
	fake.removeOrgAuditorMutex.Lock()
	fake.removeOrgAuditorArgsForCall = append(fake.removeOrgAuditorArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("RemoveOrgAuditor", []interface{}{orgGUID, userGUID})
	fake.removeOrgAuditorMutex.Unlock()
	if fake.RemoveOrgAuditorStub != nil {
		return fake.RemoveOrgAuditorStub(orgGUID, userGUID)
	} else {
		return fake.removeOrgAuditorReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgAuditorCallCount() int {
	fake.removeOrgAuditorMutex.RLock()
	defer fake.removeOrgAuditorMutex.RUnlock()
	return len(fake.removeOrgAuditorArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgAuditorArgsForCall(i int) (string, string) {
	fake.removeOrgAuditorMutex.RLock()
	defer fake.removeOrgAuditorMutex.RUnlock()
	return fake.removeOrgAuditorArgsForCall[i].orgGUID, fake.removeOrgAuditorArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveOrgAuditorReturns(result1 error) {
	fake.RemoveOrgAuditorStub = nil
	fake.removeOrgAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManager(orgGUID string, userGUID string) error {
	fake.removeOrgBillingManagerMutex.Lock()
	fake.removeOrgBillingManagerArgsForCall = append(fake.removeOrgBillingManagerArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("RemoveOrgBillingManager", []interface{}{orgGUID, userGUID})
	fake.removeOrgBillingManagerMutex.Unlock()
	if fake.RemoveOrgBillingManagerStub != nil {
		return fake.RemoveOrgBillingManagerStub(orgGUID, userGUID)
	} else {
		return fake.removeOrgBillingManagerReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerCallCount() int {
	fake.removeOrgBillingManagerMutex.RLock()
	defer fake.removeOrgBillingManagerMutex.RUnlock()
	return len(fake.removeOrgBillingManagerArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgBillingManagerArgsForCall(i int) (string, string) {
	fake.removeOrgBillingManagerMutex.RLock()
	defer fake.removeOrgBillingManagerMutex.RUnlock()
	return fake.removeOrgBillingManagerArgsForCall[i].orgGUID, fake.removeOrgBillingManagerArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveOrgBillingManagerReturns(result1 error) {
	fake.RemoveOrgBillingManagerStub = nil
	fake.removeOrgBillingManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManager(orgGUID string, userGUID string) error {
	fake.removeOrgManagerMutex.Lock()
	fake.removeOrgManagerArgsForCall = append(fake.removeOrgManagerArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("RemoveOrgManager", []interface{}{orgGUID, userGUID})
	fake.removeOrgManagerMutex.Unlock()
	if fake.RemoveOrgManagerStub != nil {
		return fake.RemoveOrgManagerStub(orgGUID, userGUID)
	} else {
		return fake.removeOrgManagerReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgManagerCallCount() int {
	fake.removeOrgManagerMutex.RLock()
	defer fake.removeOrgManagerMutex.RUnlock()
	return len(fake.removeOrgManagerArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgManagerArgsForCall(i int) (string, string) {
	fake.removeOrgManagerMutex.RLock()
	defer fake.removeOrgManagerMutex.RUnlock()
	return fake.removeOrgManagerArgsForCall[i].orgGUID, fake.removeOrgManagerArgsForCall[i].userGUID
}

func (fake *FakeCFClient) RemoveOrgManagerReturns(result1 error) {
	fake.RemoveOrgManagerStub = nil
	fake.removeOrgManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AssociateOrgAuditor(orgGUID string, userGUID string) (go_cfclient.Org, error) {
	fake.associateOrgAuditorMutex.Lock()
	fake.associateOrgAuditorArgsForCall = append(fake.associateOrgAuditorArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("AssociateOrgAuditor", []interface{}{orgGUID, userGUID})
	fake.associateOrgAuditorMutex.Unlock()
	if fake.AssociateOrgAuditorStub != nil {
		return fake.AssociateOrgAuditorStub(orgGUID, userGUID)
	} else {
		return fake.associateOrgAuditorReturns.result1, fake.associateOrgAuditorReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgAuditorCallCount() int {
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	return len(fake.associateOrgAuditorArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgAuditorArgsForCall(i int) (string, string) {
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	return fake.associateOrgAuditorArgsForCall[i].orgGUID, fake.associateOrgAuditorArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateOrgAuditorReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgAuditorStub = nil
	fake.associateOrgAuditorReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManager(orgGUID string, userGUID string) (go_cfclient.Org, error) {
	fake.associateOrgManagerMutex.Lock()
	fake.associateOrgManagerArgsForCall = append(fake.associateOrgManagerArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("AssociateOrgManager", []interface{}{orgGUID, userGUID})
	fake.associateOrgManagerMutex.Unlock()
	if fake.AssociateOrgManagerStub != nil {
		return fake.AssociateOrgManagerStub(orgGUID, userGUID)
	} else {
		return fake.associateOrgManagerReturns.result1, fake.associateOrgManagerReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgManagerCallCount() int {
	fake.associateOrgManagerMutex.RLock()
	defer fake.associateOrgManagerMutex.RUnlock()
	return len(fake.associateOrgManagerArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgManagerArgsForCall(i int) (string, string) {
	fake.associateOrgManagerMutex.RLock()
	defer fake.associateOrgManagerMutex.RUnlock()
	return fake.associateOrgManagerArgsForCall[i].orgGUID, fake.associateOrgManagerArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateOrgManagerReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgManagerStub = nil
	fake.associateOrgManagerReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManager(orgGUID string, userGUID string) (go_cfclient.Org, error) {
	fake.associateOrgBillingManagerMutex.Lock()
	fake.associateOrgBillingManagerArgsForCall = append(fake.associateOrgBillingManagerArgsForCall, struct {
		orgGUID  string
		userGUID string
	}{orgGUID, userGUID})
	fake.recordInvocation("AssociateOrgBillingManager", []interface{}{orgGUID, userGUID})
	fake.associateOrgBillingManagerMutex.Unlock()
	if fake.AssociateOrgBillingManagerStub != nil {
		return fake.AssociateOrgBillingManagerStub(orgGUID, userGUID)
	} else {
		return fake.associateOrgBillingManagerReturns.result1, fake.associateOrgBillingManagerReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerCallCount() int {
	fake.associateOrgBillingManagerMutex.RLock()
	defer fake.associateOrgBillingManagerMutex.RUnlock()
	return len(fake.associateOrgBillingManagerArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgBillingManagerArgsForCall(i int) (string, string) {
	fake.associateOrgBillingManagerMutex.RLock()
	defer fake.associateOrgBillingManagerMutex.RUnlock()
	return fake.associateOrgBillingManagerArgsForCall[i].orgGUID, fake.associateOrgBillingManagerArgsForCall[i].userGUID
}

func (fake *FakeCFClient) AssociateOrgBillingManagerReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgBillingManagerStub = nil
	fake.associateOrgBillingManagerReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	fake.removeSpaceAuditorMutex.RLock()
	defer fake.removeSpaceAuditorMutex.RUnlock()
	fake.removeSpaceDeveloperMutex.RLock()
	defer fake.removeSpaceDeveloperMutex.RUnlock()
	fake.removeSpaceManagerMutex.RLock()
	defer fake.removeSpaceManagerMutex.RUnlock()
	fake.associateOrgUserMutex.RLock()
	defer fake.associateOrgUserMutex.RUnlock()
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	fake.associateSpaceManagerMutex.RLock()
	defer fake.associateSpaceManagerMutex.RUnlock()
	fake.removeOrgUserMutex.RLock()
	defer fake.removeOrgUserMutex.RUnlock()
	fake.removeOrgAuditorMutex.RLock()
	defer fake.removeOrgAuditorMutex.RUnlock()
	fake.removeOrgBillingManagerMutex.RLock()
	defer fake.removeOrgBillingManagerMutex.RUnlock()
	fake.removeOrgManagerMutex.RLock()
	defer fake.removeOrgManagerMutex.RUnlock()
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	fake.associateOrgManagerMutex.RLock()
	defer fake.associateOrgManagerMutex.RUnlock()
	fake.associateOrgBillingManagerMutex.RLock()
	defer fake.associateOrgBillingManagerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.CFClient = new(FakeCFClient)
