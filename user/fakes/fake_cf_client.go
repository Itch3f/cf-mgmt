// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/user"
)

type FakeCFClient struct {
	RemoveSpaceAuditorByUsernameStub        func(spaceGUID, userName string) error
	removeSpaceAuditorByUsernameMutex       sync.RWMutex
	removeSpaceAuditorByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	removeSpaceAuditorByUsernameReturns struct {
		result1 error
	}
	RemoveSpaceDeveloperByUsernameStub        func(spaceGUID, userName string) error
	removeSpaceDeveloperByUsernameMutex       sync.RWMutex
	removeSpaceDeveloperByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	removeSpaceDeveloperByUsernameReturns struct {
		result1 error
	}
	RemoveSpaceManagerByUsernameStub        func(spaceGUID, userName string) error
	removeSpaceManagerByUsernameMutex       sync.RWMutex
	removeSpaceManagerByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	removeSpaceManagerByUsernameReturns struct {
		result1 error
	}
	ListSpaceAuditorsStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceAuditorsMutex       sync.RWMutex
	listSpaceAuditorsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceManagersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceManagersMutex       sync.RWMutex
	listSpaceManagersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListSpaceDevelopersStub        func(spaceGUID string) ([]go_cfclient.User, error)
	listSpaceDevelopersMutex       sync.RWMutex
	listSpaceDevelopersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceDevelopersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	AssociateOrgUserByUsernameStub        func(orgGUID, userName string) (go_cfclient.Org, error)
	associateOrgUserByUsernameMutex       sync.RWMutex
	associateOrgUserByUsernameArgsForCall []struct {
		orgGUID  string
		userName string
	}
	associateOrgUserByUsernameReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateSpaceAuditorByUsernameStub        func(spaceGUID, userName string) (go_cfclient.Space, error)
	associateSpaceAuditorByUsernameMutex       sync.RWMutex
	associateSpaceAuditorByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	associateSpaceAuditorByUsernameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperByUsernameStub        func(spaceGUID, userName string) (go_cfclient.Space, error)
	associateSpaceDeveloperByUsernameMutex       sync.RWMutex
	associateSpaceDeveloperByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	associateSpaceDeveloperByUsernameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AssociateSpaceManagerByUsernameStub        func(spaceGUID, userName string) (go_cfclient.Space, error)
	associateSpaceManagerByUsernameMutex       sync.RWMutex
	associateSpaceManagerByUsernameArgsForCall []struct {
		spaceGUID string
		userName  string
	}
	associateSpaceManagerByUsernameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	RemoveOrgUserByUsernameStub        func(orgGUID, name string) error
	removeOrgUserByUsernameMutex       sync.RWMutex
	removeOrgUserByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	removeOrgUserByUsernameReturns struct {
		result1 error
	}
	RemoveOrgAuditorByUsernameStub        func(orgGUID, name string) error
	removeOrgAuditorByUsernameMutex       sync.RWMutex
	removeOrgAuditorByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	removeOrgAuditorByUsernameReturns struct {
		result1 error
	}
	RemoveOrgBillingManagerByUsernameStub        func(orgGUID, name string) error
	removeOrgBillingManagerByUsernameMutex       sync.RWMutex
	removeOrgBillingManagerByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	removeOrgBillingManagerByUsernameReturns struct {
		result1 error
	}
	RemoveOrgManagerByUsernameStub        func(orgGUID, name string) error
	removeOrgManagerByUsernameMutex       sync.RWMutex
	removeOrgManagerByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	removeOrgManagerByUsernameReturns struct {
		result1 error
	}
	ListOrgAuditorsStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgAuditorsMutex       sync.RWMutex
	listOrgAuditorsArgsForCall []struct {
		orgGUID string
	}
	listOrgAuditorsReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgManagersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgManagersMutex       sync.RWMutex
	listOrgManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	ListOrgBillingManagersStub        func(orgGUID string) ([]go_cfclient.User, error)
	listOrgBillingManagersMutex       sync.RWMutex
	listOrgBillingManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgBillingManagersReturns struct {
		result1 []go_cfclient.User
		result2 error
	}
	AssociateOrgAuditorByUsernameStub        func(orgGUID, name string) (go_cfclient.Org, error)
	associateOrgAuditorByUsernameMutex       sync.RWMutex
	associateOrgAuditorByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	associateOrgAuditorByUsernameReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateOrgManagerByUsernameStub        func(orgGUID, name string) (go_cfclient.Org, error)
	associateOrgManagerByUsernameMutex       sync.RWMutex
	associateOrgManagerByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	associateOrgManagerByUsernameReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	AssociateOrgBillingManagerByUsernameStub        func(orgGUID, name string) (go_cfclient.Org, error)
	associateOrgBillingManagerByUsernameMutex       sync.RWMutex
	associateOrgBillingManagerByUsernameArgsForCall []struct {
		orgGUID string
		name    string
	}
	associateOrgBillingManagerByUsernameReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsername(spaceGUID string, userName string) error {
	fake.removeSpaceAuditorByUsernameMutex.Lock()
	fake.removeSpaceAuditorByUsernameArgsForCall = append(fake.removeSpaceAuditorByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("RemoveSpaceAuditorByUsername", []interface{}{spaceGUID, userName})
	fake.removeSpaceAuditorByUsernameMutex.Unlock()
	if fake.RemoveSpaceAuditorByUsernameStub != nil {
		return fake.RemoveSpaceAuditorByUsernameStub(spaceGUID, userName)
	} else {
		return fake.removeSpaceAuditorByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameCallCount() int {
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	return len(fake.removeSpaceAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	return fake.removeSpaceAuditorByUsernameArgsForCall[i].spaceGUID, fake.removeSpaceAuditorByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameReturns(result1 error) {
	fake.RemoveSpaceAuditorByUsernameStub = nil
	fake.removeSpaceAuditorByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsername(spaceGUID string, userName string) error {
	fake.removeSpaceDeveloperByUsernameMutex.Lock()
	fake.removeSpaceDeveloperByUsernameArgsForCall = append(fake.removeSpaceDeveloperByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("RemoveSpaceDeveloperByUsername", []interface{}{spaceGUID, userName})
	fake.removeSpaceDeveloperByUsernameMutex.Unlock()
	if fake.RemoveSpaceDeveloperByUsernameStub != nil {
		return fake.RemoveSpaceDeveloperByUsernameStub(spaceGUID, userName)
	} else {
		return fake.removeSpaceDeveloperByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameCallCount() int {
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.removeSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	return fake.removeSpaceDeveloperByUsernameArgsForCall[i].spaceGUID, fake.removeSpaceDeveloperByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameReturns(result1 error) {
	fake.RemoveSpaceDeveloperByUsernameStub = nil
	fake.removeSpaceDeveloperByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsername(spaceGUID string, userName string) error {
	fake.removeSpaceManagerByUsernameMutex.Lock()
	fake.removeSpaceManagerByUsernameArgsForCall = append(fake.removeSpaceManagerByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("RemoveSpaceManagerByUsername", []interface{}{spaceGUID, userName})
	fake.removeSpaceManagerByUsernameMutex.Unlock()
	if fake.RemoveSpaceManagerByUsernameStub != nil {
		return fake.RemoveSpaceManagerByUsernameStub(spaceGUID, userName)
	} else {
		return fake.removeSpaceManagerByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameCallCount() int {
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.removeSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	return fake.removeSpaceManagerByUsernameArgsForCall[i].spaceGUID, fake.removeSpaceManagerByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameReturns(result1 error) {
	fake.RemoveSpaceManagerByUsernameStub = nil
	fake.removeSpaceManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListSpaceAuditors(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceAuditorsMutex.Lock()
	fake.listSpaceAuditorsArgsForCall = append(fake.listSpaceAuditorsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceAuditors", []interface{}{spaceGUID})
	fake.listSpaceAuditorsMutex.Unlock()
	if fake.ListSpaceAuditorsStub != nil {
		return fake.ListSpaceAuditorsStub(spaceGUID)
	} else {
		return fake.listSpaceAuditorsReturns.result1, fake.listSpaceAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceAuditorsCallCount() int {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return len(fake.listSpaceAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceAuditorsArgsForCall(i int) string {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return fake.listSpaceAuditorsArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceAuditorsStub = nil
	fake.listSpaceAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceManagersMutex.Lock()
	fake.listSpaceManagersArgsForCall = append(fake.listSpaceManagersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceManagers", []interface{}{spaceGUID})
	fake.listSpaceManagersMutex.Unlock()
	if fake.ListSpaceManagersStub != nil {
		return fake.ListSpaceManagersStub(spaceGUID)
	} else {
		return fake.listSpaceManagersReturns.result1, fake.listSpaceManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceManagersCallCount() int {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return len(fake.listSpaceManagersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceManagersArgsForCall(i int) string {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return fake.listSpaceManagersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceManagersStub = nil
	fake.listSpaceManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopers(spaceGUID string) ([]go_cfclient.User, error) {
	fake.listSpaceDevelopersMutex.Lock()
	fake.listSpaceDevelopersArgsForCall = append(fake.listSpaceDevelopersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceDevelopers", []interface{}{spaceGUID})
	fake.listSpaceDevelopersMutex.Unlock()
	if fake.ListSpaceDevelopersStub != nil {
		return fake.ListSpaceDevelopersStub(spaceGUID)
	} else {
		return fake.listSpaceDevelopersReturns.result1, fake.listSpaceDevelopersReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceDevelopersCallCount() int {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return len(fake.listSpaceDevelopersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceDevelopersArgsForCall(i int) string {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return fake.listSpaceDevelopersArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceDevelopersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListSpaceDevelopersStub = nil
	fake.listSpaceDevelopersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsername(orgGUID string, userName string) (go_cfclient.Org, error) {
	fake.associateOrgUserByUsernameMutex.Lock()
	fake.associateOrgUserByUsernameArgsForCall = append(fake.associateOrgUserByUsernameArgsForCall, struct {
		orgGUID  string
		userName string
	}{orgGUID, userName})
	fake.recordInvocation("AssociateOrgUserByUsername", []interface{}{orgGUID, userName})
	fake.associateOrgUserByUsernameMutex.Unlock()
	if fake.AssociateOrgUserByUsernameStub != nil {
		return fake.AssociateOrgUserByUsernameStub(orgGUID, userName)
	} else {
		return fake.associateOrgUserByUsernameReturns.result1, fake.associateOrgUserByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameCallCount() int {
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	return len(fake.associateOrgUserByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	return fake.associateOrgUserByUsernameArgsForCall[i].orgGUID, fake.associateOrgUserByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgUserByUsernameStub = nil
	fake.associateOrgUserByUsernameReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsername(spaceGUID string, userName string) (go_cfclient.Space, error) {
	fake.associateSpaceAuditorByUsernameMutex.Lock()
	fake.associateSpaceAuditorByUsernameArgsForCall = append(fake.associateSpaceAuditorByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("AssociateSpaceAuditorByUsername", []interface{}{spaceGUID, userName})
	fake.associateSpaceAuditorByUsernameMutex.Unlock()
	if fake.AssociateSpaceAuditorByUsernameStub != nil {
		return fake.AssociateSpaceAuditorByUsernameStub(spaceGUID, userName)
	} else {
		return fake.associateSpaceAuditorByUsernameReturns.result1, fake.associateSpaceAuditorByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameCallCount() int {
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	return len(fake.associateSpaceAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	return fake.associateSpaceAuditorByUsernameArgsForCall[i].spaceGUID, fake.associateSpaceAuditorByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceAuditorByUsernameStub = nil
	fake.associateSpaceAuditorByUsernameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsername(spaceGUID string, userName string) (go_cfclient.Space, error) {
	fake.associateSpaceDeveloperByUsernameMutex.Lock()
	fake.associateSpaceDeveloperByUsernameArgsForCall = append(fake.associateSpaceDeveloperByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("AssociateSpaceDeveloperByUsername", []interface{}{spaceGUID, userName})
	fake.associateSpaceDeveloperByUsernameMutex.Unlock()
	if fake.AssociateSpaceDeveloperByUsernameStub != nil {
		return fake.AssociateSpaceDeveloperByUsernameStub(spaceGUID, userName)
	} else {
		return fake.associateSpaceDeveloperByUsernameReturns.result1, fake.associateSpaceDeveloperByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameCallCount() int {
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.associateSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	return fake.associateSpaceDeveloperByUsernameArgsForCall[i].spaceGUID, fake.associateSpaceDeveloperByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceDeveloperByUsernameStub = nil
	fake.associateSpaceDeveloperByUsernameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsername(spaceGUID string, userName string) (go_cfclient.Space, error) {
	fake.associateSpaceManagerByUsernameMutex.Lock()
	fake.associateSpaceManagerByUsernameArgsForCall = append(fake.associateSpaceManagerByUsernameArgsForCall, struct {
		spaceGUID string
		userName  string
	}{spaceGUID, userName})
	fake.recordInvocation("AssociateSpaceManagerByUsername", []interface{}{spaceGUID, userName})
	fake.associateSpaceManagerByUsernameMutex.Unlock()
	if fake.AssociateSpaceManagerByUsernameStub != nil {
		return fake.AssociateSpaceManagerByUsernameStub(spaceGUID, userName)
	} else {
		return fake.associateSpaceManagerByUsernameReturns.result1, fake.associateSpaceManagerByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameCallCount() int {
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.associateSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	return fake.associateSpaceManagerByUsernameArgsForCall[i].spaceGUID, fake.associateSpaceManagerByUsernameArgsForCall[i].userName
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameReturns(result1 go_cfclient.Space, result2 error) {
	fake.AssociateSpaceManagerByUsernameStub = nil
	fake.associateSpaceManagerByUsernameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveOrgUserByUsername(orgGUID string, name string) error {
	fake.removeOrgUserByUsernameMutex.Lock()
	fake.removeOrgUserByUsernameArgsForCall = append(fake.removeOrgUserByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("RemoveOrgUserByUsername", []interface{}{orgGUID, name})
	fake.removeOrgUserByUsernameMutex.Unlock()
	if fake.RemoveOrgUserByUsernameStub != nil {
		return fake.RemoveOrgUserByUsernameStub(orgGUID, name)
	} else {
		return fake.removeOrgUserByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameCallCount() int {
	fake.removeOrgUserByUsernameMutex.RLock()
	defer fake.removeOrgUserByUsernameMutex.RUnlock()
	return len(fake.removeOrgUserByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgUserByUsernameMutex.RLock()
	defer fake.removeOrgUserByUsernameMutex.RUnlock()
	return fake.removeOrgUserByUsernameArgsForCall[i].orgGUID, fake.removeOrgUserByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameReturns(result1 error) {
	fake.RemoveOrgUserByUsernameStub = nil
	fake.removeOrgUserByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsername(orgGUID string, name string) error {
	fake.removeOrgAuditorByUsernameMutex.Lock()
	fake.removeOrgAuditorByUsernameArgsForCall = append(fake.removeOrgAuditorByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("RemoveOrgAuditorByUsername", []interface{}{orgGUID, name})
	fake.removeOrgAuditorByUsernameMutex.Unlock()
	if fake.RemoveOrgAuditorByUsernameStub != nil {
		return fake.RemoveOrgAuditorByUsernameStub(orgGUID, name)
	} else {
		return fake.removeOrgAuditorByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameCallCount() int {
	fake.removeOrgAuditorByUsernameMutex.RLock()
	defer fake.removeOrgAuditorByUsernameMutex.RUnlock()
	return len(fake.removeOrgAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgAuditorByUsernameMutex.RLock()
	defer fake.removeOrgAuditorByUsernameMutex.RUnlock()
	return fake.removeOrgAuditorByUsernameArgsForCall[i].orgGUID, fake.removeOrgAuditorByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameReturns(result1 error) {
	fake.RemoveOrgAuditorByUsernameStub = nil
	fake.removeOrgAuditorByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsername(orgGUID string, name string) error {
	fake.removeOrgBillingManagerByUsernameMutex.Lock()
	fake.removeOrgBillingManagerByUsernameArgsForCall = append(fake.removeOrgBillingManagerByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("RemoveOrgBillingManagerByUsername", []interface{}{orgGUID, name})
	fake.removeOrgBillingManagerByUsernameMutex.Unlock()
	if fake.RemoveOrgBillingManagerByUsernameStub != nil {
		return fake.RemoveOrgBillingManagerByUsernameStub(orgGUID, name)
	} else {
		return fake.removeOrgBillingManagerByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameCallCount() int {
	fake.removeOrgBillingManagerByUsernameMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameMutex.RUnlock()
	return len(fake.removeOrgBillingManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgBillingManagerByUsernameMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameMutex.RUnlock()
	return fake.removeOrgBillingManagerByUsernameArgsForCall[i].orgGUID, fake.removeOrgBillingManagerByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameReturns(result1 error) {
	fake.RemoveOrgBillingManagerByUsernameStub = nil
	fake.removeOrgBillingManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsername(orgGUID string, name string) error {
	fake.removeOrgManagerByUsernameMutex.Lock()
	fake.removeOrgManagerByUsernameArgsForCall = append(fake.removeOrgManagerByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("RemoveOrgManagerByUsername", []interface{}{orgGUID, name})
	fake.removeOrgManagerByUsernameMutex.Unlock()
	if fake.RemoveOrgManagerByUsernameStub != nil {
		return fake.RemoveOrgManagerByUsernameStub(orgGUID, name)
	} else {
		return fake.removeOrgManagerByUsernameReturns.result1
	}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameCallCount() int {
	fake.removeOrgManagerByUsernameMutex.RLock()
	defer fake.removeOrgManagerByUsernameMutex.RUnlock()
	return len(fake.removeOrgManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgManagerByUsernameMutex.RLock()
	defer fake.removeOrgManagerByUsernameMutex.RUnlock()
	return fake.removeOrgManagerByUsernameArgsForCall[i].orgGUID, fake.removeOrgManagerByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameReturns(result1 error) {
	fake.RemoveOrgManagerByUsernameStub = nil
	fake.removeOrgManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListOrgAuditors(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgAuditorsMutex.Lock()
	fake.listOrgAuditorsArgsForCall = append(fake.listOrgAuditorsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgAuditors", []interface{}{orgGUID})
	fake.listOrgAuditorsMutex.Unlock()
	if fake.ListOrgAuditorsStub != nil {
		return fake.ListOrgAuditorsStub(orgGUID)
	} else {
		return fake.listOrgAuditorsReturns.result1, fake.listOrgAuditorsReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgAuditorsCallCount() int {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return len(fake.listOrgAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListOrgAuditorsArgsForCall(i int) string {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return fake.listOrgAuditorsArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgAuditorsReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgAuditorsStub = nil
	fake.listOrgAuditorsReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgManagersMutex.Lock()
	fake.listOrgManagersArgsForCall = append(fake.listOrgManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgManagers", []interface{}{orgGUID})
	fake.listOrgManagersMutex.Unlock()
	if fake.ListOrgManagersStub != nil {
		return fake.ListOrgManagersStub(orgGUID)
	} else {
		return fake.listOrgManagersReturns.result1, fake.listOrgManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgManagersCallCount() int {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return len(fake.listOrgManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgManagersArgsForCall(i int) string {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return fake.listOrgManagersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgManagersStub = nil
	fake.listOrgManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagers(orgGUID string) ([]go_cfclient.User, error) {
	fake.listOrgBillingManagersMutex.Lock()
	fake.listOrgBillingManagersArgsForCall = append(fake.listOrgBillingManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgBillingManagers", []interface{}{orgGUID})
	fake.listOrgBillingManagersMutex.Unlock()
	if fake.ListOrgBillingManagersStub != nil {
		return fake.ListOrgBillingManagersStub(orgGUID)
	} else {
		return fake.listOrgBillingManagersReturns.result1, fake.listOrgBillingManagersReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgBillingManagersCallCount() int {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return len(fake.listOrgBillingManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgBillingManagersArgsForCall(i int) string {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return fake.listOrgBillingManagersArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgBillingManagersReturns(result1 []go_cfclient.User, result2 error) {
	fake.ListOrgBillingManagersStub = nil
	fake.listOrgBillingManagersReturns = struct {
		result1 []go_cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsername(orgGUID string, name string) (go_cfclient.Org, error) {
	fake.associateOrgAuditorByUsernameMutex.Lock()
	fake.associateOrgAuditorByUsernameArgsForCall = append(fake.associateOrgAuditorByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("AssociateOrgAuditorByUsername", []interface{}{orgGUID, name})
	fake.associateOrgAuditorByUsernameMutex.Unlock()
	if fake.AssociateOrgAuditorByUsernameStub != nil {
		return fake.AssociateOrgAuditorByUsernameStub(orgGUID, name)
	} else {
		return fake.associateOrgAuditorByUsernameReturns.result1, fake.associateOrgAuditorByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameCallCount() int {
	fake.associateOrgAuditorByUsernameMutex.RLock()
	defer fake.associateOrgAuditorByUsernameMutex.RUnlock()
	return len(fake.associateOrgAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgAuditorByUsernameMutex.RLock()
	defer fake.associateOrgAuditorByUsernameMutex.RUnlock()
	return fake.associateOrgAuditorByUsernameArgsForCall[i].orgGUID, fake.associateOrgAuditorByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgAuditorByUsernameStub = nil
	fake.associateOrgAuditorByUsernameReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsername(orgGUID string, name string) (go_cfclient.Org, error) {
	fake.associateOrgManagerByUsernameMutex.Lock()
	fake.associateOrgManagerByUsernameArgsForCall = append(fake.associateOrgManagerByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("AssociateOrgManagerByUsername", []interface{}{orgGUID, name})
	fake.associateOrgManagerByUsernameMutex.Unlock()
	if fake.AssociateOrgManagerByUsernameStub != nil {
		return fake.AssociateOrgManagerByUsernameStub(orgGUID, name)
	} else {
		return fake.associateOrgManagerByUsernameReturns.result1, fake.associateOrgManagerByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameCallCount() int {
	fake.associateOrgManagerByUsernameMutex.RLock()
	defer fake.associateOrgManagerByUsernameMutex.RUnlock()
	return len(fake.associateOrgManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgManagerByUsernameMutex.RLock()
	defer fake.associateOrgManagerByUsernameMutex.RUnlock()
	return fake.associateOrgManagerByUsernameArgsForCall[i].orgGUID, fake.associateOrgManagerByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgManagerByUsernameStub = nil
	fake.associateOrgManagerByUsernameReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsername(orgGUID string, name string) (go_cfclient.Org, error) {
	fake.associateOrgBillingManagerByUsernameMutex.Lock()
	fake.associateOrgBillingManagerByUsernameArgsForCall = append(fake.associateOrgBillingManagerByUsernameArgsForCall, struct {
		orgGUID string
		name    string
	}{orgGUID, name})
	fake.recordInvocation("AssociateOrgBillingManagerByUsername", []interface{}{orgGUID, name})
	fake.associateOrgBillingManagerByUsernameMutex.Unlock()
	if fake.AssociateOrgBillingManagerByUsernameStub != nil {
		return fake.AssociateOrgBillingManagerByUsernameStub(orgGUID, name)
	} else {
		return fake.associateOrgBillingManagerByUsernameReturns.result1, fake.associateOrgBillingManagerByUsernameReturns.result2
	}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameCallCount() int {
	fake.associateOrgBillingManagerByUsernameMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameMutex.RUnlock()
	return len(fake.associateOrgBillingManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgBillingManagerByUsernameMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameMutex.RUnlock()
	return fake.associateOrgBillingManagerByUsernameArgsForCall[i].orgGUID, fake.associateOrgBillingManagerByUsernameArgsForCall[i].name
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameReturns(result1 go_cfclient.Org, result2 error) {
	fake.AssociateOrgBillingManagerByUsernameStub = nil
	fake.associateOrgBillingManagerByUsernameReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	fake.removeOrgUserByUsernameMutex.RLock()
	defer fake.removeOrgUserByUsernameMutex.RUnlock()
	fake.removeOrgAuditorByUsernameMutex.RLock()
	defer fake.removeOrgAuditorByUsernameMutex.RUnlock()
	fake.removeOrgBillingManagerByUsernameMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameMutex.RUnlock()
	fake.removeOrgManagerByUsernameMutex.RLock()
	defer fake.removeOrgManagerByUsernameMutex.RUnlock()
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	fake.associateOrgAuditorByUsernameMutex.RLock()
	defer fake.associateOrgAuditorByUsernameMutex.RUnlock()
	fake.associateOrgManagerByUsernameMutex.RLock()
	defer fake.associateOrgManagerByUsernameMutex.RUnlock()
	fake.associateOrgBillingManagerByUsernameMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.CFClient = new(FakeCFClient)
