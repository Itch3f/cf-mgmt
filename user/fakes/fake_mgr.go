// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotalservices/cf-mgmt/user"
)

type FakeManager struct {
	InitializeLdapStub        func(ldapBindPassword string) error
	initializeLdapMutex       sync.RWMutex
	initializeLdapArgsForCall []struct {
		ldapBindPassword string
	}
	initializeLdapReturns struct {
		result1 error
	}
	UpdateSpaceUsersStub        func() error
	updateSpaceUsersMutex       sync.RWMutex
	updateSpaceUsersArgsForCall []struct{}
	updateSpaceUsersReturns     struct {
		result1 error
	}
	UpdateOrgUsersStub        func() error
	updateOrgUsersMutex       sync.RWMutex
	updateOrgUsersArgsForCall []struct{}
	updateOrgUsersReturns     struct {
		result1 error
	}
	ListSpaceAuditorsStub        func(spaceGUID string) (map[string]string, error)
	listSpaceAuditorsMutex       sync.RWMutex
	listSpaceAuditorsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceAuditorsReturns struct {
		result1 map[string]string
		result2 error
	}
	ListSpaceDevelopersStub        func(spaceGUID string) (map[string]string, error)
	listSpaceDevelopersMutex       sync.RWMutex
	listSpaceDevelopersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceDevelopersReturns struct {
		result1 map[string]string
		result2 error
	}
	ListSpaceManagersStub        func(spaceGUID string) (map[string]string, error)
	listSpaceManagersMutex       sync.RWMutex
	listSpaceManagersArgsForCall []struct {
		spaceGUID string
	}
	listSpaceManagersReturns struct {
		result1 map[string]string
		result2 error
	}
	ListOrgAuditorsStub        func(orgGUID string) (map[string]string, error)
	listOrgAuditorsMutex       sync.RWMutex
	listOrgAuditorsArgsForCall []struct {
		orgGUID string
	}
	listOrgAuditorsReturns struct {
		result1 map[string]string
		result2 error
	}
	ListOrgBillingManagersStub        func(orgGUID string) (map[string]string, error)
	listOrgBillingManagersMutex       sync.RWMutex
	listOrgBillingManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgBillingManagersReturns struct {
		result1 map[string]string
		result2 error
	}
	ListOrgManagersStub        func(orgGUID string) (map[string]string, error)
	listOrgManagersMutex       sync.RWMutex
	listOrgManagersArgsForCall []struct {
		orgGUID string
	}
	listOrgManagersReturns struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) InitializeLdap(ldapBindPassword string) error {
	fake.initializeLdapMutex.Lock()
	fake.initializeLdapArgsForCall = append(fake.initializeLdapArgsForCall, struct {
		ldapBindPassword string
	}{ldapBindPassword})
	fake.recordInvocation("InitializeLdap", []interface{}{ldapBindPassword})
	fake.initializeLdapMutex.Unlock()
	if fake.InitializeLdapStub != nil {
		return fake.InitializeLdapStub(ldapBindPassword)
	} else {
		return fake.initializeLdapReturns.result1
	}
}

func (fake *FakeManager) InitializeLdapCallCount() int {
	fake.initializeLdapMutex.RLock()
	defer fake.initializeLdapMutex.RUnlock()
	return len(fake.initializeLdapArgsForCall)
}

func (fake *FakeManager) InitializeLdapArgsForCall(i int) string {
	fake.initializeLdapMutex.RLock()
	defer fake.initializeLdapMutex.RUnlock()
	return fake.initializeLdapArgsForCall[i].ldapBindPassword
}

func (fake *FakeManager) InitializeLdapReturns(result1 error) {
	fake.InitializeLdapStub = nil
	fake.initializeLdapReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UpdateSpaceUsers() error {
	fake.updateSpaceUsersMutex.Lock()
	fake.updateSpaceUsersArgsForCall = append(fake.updateSpaceUsersArgsForCall, struct{}{})
	fake.recordInvocation("UpdateSpaceUsers", []interface{}{})
	fake.updateSpaceUsersMutex.Unlock()
	if fake.UpdateSpaceUsersStub != nil {
		return fake.UpdateSpaceUsersStub()
	} else {
		return fake.updateSpaceUsersReturns.result1
	}
}

func (fake *FakeManager) UpdateSpaceUsersCallCount() int {
	fake.updateSpaceUsersMutex.RLock()
	defer fake.updateSpaceUsersMutex.RUnlock()
	return len(fake.updateSpaceUsersArgsForCall)
}

func (fake *FakeManager) UpdateSpaceUsersReturns(result1 error) {
	fake.UpdateSpaceUsersStub = nil
	fake.updateSpaceUsersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UpdateOrgUsers() error {
	fake.updateOrgUsersMutex.Lock()
	fake.updateOrgUsersArgsForCall = append(fake.updateOrgUsersArgsForCall, struct{}{})
	fake.recordInvocation("UpdateOrgUsers", []interface{}{})
	fake.updateOrgUsersMutex.Unlock()
	if fake.UpdateOrgUsersStub != nil {
		return fake.UpdateOrgUsersStub()
	} else {
		return fake.updateOrgUsersReturns.result1
	}
}

func (fake *FakeManager) UpdateOrgUsersCallCount() int {
	fake.updateOrgUsersMutex.RLock()
	defer fake.updateOrgUsersMutex.RUnlock()
	return len(fake.updateOrgUsersArgsForCall)
}

func (fake *FakeManager) UpdateOrgUsersReturns(result1 error) {
	fake.UpdateOrgUsersStub = nil
	fake.updateOrgUsersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListSpaceAuditors(spaceGUID string) (map[string]string, error) {
	fake.listSpaceAuditorsMutex.Lock()
	fake.listSpaceAuditorsArgsForCall = append(fake.listSpaceAuditorsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceAuditors", []interface{}{spaceGUID})
	fake.listSpaceAuditorsMutex.Unlock()
	if fake.ListSpaceAuditorsStub != nil {
		return fake.ListSpaceAuditorsStub(spaceGUID)
	} else {
		return fake.listSpaceAuditorsReturns.result1, fake.listSpaceAuditorsReturns.result2
	}
}

func (fake *FakeManager) ListSpaceAuditorsCallCount() int {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return len(fake.listSpaceAuditorsArgsForCall)
}

func (fake *FakeManager) ListSpaceAuditorsArgsForCall(i int) string {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return fake.listSpaceAuditorsArgsForCall[i].spaceGUID
}

func (fake *FakeManager) ListSpaceAuditorsReturns(result1 map[string]string, result2 error) {
	fake.ListSpaceAuditorsStub = nil
	fake.listSpaceAuditorsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSpaceDevelopers(spaceGUID string) (map[string]string, error) {
	fake.listSpaceDevelopersMutex.Lock()
	fake.listSpaceDevelopersArgsForCall = append(fake.listSpaceDevelopersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceDevelopers", []interface{}{spaceGUID})
	fake.listSpaceDevelopersMutex.Unlock()
	if fake.ListSpaceDevelopersStub != nil {
		return fake.ListSpaceDevelopersStub(spaceGUID)
	} else {
		return fake.listSpaceDevelopersReturns.result1, fake.listSpaceDevelopersReturns.result2
	}
}

func (fake *FakeManager) ListSpaceDevelopersCallCount() int {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return len(fake.listSpaceDevelopersArgsForCall)
}

func (fake *FakeManager) ListSpaceDevelopersArgsForCall(i int) string {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return fake.listSpaceDevelopersArgsForCall[i].spaceGUID
}

func (fake *FakeManager) ListSpaceDevelopersReturns(result1 map[string]string, result2 error) {
	fake.ListSpaceDevelopersStub = nil
	fake.listSpaceDevelopersReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSpaceManagers(spaceGUID string) (map[string]string, error) {
	fake.listSpaceManagersMutex.Lock()
	fake.listSpaceManagersArgsForCall = append(fake.listSpaceManagersArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceManagers", []interface{}{spaceGUID})
	fake.listSpaceManagersMutex.Unlock()
	if fake.ListSpaceManagersStub != nil {
		return fake.ListSpaceManagersStub(spaceGUID)
	} else {
		return fake.listSpaceManagersReturns.result1, fake.listSpaceManagersReturns.result2
	}
}

func (fake *FakeManager) ListSpaceManagersCallCount() int {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return len(fake.listSpaceManagersArgsForCall)
}

func (fake *FakeManager) ListSpaceManagersArgsForCall(i int) string {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return fake.listSpaceManagersArgsForCall[i].spaceGUID
}

func (fake *FakeManager) ListSpaceManagersReturns(result1 map[string]string, result2 error) {
	fake.ListSpaceManagersStub = nil
	fake.listSpaceManagersReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgAuditors(orgGUID string) (map[string]string, error) {
	fake.listOrgAuditorsMutex.Lock()
	fake.listOrgAuditorsArgsForCall = append(fake.listOrgAuditorsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgAuditors", []interface{}{orgGUID})
	fake.listOrgAuditorsMutex.Unlock()
	if fake.ListOrgAuditorsStub != nil {
		return fake.ListOrgAuditorsStub(orgGUID)
	} else {
		return fake.listOrgAuditorsReturns.result1, fake.listOrgAuditorsReturns.result2
	}
}

func (fake *FakeManager) ListOrgAuditorsCallCount() int {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return len(fake.listOrgAuditorsArgsForCall)
}

func (fake *FakeManager) ListOrgAuditorsArgsForCall(i int) string {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return fake.listOrgAuditorsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgAuditorsReturns(result1 map[string]string, result2 error) {
	fake.ListOrgAuditorsStub = nil
	fake.listOrgAuditorsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgBillingManagers(orgGUID string) (map[string]string, error) {
	fake.listOrgBillingManagersMutex.Lock()
	fake.listOrgBillingManagersArgsForCall = append(fake.listOrgBillingManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgBillingManagers", []interface{}{orgGUID})
	fake.listOrgBillingManagersMutex.Unlock()
	if fake.ListOrgBillingManagersStub != nil {
		return fake.ListOrgBillingManagersStub(orgGUID)
	} else {
		return fake.listOrgBillingManagersReturns.result1, fake.listOrgBillingManagersReturns.result2
	}
}

func (fake *FakeManager) ListOrgBillingManagersCallCount() int {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return len(fake.listOrgBillingManagersArgsForCall)
}

func (fake *FakeManager) ListOrgBillingManagersArgsForCall(i int) string {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return fake.listOrgBillingManagersArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgBillingManagersReturns(result1 map[string]string, result2 error) {
	fake.ListOrgBillingManagersStub = nil
	fake.listOrgBillingManagersReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgManagers(orgGUID string) (map[string]string, error) {
	fake.listOrgManagersMutex.Lock()
	fake.listOrgManagersArgsForCall = append(fake.listOrgManagersArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgManagers", []interface{}{orgGUID})
	fake.listOrgManagersMutex.Unlock()
	if fake.ListOrgManagersStub != nil {
		return fake.ListOrgManagersStub(orgGUID)
	} else {
		return fake.listOrgManagersReturns.result1, fake.listOrgManagersReturns.result2
	}
}

func (fake *FakeManager) ListOrgManagersCallCount() int {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return len(fake.listOrgManagersArgsForCall)
}

func (fake *FakeManager) ListOrgManagersArgsForCall(i int) string {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return fake.listOrgManagersArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgManagersReturns(result1 map[string]string, result2 error) {
	fake.ListOrgManagersStub = nil
	fake.listOrgManagersReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initializeLdapMutex.RLock()
	defer fake.initializeLdapMutex.RUnlock()
	fake.updateSpaceUsersMutex.RLock()
	defer fake.updateSpaceUsersMutex.RUnlock()
	fake.updateOrgUsersMutex.RLock()
	defer fake.updateOrgUsersMutex.RUnlock()
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.Manager = new(FakeManager)
