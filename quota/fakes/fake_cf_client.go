// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/quota"
)

type FakeCFClient struct {
	ListOrgSpaceQuotasStub        func(orgGUID string) ([]go_cfclient.SpaceQuota, error)
	listOrgSpaceQuotasMutex       sync.RWMutex
	listOrgSpaceQuotasArgsForCall []struct {
		orgGUID string
	}
	listOrgSpaceQuotasReturns struct {
		result1 []go_cfclient.SpaceQuota
		result2 error
	}
	UpdateSpaceQuotaStub        func(spaceQuotaGUID string, spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error)
	updateSpaceQuotaMutex       sync.RWMutex
	updateSpaceQuotaArgsForCall []struct {
		spaceQuotaGUID string
		spaceQuote     go_cfclient.SpaceQuotaRequest
	}
	updateSpaceQuotaReturns struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}
	AssignSpaceQuotaStub        func(quotaGUID, spaceGUID string) error
	assignSpaceQuotaMutex       sync.RWMutex
	assignSpaceQuotaArgsForCall []struct {
		quotaGUID string
		spaceGUID string
	}
	assignSpaceQuotaReturns struct {
		result1 error
	}
	CreateSpaceQuotaStub        func(spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error)
	createSpaceQuotaMutex       sync.RWMutex
	createSpaceQuotaArgsForCall []struct {
		spaceQuote go_cfclient.SpaceQuotaRequest
	}
	createSpaceQuotaReturns struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}
	GetSpaceQuotaByNameStub        func(name string) (go_cfclient.SpaceQuota, error)
	getSpaceQuotaByNameMutex       sync.RWMutex
	getSpaceQuotaByNameArgsForCall []struct {
		name string
	}
	getSpaceQuotaByNameReturns struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}
	ListOrgQuotasStub        func() ([]go_cfclient.OrgQuota, error)
	listOrgQuotasMutex       sync.RWMutex
	listOrgQuotasArgsForCall []struct{}
	listOrgQuotasReturns     struct {
		result1 []go_cfclient.OrgQuota
		result2 error
	}
	CreateOrgQuotaStub        func(orgQuote go_cfclient.OrgQuotaRequest) (*go_cfclient.OrgQuota, error)
	createOrgQuotaMutex       sync.RWMutex
	createOrgQuotaArgsForCall []struct {
		orgQuote go_cfclient.OrgQuotaRequest
	}
	createOrgQuotaReturns struct {
		result1 *go_cfclient.OrgQuota
		result2 error
	}
	UpdateOrgQuotaStub        func(orgQuotaGUID string, orgQuota go_cfclient.OrgQuotaRequest) (*go_cfclient.OrgQuota, error)
	updateOrgQuotaMutex       sync.RWMutex
	updateOrgQuotaArgsForCall []struct {
		orgQuotaGUID string
		orgQuota     go_cfclient.OrgQuotaRequest
	}
	updateOrgQuotaReturns struct {
		result1 *go_cfclient.OrgQuota
		result2 error
	}
	GetOrgQuotaByNameStub        func(name string) (go_cfclient.OrgQuota, error)
	getOrgQuotaByNameMutex       sync.RWMutex
	getOrgQuotaByNameArgsForCall []struct {
		name string
	}
	getOrgQuotaByNameReturns struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListOrgSpaceQuotas(orgGUID string) ([]go_cfclient.SpaceQuota, error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	fake.listOrgSpaceQuotasArgsForCall = append(fake.listOrgSpaceQuotasArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgSpaceQuotas", []interface{}{orgGUID})
	fake.listOrgSpaceQuotasMutex.Unlock()
	if fake.ListOrgSpaceQuotasStub != nil {
		return fake.ListOrgSpaceQuotasStub(orgGUID)
	} else {
		return fake.listOrgSpaceQuotasReturns.result1, fake.listOrgSpaceQuotasReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgSpaceQuotasCallCount() int {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	return len(fake.listOrgSpaceQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgSpaceQuotasArgsForCall(i int) string {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	return fake.listOrgSpaceQuotasArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgSpaceQuotasReturns(result1 []go_cfclient.SpaceQuota, result2 error) {
	fake.ListOrgSpaceQuotasStub = nil
	fake.listOrgSpaceQuotasReturns = struct {
		result1 []go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceQuota(spaceQuotaGUID string, spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error) {
	fake.updateSpaceQuotaMutex.Lock()
	fake.updateSpaceQuotaArgsForCall = append(fake.updateSpaceQuotaArgsForCall, struct {
		spaceQuotaGUID string
		spaceQuote     go_cfclient.SpaceQuotaRequest
	}{spaceQuotaGUID, spaceQuote})
	fake.recordInvocation("UpdateSpaceQuota", []interface{}{spaceQuotaGUID, spaceQuote})
	fake.updateSpaceQuotaMutex.Unlock()
	if fake.UpdateSpaceQuotaStub != nil {
		return fake.UpdateSpaceQuotaStub(spaceQuotaGUID, spaceQuote)
	} else {
		return fake.updateSpaceQuotaReturns.result1, fake.updateSpaceQuotaReturns.result2
	}
}

func (fake *FakeCFClient) UpdateSpaceQuotaCallCount() int {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return len(fake.updateSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceQuotaArgsForCall(i int) (string, go_cfclient.SpaceQuotaRequest) {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return fake.updateSpaceQuotaArgsForCall[i].spaceQuotaGUID, fake.updateSpaceQuotaArgsForCall[i].spaceQuote
}

func (fake *FakeCFClient) UpdateSpaceQuotaReturns(result1 *go_cfclient.SpaceQuota, result2 error) {
	fake.UpdateSpaceQuotaStub = nil
	fake.updateSpaceQuotaReturns = struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssignSpaceQuota(quotaGUID string, spaceGUID string) error {
	fake.assignSpaceQuotaMutex.Lock()
	fake.assignSpaceQuotaArgsForCall = append(fake.assignSpaceQuotaArgsForCall, struct {
		quotaGUID string
		spaceGUID string
	}{quotaGUID, spaceGUID})
	fake.recordInvocation("AssignSpaceQuota", []interface{}{quotaGUID, spaceGUID})
	fake.assignSpaceQuotaMutex.Unlock()
	if fake.AssignSpaceQuotaStub != nil {
		return fake.AssignSpaceQuotaStub(quotaGUID, spaceGUID)
	} else {
		return fake.assignSpaceQuotaReturns.result1
	}
}

func (fake *FakeCFClient) AssignSpaceQuotaCallCount() int {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	return len(fake.assignSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) AssignSpaceQuotaArgsForCall(i int) (string, string) {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	return fake.assignSpaceQuotaArgsForCall[i].quotaGUID, fake.assignSpaceQuotaArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) AssignSpaceQuotaReturns(result1 error) {
	fake.AssignSpaceQuotaStub = nil
	fake.assignSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateSpaceQuota(spaceQuote go_cfclient.SpaceQuotaRequest) (*go_cfclient.SpaceQuota, error) {
	fake.createSpaceQuotaMutex.Lock()
	fake.createSpaceQuotaArgsForCall = append(fake.createSpaceQuotaArgsForCall, struct {
		spaceQuote go_cfclient.SpaceQuotaRequest
	}{spaceQuote})
	fake.recordInvocation("CreateSpaceQuota", []interface{}{spaceQuote})
	fake.createSpaceQuotaMutex.Unlock()
	if fake.CreateSpaceQuotaStub != nil {
		return fake.CreateSpaceQuotaStub(spaceQuote)
	} else {
		return fake.createSpaceQuotaReturns.result1, fake.createSpaceQuotaReturns.result2
	}
}

func (fake *FakeCFClient) CreateSpaceQuotaCallCount() int {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return len(fake.createSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceQuotaArgsForCall(i int) go_cfclient.SpaceQuotaRequest {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return fake.createSpaceQuotaArgsForCall[i].spaceQuote
}

func (fake *FakeCFClient) CreateSpaceQuotaReturns(result1 *go_cfclient.SpaceQuota, result2 error) {
	fake.CreateSpaceQuotaStub = nil
	fake.createSpaceQuotaReturns = struct {
		result1 *go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceQuotaByName(name string) (go_cfclient.SpaceQuota, error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	fake.getSpaceQuotaByNameArgsForCall = append(fake.getSpaceQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetSpaceQuotaByName", []interface{}{name})
	fake.getSpaceQuotaByNameMutex.Unlock()
	if fake.GetSpaceQuotaByNameStub != nil {
		return fake.GetSpaceQuotaByNameStub(name)
	} else {
		return fake.getSpaceQuotaByNameReturns.result1, fake.getSpaceQuotaByNameReturns.result2
	}
}

func (fake *FakeCFClient) GetSpaceQuotaByNameCallCount() int {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return len(fake.getSpaceQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetSpaceQuotaByNameArgsForCall(i int) string {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return fake.getSpaceQuotaByNameArgsForCall[i].name
}

func (fake *FakeCFClient) GetSpaceQuotaByNameReturns(result1 go_cfclient.SpaceQuota, result2 error) {
	fake.GetSpaceQuotaByNameStub = nil
	fake.getSpaceQuotaByNameReturns = struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotas() ([]go_cfclient.OrgQuota, error) {
	fake.listOrgQuotasMutex.Lock()
	fake.listOrgQuotasArgsForCall = append(fake.listOrgQuotasArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgQuotas", []interface{}{})
	fake.listOrgQuotasMutex.Unlock()
	if fake.ListOrgQuotasStub != nil {
		return fake.ListOrgQuotasStub()
	} else {
		return fake.listOrgQuotasReturns.result1, fake.listOrgQuotasReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgQuotasCallCount() int {
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	return len(fake.listOrgQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgQuotasReturns(result1 []go_cfclient.OrgQuota, result2 error) {
	fake.ListOrgQuotasStub = nil
	fake.listOrgQuotasReturns = struct {
		result1 []go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrgQuota(orgQuote go_cfclient.OrgQuotaRequest) (*go_cfclient.OrgQuota, error) {
	fake.createOrgQuotaMutex.Lock()
	fake.createOrgQuotaArgsForCall = append(fake.createOrgQuotaArgsForCall, struct {
		orgQuote go_cfclient.OrgQuotaRequest
	}{orgQuote})
	fake.recordInvocation("CreateOrgQuota", []interface{}{orgQuote})
	fake.createOrgQuotaMutex.Unlock()
	if fake.CreateOrgQuotaStub != nil {
		return fake.CreateOrgQuotaStub(orgQuote)
	} else {
		return fake.createOrgQuotaReturns.result1, fake.createOrgQuotaReturns.result2
	}
}

func (fake *FakeCFClient) CreateOrgQuotaCallCount() int {
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	return len(fake.createOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateOrgQuotaArgsForCall(i int) go_cfclient.OrgQuotaRequest {
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	return fake.createOrgQuotaArgsForCall[i].orgQuote
}

func (fake *FakeCFClient) CreateOrgQuotaReturns(result1 *go_cfclient.OrgQuota, result2 error) {
	fake.CreateOrgQuotaStub = nil
	fake.createOrgQuotaReturns = struct {
		result1 *go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgQuota(orgQuotaGUID string, orgQuota go_cfclient.OrgQuotaRequest) (*go_cfclient.OrgQuota, error) {
	fake.updateOrgQuotaMutex.Lock()
	fake.updateOrgQuotaArgsForCall = append(fake.updateOrgQuotaArgsForCall, struct {
		orgQuotaGUID string
		orgQuota     go_cfclient.OrgQuotaRequest
	}{orgQuotaGUID, orgQuota})
	fake.recordInvocation("UpdateOrgQuota", []interface{}{orgQuotaGUID, orgQuota})
	fake.updateOrgQuotaMutex.Unlock()
	if fake.UpdateOrgQuotaStub != nil {
		return fake.UpdateOrgQuotaStub(orgQuotaGUID, orgQuota)
	} else {
		return fake.updateOrgQuotaReturns.result1, fake.updateOrgQuotaReturns.result2
	}
}

func (fake *FakeCFClient) UpdateOrgQuotaCallCount() int {
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	return len(fake.updateOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgQuotaArgsForCall(i int) (string, go_cfclient.OrgQuotaRequest) {
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	return fake.updateOrgQuotaArgsForCall[i].orgQuotaGUID, fake.updateOrgQuotaArgsForCall[i].orgQuota
}

func (fake *FakeCFClient) UpdateOrgQuotaReturns(result1 *go_cfclient.OrgQuota, result2 error) {
	fake.UpdateOrgQuotaStub = nil
	fake.updateOrgQuotaReturns = struct {
		result1 *go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgQuotaByName(name string) (go_cfclient.OrgQuota, error) {
	fake.getOrgQuotaByNameMutex.Lock()
	fake.getOrgQuotaByNameArgsForCall = append(fake.getOrgQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetOrgQuotaByName", []interface{}{name})
	fake.getOrgQuotaByNameMutex.Unlock()
	if fake.GetOrgQuotaByNameStub != nil {
		return fake.GetOrgQuotaByNameStub(name)
	} else {
		return fake.getOrgQuotaByNameReturns.result1, fake.getOrgQuotaByNameReturns.result2
	}
}

func (fake *FakeCFClient) GetOrgQuotaByNameCallCount() int {
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	return len(fake.getOrgQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetOrgQuotaByNameArgsForCall(i int) string {
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	return fake.getOrgQuotaByNameArgsForCall[i].name
}

func (fake *FakeCFClient) GetOrgQuotaByNameReturns(result1 go_cfclient.OrgQuota, result2 error) {
	fake.GetOrgQuotaByNameStub = nil
	fake.getOrgQuotaByNameReturns = struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ quota.CFClient = new(FakeCFClient)
