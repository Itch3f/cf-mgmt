// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/quota"
)

type FakeManager struct {
	CreateSpaceQuotasStub        func() error
	createSpaceQuotasMutex       sync.RWMutex
	createSpaceQuotasArgsForCall []struct{}
	createSpaceQuotasReturns     struct {
		result1 error
	}
	SpaceQuotaByNameStub        func(name string) (go_cfclient.SpaceQuota, error)
	spaceQuotaByNameMutex       sync.RWMutex
	spaceQuotaByNameArgsForCall []struct {
		name string
	}
	spaceQuotaByNameReturns struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}
	CreateOrgQuotasStub        func() error
	createOrgQuotasMutex       sync.RWMutex
	createOrgQuotasArgsForCall []struct{}
	createOrgQuotasReturns     struct {
		result1 error
	}
	OrgQuotaByNameStub        func(name string) (go_cfclient.OrgQuota, error)
	orgQuotaByNameMutex       sync.RWMutex
	orgQuotaByNameArgsForCall []struct {
		name string
	}
	orgQuotaByNameReturns struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) CreateSpaceQuotas() error {
	fake.createSpaceQuotasMutex.Lock()
	fake.createSpaceQuotasArgsForCall = append(fake.createSpaceQuotasArgsForCall, struct{}{})
	fake.recordInvocation("CreateSpaceQuotas", []interface{}{})
	fake.createSpaceQuotasMutex.Unlock()
	if fake.CreateSpaceQuotasStub != nil {
		return fake.CreateSpaceQuotasStub()
	} else {
		return fake.createSpaceQuotasReturns.result1
	}
}

func (fake *FakeManager) CreateSpaceQuotasCallCount() int {
	fake.createSpaceQuotasMutex.RLock()
	defer fake.createSpaceQuotasMutex.RUnlock()
	return len(fake.createSpaceQuotasArgsForCall)
}

func (fake *FakeManager) CreateSpaceQuotasReturns(result1 error) {
	fake.CreateSpaceQuotasStub = nil
	fake.createSpaceQuotasReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SpaceQuotaByName(name string) (go_cfclient.SpaceQuota, error) {
	fake.spaceQuotaByNameMutex.Lock()
	fake.spaceQuotaByNameArgsForCall = append(fake.spaceQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("SpaceQuotaByName", []interface{}{name})
	fake.spaceQuotaByNameMutex.Unlock()
	if fake.SpaceQuotaByNameStub != nil {
		return fake.SpaceQuotaByNameStub(name)
	} else {
		return fake.spaceQuotaByNameReturns.result1, fake.spaceQuotaByNameReturns.result2
	}
}

func (fake *FakeManager) SpaceQuotaByNameCallCount() int {
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return len(fake.spaceQuotaByNameArgsForCall)
}

func (fake *FakeManager) SpaceQuotaByNameArgsForCall(i int) string {
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return fake.spaceQuotaByNameArgsForCall[i].name
}

func (fake *FakeManager) SpaceQuotaByNameReturns(result1 go_cfclient.SpaceQuota, result2 error) {
	fake.SpaceQuotaByNameStub = nil
	fake.spaceQuotaByNameReturns = struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateOrgQuotas() error {
	fake.createOrgQuotasMutex.Lock()
	fake.createOrgQuotasArgsForCall = append(fake.createOrgQuotasArgsForCall, struct{}{})
	fake.recordInvocation("CreateOrgQuotas", []interface{}{})
	fake.createOrgQuotasMutex.Unlock()
	if fake.CreateOrgQuotasStub != nil {
		return fake.CreateOrgQuotasStub()
	} else {
		return fake.createOrgQuotasReturns.result1
	}
}

func (fake *FakeManager) CreateOrgQuotasCallCount() int {
	fake.createOrgQuotasMutex.RLock()
	defer fake.createOrgQuotasMutex.RUnlock()
	return len(fake.createOrgQuotasArgsForCall)
}

func (fake *FakeManager) CreateOrgQuotasReturns(result1 error) {
	fake.CreateOrgQuotasStub = nil
	fake.createOrgQuotasReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) OrgQuotaByName(name string) (go_cfclient.OrgQuota, error) {
	fake.orgQuotaByNameMutex.Lock()
	fake.orgQuotaByNameArgsForCall = append(fake.orgQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("OrgQuotaByName", []interface{}{name})
	fake.orgQuotaByNameMutex.Unlock()
	if fake.OrgQuotaByNameStub != nil {
		return fake.OrgQuotaByNameStub(name)
	} else {
		return fake.orgQuotaByNameReturns.result1, fake.orgQuotaByNameReturns.result2
	}
}

func (fake *FakeManager) OrgQuotaByNameCallCount() int {
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return len(fake.orgQuotaByNameArgsForCall)
}

func (fake *FakeManager) OrgQuotaByNameArgsForCall(i int) string {
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return fake.orgQuotaByNameArgsForCall[i].name
}

func (fake *FakeManager) OrgQuotaByNameReturns(result1 go_cfclient.OrgQuota, result2 error) {
	fake.OrgQuotaByNameStub = nil
	fake.orgQuotaByNameReturns = struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSpaceQuotasMutex.RLock()
	defer fake.createSpaceQuotasMutex.RUnlock()
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	fake.createOrgQuotasMutex.RLock()
	defer fake.createOrgQuotasMutex.RUnlock()
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ quota.Manager = new(FakeManager)
