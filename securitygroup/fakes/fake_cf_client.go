// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/securitygroup"
)

type FakeCFClient struct {
	ListSecGroupsStub        func() ([]go_cfclient.SecGroup, error)
	listSecGroupsMutex       sync.RWMutex
	listSecGroupsArgsForCall []struct{}
	listSecGroupsReturns     struct {
		result1 []go_cfclient.SecGroup
		result2 error
	}
	CreateSecGroupStub        func(name string, rules []go_cfclient.SecGroupRule, spaceGuids []string) (*go_cfclient.SecGroup, error)
	createSecGroupMutex       sync.RWMutex
	createSecGroupArgsForCall []struct {
		name       string
		rules      []go_cfclient.SecGroupRule
		spaceGuids []string
	}
	createSecGroupReturns struct {
		result1 *go_cfclient.SecGroup
		result2 error
	}
	UpdateSecGroupStub        func(guid, name string, rules []go_cfclient.SecGroupRule, spaceGuids []string) (*go_cfclient.SecGroup, error)
	updateSecGroupMutex       sync.RWMutex
	updateSecGroupArgsForCall []struct {
		guid       string
		name       string
		rules      []go_cfclient.SecGroupRule
		spaceGuids []string
	}
	updateSecGroupReturns struct {
		result1 *go_cfclient.SecGroup
		result2 error
	}
	BindSecGroupStub        func(secGUID, spaceGUID string) error
	bindSecGroupMutex       sync.RWMutex
	bindSecGroupArgsForCall []struct {
		secGUID   string
		spaceGUID string
	}
	bindSecGroupReturns struct {
		result1 error
	}
	BindRunningSecGroupStub        func(secGUID string) error
	bindRunningSecGroupMutex       sync.RWMutex
	bindRunningSecGroupArgsForCall []struct {
		secGUID string
	}
	bindRunningSecGroupReturns struct {
		result1 error
	}
	BindStagingSecGroupStub        func(secGUID string) error
	bindStagingSecGroupMutex       sync.RWMutex
	bindStagingSecGroupArgsForCall []struct {
		secGUID string
	}
	bindStagingSecGroupReturns struct {
		result1 error
	}
	UnbindRunningSecGroupStub        func(secGUID string) error
	unbindRunningSecGroupMutex       sync.RWMutex
	unbindRunningSecGroupArgsForCall []struct {
		secGUID string
	}
	unbindRunningSecGroupReturns struct {
		result1 error
	}
	UnbindStagingSecGroupStub        func(secGUID string) error
	unbindStagingSecGroupMutex       sync.RWMutex
	unbindStagingSecGroupArgsForCall []struct {
		secGUID string
	}
	unbindStagingSecGroupReturns struct {
		result1 error
	}
	GetSecGroupStub        func(guid string) (*go_cfclient.SecGroup, error)
	getSecGroupMutex       sync.RWMutex
	getSecGroupArgsForCall []struct {
		guid string
	}
	getSecGroupReturns struct {
		result1 *go_cfclient.SecGroup
		result2 error
	}
	ListSpaceSecGroupsStub        func(spaceGUID string) ([]go_cfclient.SecGroup, error)
	listSpaceSecGroupsMutex       sync.RWMutex
	listSpaceSecGroupsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceSecGroupsReturns struct {
		result1 []go_cfclient.SecGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListSecGroups() ([]go_cfclient.SecGroup, error) {
	fake.listSecGroupsMutex.Lock()
	fake.listSecGroupsArgsForCall = append(fake.listSecGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListSecGroups", []interface{}{})
	fake.listSecGroupsMutex.Unlock()
	if fake.ListSecGroupsStub != nil {
		return fake.ListSecGroupsStub()
	} else {
		return fake.listSecGroupsReturns.result1, fake.listSecGroupsReturns.result2
	}
}

func (fake *FakeCFClient) ListSecGroupsCallCount() int {
	fake.listSecGroupsMutex.RLock()
	defer fake.listSecGroupsMutex.RUnlock()
	return len(fake.listSecGroupsArgsForCall)
}

func (fake *FakeCFClient) ListSecGroupsReturns(result1 []go_cfclient.SecGroup, result2 error) {
	fake.ListSecGroupsStub = nil
	fake.listSecGroupsReturns = struct {
		result1 []go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSecGroup(name string, rules []go_cfclient.SecGroupRule, spaceGuids []string) (*go_cfclient.SecGroup, error) {
	var rulesCopy []go_cfclient.SecGroupRule
	if rules != nil {
		rulesCopy = make([]go_cfclient.SecGroupRule, len(rules))
		copy(rulesCopy, rules)
	}
	var spaceGuidsCopy []string
	if spaceGuids != nil {
		spaceGuidsCopy = make([]string, len(spaceGuids))
		copy(spaceGuidsCopy, spaceGuids)
	}
	fake.createSecGroupMutex.Lock()
	fake.createSecGroupArgsForCall = append(fake.createSecGroupArgsForCall, struct {
		name       string
		rules      []go_cfclient.SecGroupRule
		spaceGuids []string
	}{name, rulesCopy, spaceGuidsCopy})
	fake.recordInvocation("CreateSecGroup", []interface{}{name, rulesCopy, spaceGuidsCopy})
	fake.createSecGroupMutex.Unlock()
	if fake.CreateSecGroupStub != nil {
		return fake.CreateSecGroupStub(name, rules, spaceGuids)
	} else {
		return fake.createSecGroupReturns.result1, fake.createSecGroupReturns.result2
	}
}

func (fake *FakeCFClient) CreateSecGroupCallCount() int {
	fake.createSecGroupMutex.RLock()
	defer fake.createSecGroupMutex.RUnlock()
	return len(fake.createSecGroupArgsForCall)
}

func (fake *FakeCFClient) CreateSecGroupArgsForCall(i int) (string, []go_cfclient.SecGroupRule, []string) {
	fake.createSecGroupMutex.RLock()
	defer fake.createSecGroupMutex.RUnlock()
	return fake.createSecGroupArgsForCall[i].name, fake.createSecGroupArgsForCall[i].rules, fake.createSecGroupArgsForCall[i].spaceGuids
}

func (fake *FakeCFClient) CreateSecGroupReturns(result1 *go_cfclient.SecGroup, result2 error) {
	fake.CreateSecGroupStub = nil
	fake.createSecGroupReturns = struct {
		result1 *go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSecGroup(guid string, name string, rules []go_cfclient.SecGroupRule, spaceGuids []string) (*go_cfclient.SecGroup, error) {
	var rulesCopy []go_cfclient.SecGroupRule
	if rules != nil {
		rulesCopy = make([]go_cfclient.SecGroupRule, len(rules))
		copy(rulesCopy, rules)
	}
	var spaceGuidsCopy []string
	if spaceGuids != nil {
		spaceGuidsCopy = make([]string, len(spaceGuids))
		copy(spaceGuidsCopy, spaceGuids)
	}
	fake.updateSecGroupMutex.Lock()
	fake.updateSecGroupArgsForCall = append(fake.updateSecGroupArgsForCall, struct {
		guid       string
		name       string
		rules      []go_cfclient.SecGroupRule
		spaceGuids []string
	}{guid, name, rulesCopy, spaceGuidsCopy})
	fake.recordInvocation("UpdateSecGroup", []interface{}{guid, name, rulesCopy, spaceGuidsCopy})
	fake.updateSecGroupMutex.Unlock()
	if fake.UpdateSecGroupStub != nil {
		return fake.UpdateSecGroupStub(guid, name, rules, spaceGuids)
	} else {
		return fake.updateSecGroupReturns.result1, fake.updateSecGroupReturns.result2
	}
}

func (fake *FakeCFClient) UpdateSecGroupCallCount() int {
	fake.updateSecGroupMutex.RLock()
	defer fake.updateSecGroupMutex.RUnlock()
	return len(fake.updateSecGroupArgsForCall)
}

func (fake *FakeCFClient) UpdateSecGroupArgsForCall(i int) (string, string, []go_cfclient.SecGroupRule, []string) {
	fake.updateSecGroupMutex.RLock()
	defer fake.updateSecGroupMutex.RUnlock()
	return fake.updateSecGroupArgsForCall[i].guid, fake.updateSecGroupArgsForCall[i].name, fake.updateSecGroupArgsForCall[i].rules, fake.updateSecGroupArgsForCall[i].spaceGuids
}

func (fake *FakeCFClient) UpdateSecGroupReturns(result1 *go_cfclient.SecGroup, result2 error) {
	fake.UpdateSecGroupStub = nil
	fake.updateSecGroupReturns = struct {
		result1 *go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) BindSecGroup(secGUID string, spaceGUID string) error {
	fake.bindSecGroupMutex.Lock()
	fake.bindSecGroupArgsForCall = append(fake.bindSecGroupArgsForCall, struct {
		secGUID   string
		spaceGUID string
	}{secGUID, spaceGUID})
	fake.recordInvocation("BindSecGroup", []interface{}{secGUID, spaceGUID})
	fake.bindSecGroupMutex.Unlock()
	if fake.BindSecGroupStub != nil {
		return fake.BindSecGroupStub(secGUID, spaceGUID)
	} else {
		return fake.bindSecGroupReturns.result1
	}
}

func (fake *FakeCFClient) BindSecGroupCallCount() int {
	fake.bindSecGroupMutex.RLock()
	defer fake.bindSecGroupMutex.RUnlock()
	return len(fake.bindSecGroupArgsForCall)
}

func (fake *FakeCFClient) BindSecGroupArgsForCall(i int) (string, string) {
	fake.bindSecGroupMutex.RLock()
	defer fake.bindSecGroupMutex.RUnlock()
	return fake.bindSecGroupArgsForCall[i].secGUID, fake.bindSecGroupArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) BindSecGroupReturns(result1 error) {
	fake.BindSecGroupStub = nil
	fake.bindSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindRunningSecGroup(secGUID string) error {
	fake.bindRunningSecGroupMutex.Lock()
	fake.bindRunningSecGroupArgsForCall = append(fake.bindRunningSecGroupArgsForCall, struct {
		secGUID string
	}{secGUID})
	fake.recordInvocation("BindRunningSecGroup", []interface{}{secGUID})
	fake.bindRunningSecGroupMutex.Unlock()
	if fake.BindRunningSecGroupStub != nil {
		return fake.BindRunningSecGroupStub(secGUID)
	} else {
		return fake.bindRunningSecGroupReturns.result1
	}
}

func (fake *FakeCFClient) BindRunningSecGroupCallCount() int {
	fake.bindRunningSecGroupMutex.RLock()
	defer fake.bindRunningSecGroupMutex.RUnlock()
	return len(fake.bindRunningSecGroupArgsForCall)
}

func (fake *FakeCFClient) BindRunningSecGroupArgsForCall(i int) string {
	fake.bindRunningSecGroupMutex.RLock()
	defer fake.bindRunningSecGroupMutex.RUnlock()
	return fake.bindRunningSecGroupArgsForCall[i].secGUID
}

func (fake *FakeCFClient) BindRunningSecGroupReturns(result1 error) {
	fake.BindRunningSecGroupStub = nil
	fake.bindRunningSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindStagingSecGroup(secGUID string) error {
	fake.bindStagingSecGroupMutex.Lock()
	fake.bindStagingSecGroupArgsForCall = append(fake.bindStagingSecGroupArgsForCall, struct {
		secGUID string
	}{secGUID})
	fake.recordInvocation("BindStagingSecGroup", []interface{}{secGUID})
	fake.bindStagingSecGroupMutex.Unlock()
	if fake.BindStagingSecGroupStub != nil {
		return fake.BindStagingSecGroupStub(secGUID)
	} else {
		return fake.bindStagingSecGroupReturns.result1
	}
}

func (fake *FakeCFClient) BindStagingSecGroupCallCount() int {
	fake.bindStagingSecGroupMutex.RLock()
	defer fake.bindStagingSecGroupMutex.RUnlock()
	return len(fake.bindStagingSecGroupArgsForCall)
}

func (fake *FakeCFClient) BindStagingSecGroupArgsForCall(i int) string {
	fake.bindStagingSecGroupMutex.RLock()
	defer fake.bindStagingSecGroupMutex.RUnlock()
	return fake.bindStagingSecGroupArgsForCall[i].secGUID
}

func (fake *FakeCFClient) BindStagingSecGroupReturns(result1 error) {
	fake.BindStagingSecGroupStub = nil
	fake.bindStagingSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindRunningSecGroup(secGUID string) error {
	fake.unbindRunningSecGroupMutex.Lock()
	fake.unbindRunningSecGroupArgsForCall = append(fake.unbindRunningSecGroupArgsForCall, struct {
		secGUID string
	}{secGUID})
	fake.recordInvocation("UnbindRunningSecGroup", []interface{}{secGUID})
	fake.unbindRunningSecGroupMutex.Unlock()
	if fake.UnbindRunningSecGroupStub != nil {
		return fake.UnbindRunningSecGroupStub(secGUID)
	} else {
		return fake.unbindRunningSecGroupReturns.result1
	}
}

func (fake *FakeCFClient) UnbindRunningSecGroupCallCount() int {
	fake.unbindRunningSecGroupMutex.RLock()
	defer fake.unbindRunningSecGroupMutex.RUnlock()
	return len(fake.unbindRunningSecGroupArgsForCall)
}

func (fake *FakeCFClient) UnbindRunningSecGroupArgsForCall(i int) string {
	fake.unbindRunningSecGroupMutex.RLock()
	defer fake.unbindRunningSecGroupMutex.RUnlock()
	return fake.unbindRunningSecGroupArgsForCall[i].secGUID
}

func (fake *FakeCFClient) UnbindRunningSecGroupReturns(result1 error) {
	fake.UnbindRunningSecGroupStub = nil
	fake.unbindRunningSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindStagingSecGroup(secGUID string) error {
	fake.unbindStagingSecGroupMutex.Lock()
	fake.unbindStagingSecGroupArgsForCall = append(fake.unbindStagingSecGroupArgsForCall, struct {
		secGUID string
	}{secGUID})
	fake.recordInvocation("UnbindStagingSecGroup", []interface{}{secGUID})
	fake.unbindStagingSecGroupMutex.Unlock()
	if fake.UnbindStagingSecGroupStub != nil {
		return fake.UnbindStagingSecGroupStub(secGUID)
	} else {
		return fake.unbindStagingSecGroupReturns.result1
	}
}

func (fake *FakeCFClient) UnbindStagingSecGroupCallCount() int {
	fake.unbindStagingSecGroupMutex.RLock()
	defer fake.unbindStagingSecGroupMutex.RUnlock()
	return len(fake.unbindStagingSecGroupArgsForCall)
}

func (fake *FakeCFClient) UnbindStagingSecGroupArgsForCall(i int) string {
	fake.unbindStagingSecGroupMutex.RLock()
	defer fake.unbindStagingSecGroupMutex.RUnlock()
	return fake.unbindStagingSecGroupArgsForCall[i].secGUID
}

func (fake *FakeCFClient) UnbindStagingSecGroupReturns(result1 error) {
	fake.UnbindStagingSecGroupStub = nil
	fake.unbindStagingSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) GetSecGroup(guid string) (*go_cfclient.SecGroup, error) {
	fake.getSecGroupMutex.Lock()
	fake.getSecGroupArgsForCall = append(fake.getSecGroupArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetSecGroup", []interface{}{guid})
	fake.getSecGroupMutex.Unlock()
	if fake.GetSecGroupStub != nil {
		return fake.GetSecGroupStub(guid)
	} else {
		return fake.getSecGroupReturns.result1, fake.getSecGroupReturns.result2
	}
}

func (fake *FakeCFClient) GetSecGroupCallCount() int {
	fake.getSecGroupMutex.RLock()
	defer fake.getSecGroupMutex.RUnlock()
	return len(fake.getSecGroupArgsForCall)
}

func (fake *FakeCFClient) GetSecGroupArgsForCall(i int) string {
	fake.getSecGroupMutex.RLock()
	defer fake.getSecGroupMutex.RUnlock()
	return fake.getSecGroupArgsForCall[i].guid
}

func (fake *FakeCFClient) GetSecGroupReturns(result1 *go_cfclient.SecGroup, result2 error) {
	fake.GetSecGroupStub = nil
	fake.getSecGroupReturns = struct {
		result1 *go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceSecGroups(spaceGUID string) ([]go_cfclient.SecGroup, error) {
	fake.listSpaceSecGroupsMutex.Lock()
	fake.listSpaceSecGroupsArgsForCall = append(fake.listSpaceSecGroupsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceSecGroups", []interface{}{spaceGUID})
	fake.listSpaceSecGroupsMutex.Unlock()
	if fake.ListSpaceSecGroupsStub != nil {
		return fake.ListSpaceSecGroupsStub(spaceGUID)
	} else {
		return fake.listSpaceSecGroupsReturns.result1, fake.listSpaceSecGroupsReturns.result2
	}
}

func (fake *FakeCFClient) ListSpaceSecGroupsCallCount() int {
	fake.listSpaceSecGroupsMutex.RLock()
	defer fake.listSpaceSecGroupsMutex.RUnlock()
	return len(fake.listSpaceSecGroupsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceSecGroupsArgsForCall(i int) string {
	fake.listSpaceSecGroupsMutex.RLock()
	defer fake.listSpaceSecGroupsMutex.RUnlock()
	return fake.listSpaceSecGroupsArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ListSpaceSecGroupsReturns(result1 []go_cfclient.SecGroup, result2 error) {
	fake.ListSpaceSecGroupsStub = nil
	fake.listSpaceSecGroupsReturns = struct {
		result1 []go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listSecGroupsMutex.RLock()
	defer fake.listSecGroupsMutex.RUnlock()
	fake.createSecGroupMutex.RLock()
	defer fake.createSecGroupMutex.RUnlock()
	fake.updateSecGroupMutex.RLock()
	defer fake.updateSecGroupMutex.RUnlock()
	fake.bindSecGroupMutex.RLock()
	defer fake.bindSecGroupMutex.RUnlock()
	fake.bindRunningSecGroupMutex.RLock()
	defer fake.bindRunningSecGroupMutex.RUnlock()
	fake.bindStagingSecGroupMutex.RLock()
	defer fake.bindStagingSecGroupMutex.RUnlock()
	fake.unbindRunningSecGroupMutex.RLock()
	defer fake.unbindRunningSecGroupMutex.RUnlock()
	fake.unbindStagingSecGroupMutex.RLock()
	defer fake.unbindStagingSecGroupMutex.RUnlock()
	fake.getSecGroupMutex.RLock()
	defer fake.getSecGroupMutex.RUnlock()
	fake.listSpaceSecGroupsMutex.RLock()
	defer fake.listSpaceSecGroupsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ securitygroup.CFClient = new(FakeCFClient)
