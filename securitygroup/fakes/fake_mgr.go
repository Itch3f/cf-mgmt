// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/securitygroup"
)

type FakeManager struct {
	ListNonDefaultSecurityGroupsStub        func() (map[string]go_cfclient.SecGroup, error)
	listNonDefaultSecurityGroupsMutex       sync.RWMutex
	listNonDefaultSecurityGroupsArgsForCall []struct{}
	listNonDefaultSecurityGroupsReturns     struct {
		result1 map[string]go_cfclient.SecGroup
		result2 error
	}
	ListDefaultSecurityGroupsStub        func() (map[string]go_cfclient.SecGroup, error)
	listDefaultSecurityGroupsMutex       sync.RWMutex
	listDefaultSecurityGroupsArgsForCall []struct{}
	listDefaultSecurityGroupsReturns     struct {
		result1 map[string]go_cfclient.SecGroup
		result2 error
	}
	ListSpaceSecurityGroupsStub        func(spaceGUID string) (map[string]string, error)
	listSpaceSecurityGroupsMutex       sync.RWMutex
	listSpaceSecurityGroupsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceSecurityGroupsReturns struct {
		result1 map[string]string
		result2 error
	}
	GetSecurityGroupRulesStub        func(sgGUID string) ([]byte, error)
	getSecurityGroupRulesMutex       sync.RWMutex
	getSecurityGroupRulesArgsForCall []struct {
		sgGUID string
	}
	getSecurityGroupRulesReturns struct {
		result1 []byte
		result2 error
	}
	CreateApplicationSecurityGroupsStub        func() error
	createApplicationSecurityGroupsMutex       sync.RWMutex
	createApplicationSecurityGroupsArgsForCall []struct{}
	createApplicationSecurityGroupsReturns     struct {
		result1 error
	}
	CreateGlobalSecurityGroupsStub        func() error
	createGlobalSecurityGroupsMutex       sync.RWMutex
	createGlobalSecurityGroupsArgsForCall []struct{}
	createGlobalSecurityGroupsReturns     struct {
		result1 error
	}
	AssignDefaultSecurityGroupsStub        func() error
	assignDefaultSecurityGroupsMutex       sync.RWMutex
	assignDefaultSecurityGroupsArgsForCall []struct{}
	assignDefaultSecurityGroupsReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) ListNonDefaultSecurityGroups() (map[string]go_cfclient.SecGroup, error) {
	fake.listNonDefaultSecurityGroupsMutex.Lock()
	fake.listNonDefaultSecurityGroupsArgsForCall = append(fake.listNonDefaultSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListNonDefaultSecurityGroups", []interface{}{})
	fake.listNonDefaultSecurityGroupsMutex.Unlock()
	if fake.ListNonDefaultSecurityGroupsStub != nil {
		return fake.ListNonDefaultSecurityGroupsStub()
	} else {
		return fake.listNonDefaultSecurityGroupsReturns.result1, fake.listNonDefaultSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsCallCount() int {
	fake.listNonDefaultSecurityGroupsMutex.RLock()
	defer fake.listNonDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.listNonDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsReturns(result1 map[string]go_cfclient.SecGroup, result2 error) {
	fake.ListNonDefaultSecurityGroupsStub = nil
	fake.listNonDefaultSecurityGroupsReturns = struct {
		result1 map[string]go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListDefaultSecurityGroups() (map[string]go_cfclient.SecGroup, error) {
	fake.listDefaultSecurityGroupsMutex.Lock()
	fake.listDefaultSecurityGroupsArgsForCall = append(fake.listDefaultSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListDefaultSecurityGroups", []interface{}{})
	fake.listDefaultSecurityGroupsMutex.Unlock()
	if fake.ListDefaultSecurityGroupsStub != nil {
		return fake.ListDefaultSecurityGroupsStub()
	} else {
		return fake.listDefaultSecurityGroupsReturns.result1, fake.listDefaultSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListDefaultSecurityGroupsCallCount() int {
	fake.listDefaultSecurityGroupsMutex.RLock()
	defer fake.listDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.listDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListDefaultSecurityGroupsReturns(result1 map[string]go_cfclient.SecGroup, result2 error) {
	fake.ListDefaultSecurityGroupsStub = nil
	fake.listDefaultSecurityGroupsReturns = struct {
		result1 map[string]go_cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSpaceSecurityGroups(spaceGUID string) (map[string]string, error) {
	fake.listSpaceSecurityGroupsMutex.Lock()
	fake.listSpaceSecurityGroupsArgsForCall = append(fake.listSpaceSecurityGroupsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceSecurityGroups", []interface{}{spaceGUID})
	fake.listSpaceSecurityGroupsMutex.Unlock()
	if fake.ListSpaceSecurityGroupsStub != nil {
		return fake.ListSpaceSecurityGroupsStub(spaceGUID)
	} else {
		return fake.listSpaceSecurityGroupsReturns.result1, fake.listSpaceSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListSpaceSecurityGroupsCallCount() int {
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	return len(fake.listSpaceSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListSpaceSecurityGroupsArgsForCall(i int) string {
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	return fake.listSpaceSecurityGroupsArgsForCall[i].spaceGUID
}

func (fake *FakeManager) ListSpaceSecurityGroupsReturns(result1 map[string]string, result2 error) {
	fake.ListSpaceSecurityGroupsStub = nil
	fake.listSpaceSecurityGroupsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSecurityGroupRules(sgGUID string) ([]byte, error) {
	fake.getSecurityGroupRulesMutex.Lock()
	fake.getSecurityGroupRulesArgsForCall = append(fake.getSecurityGroupRulesArgsForCall, struct {
		sgGUID string
	}{sgGUID})
	fake.recordInvocation("GetSecurityGroupRules", []interface{}{sgGUID})
	fake.getSecurityGroupRulesMutex.Unlock()
	if fake.GetSecurityGroupRulesStub != nil {
		return fake.GetSecurityGroupRulesStub(sgGUID)
	} else {
		return fake.getSecurityGroupRulesReturns.result1, fake.getSecurityGroupRulesReturns.result2
	}
}

func (fake *FakeManager) GetSecurityGroupRulesCallCount() int {
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	return len(fake.getSecurityGroupRulesArgsForCall)
}

func (fake *FakeManager) GetSecurityGroupRulesArgsForCall(i int) string {
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	return fake.getSecurityGroupRulesArgsForCall[i].sgGUID
}

func (fake *FakeManager) GetSecurityGroupRulesReturns(result1 []byte, result2 error) {
	fake.GetSecurityGroupRulesStub = nil
	fake.getSecurityGroupRulesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateApplicationSecurityGroups() error {
	fake.createApplicationSecurityGroupsMutex.Lock()
	fake.createApplicationSecurityGroupsArgsForCall = append(fake.createApplicationSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("CreateApplicationSecurityGroups", []interface{}{})
	fake.createApplicationSecurityGroupsMutex.Unlock()
	if fake.CreateApplicationSecurityGroupsStub != nil {
		return fake.CreateApplicationSecurityGroupsStub()
	} else {
		return fake.createApplicationSecurityGroupsReturns.result1
	}
}

func (fake *FakeManager) CreateApplicationSecurityGroupsCallCount() int {
	fake.createApplicationSecurityGroupsMutex.RLock()
	defer fake.createApplicationSecurityGroupsMutex.RUnlock()
	return len(fake.createApplicationSecurityGroupsArgsForCall)
}

func (fake *FakeManager) CreateApplicationSecurityGroupsReturns(result1 error) {
	fake.CreateApplicationSecurityGroupsStub = nil
	fake.createApplicationSecurityGroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateGlobalSecurityGroups() error {
	fake.createGlobalSecurityGroupsMutex.Lock()
	fake.createGlobalSecurityGroupsArgsForCall = append(fake.createGlobalSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("CreateGlobalSecurityGroups", []interface{}{})
	fake.createGlobalSecurityGroupsMutex.Unlock()
	if fake.CreateGlobalSecurityGroupsStub != nil {
		return fake.CreateGlobalSecurityGroupsStub()
	} else {
		return fake.createGlobalSecurityGroupsReturns.result1
	}
}

func (fake *FakeManager) CreateGlobalSecurityGroupsCallCount() int {
	fake.createGlobalSecurityGroupsMutex.RLock()
	defer fake.createGlobalSecurityGroupsMutex.RUnlock()
	return len(fake.createGlobalSecurityGroupsArgsForCall)
}

func (fake *FakeManager) CreateGlobalSecurityGroupsReturns(result1 error) {
	fake.CreateGlobalSecurityGroupsStub = nil
	fake.createGlobalSecurityGroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignDefaultSecurityGroups() error {
	fake.assignDefaultSecurityGroupsMutex.Lock()
	fake.assignDefaultSecurityGroupsArgsForCall = append(fake.assignDefaultSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("AssignDefaultSecurityGroups", []interface{}{})
	fake.assignDefaultSecurityGroupsMutex.Unlock()
	if fake.AssignDefaultSecurityGroupsStub != nil {
		return fake.AssignDefaultSecurityGroupsStub()
	} else {
		return fake.assignDefaultSecurityGroupsReturns.result1
	}
}

func (fake *FakeManager) AssignDefaultSecurityGroupsCallCount() int {
	fake.assignDefaultSecurityGroupsMutex.RLock()
	defer fake.assignDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.assignDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) AssignDefaultSecurityGroupsReturns(result1 error) {
	fake.AssignDefaultSecurityGroupsStub = nil
	fake.assignDefaultSecurityGroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listNonDefaultSecurityGroupsMutex.RLock()
	defer fake.listNonDefaultSecurityGroupsMutex.RUnlock()
	fake.listDefaultSecurityGroupsMutex.RLock()
	defer fake.listDefaultSecurityGroupsMutex.RUnlock()
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	fake.createApplicationSecurityGroupsMutex.RLock()
	defer fake.createApplicationSecurityGroupsMutex.RUnlock()
	fake.createGlobalSecurityGroupsMutex.RLock()
	defer fake.createGlobalSecurityGroupsMutex.RUnlock()
	fake.assignDefaultSecurityGroupsMutex.RLock()
	defer fake.assignDefaultSecurityGroupsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ securitygroup.Manager = new(FakeManager)
