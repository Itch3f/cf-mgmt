// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/isosegment"
)

type FakeCFClient struct {
	ListIsolationSegmentsStub        func() ([]go_cfclient.IsolationSegment, error)
	listIsolationSegmentsMutex       sync.RWMutex
	listIsolationSegmentsArgsForCall []struct{}
	listIsolationSegmentsReturns     struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}
	ListIsolationSegmentsByQueryStub        func(query url.Values) ([]go_cfclient.IsolationSegment, error)
	listIsolationSegmentsByQueryMutex       sync.RWMutex
	listIsolationSegmentsByQueryArgsForCall []struct {
		query url.Values
	}
	listIsolationSegmentsByQueryReturns struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}
	CreateIsolationSegmentStub        func(name string) (*go_cfclient.IsolationSegment, error)
	createIsolationSegmentMutex       sync.RWMutex
	createIsolationSegmentArgsForCall []struct {
		name string
	}
	createIsolationSegmentReturns struct {
		result1 *go_cfclient.IsolationSegment
		result2 error
	}
	DeleteIsolationSegmentByGUIDStub        func(guid string) error
	deleteIsolationSegmentByGUIDMutex       sync.RWMutex
	deleteIsolationSegmentByGUIDArgsForCall []struct {
		guid string
	}
	deleteIsolationSegmentByGUIDReturns struct {
		result1 error
	}
	GetIsolationSegmentByGUIDStub        func(guid string) (*go_cfclient.IsolationSegment, error)
	getIsolationSegmentByGUIDMutex       sync.RWMutex
	getIsolationSegmentByGUIDArgsForCall []struct {
		guid string
	}
	getIsolationSegmentByGUIDReturns struct {
		result1 *go_cfclient.IsolationSegment
		result2 error
	}
	GetOrgByNameStub        func(name string) (go_cfclient.Org, error)
	getOrgByNameMutex       sync.RWMutex
	getOrgByNameArgsForCall []struct {
		name string
	}
	getOrgByNameReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	GetSpaceByNameStub        func(spaceName string, orgGuid string) (go_cfclient.Space, error)
	getSpaceByNameMutex       sync.RWMutex
	getSpaceByNameArgsForCall []struct {
		spaceName string
		orgGuid   string
	}
	getSpaceByNameReturns struct {
		result1 go_cfclient.Space
		result2 error
	}
	AddIsolationSegmentToOrgStub        func(isolationSegmentGUID, orgGUID string) error
	addIsolationSegmentToOrgMutex       sync.RWMutex
	addIsolationSegmentToOrgArgsForCall []struct {
		isolationSegmentGUID string
		orgGUID              string
	}
	addIsolationSegmentToOrgReturns struct {
		result1 error
	}
	RemoveIsolationSegmentFromOrgStub        func(isolationSegmentGUID, orgGUID string) error
	removeIsolationSegmentFromOrgMutex       sync.RWMutex
	removeIsolationSegmentFromOrgArgsForCall []struct {
		isolationSegmentGUID string
		orgGUID              string
	}
	removeIsolationSegmentFromOrgReturns struct {
		result1 error
	}
	AddIsolationSegmentToSpaceStub        func(isolationSegmentGUID, spaceGUID string) error
	addIsolationSegmentToSpaceMutex       sync.RWMutex
	addIsolationSegmentToSpaceArgsForCall []struct {
		isolationSegmentGUID string
		spaceGUID            string
	}
	addIsolationSegmentToSpaceReturns struct {
		result1 error
	}
	RemoveIsolationSegmentFromSpaceStub        func(isolationSegmentGUID, spaceGUID string) error
	removeIsolationSegmentFromSpaceMutex       sync.RWMutex
	removeIsolationSegmentFromSpaceArgsForCall []struct {
		isolationSegmentGUID string
		spaceGUID            string
	}
	removeIsolationSegmentFromSpaceReturns struct {
		result1 error
	}
	DefaultIsolationSegmentForOrgStub        func(orgGUID, isolationSegmentGUID string) error
	defaultIsolationSegmentForOrgMutex       sync.RWMutex
	defaultIsolationSegmentForOrgArgsForCall []struct {
		orgGUID              string
		isolationSegmentGUID string
	}
	defaultIsolationSegmentForOrgReturns struct {
		result1 error
	}
	ResetDefaultIsolationSegmentForOrgStub        func(orgGUID string) error
	resetDefaultIsolationSegmentForOrgMutex       sync.RWMutex
	resetDefaultIsolationSegmentForOrgArgsForCall []struct {
		orgGUID string
	}
	resetDefaultIsolationSegmentForOrgReturns struct {
		result1 error
	}
	IsolationSegmentForSpaceStub        func(spaceGUID, isolationSegmentGUID string) error
	isolationSegmentForSpaceMutex       sync.RWMutex
	isolationSegmentForSpaceArgsForCall []struct {
		spaceGUID            string
		isolationSegmentGUID string
	}
	isolationSegmentForSpaceReturns struct {
		result1 error
	}
	ResetIsolationSegmentForSpaceStub        func(spaceGUID string) error
	resetIsolationSegmentForSpaceMutex       sync.RWMutex
	resetIsolationSegmentForSpaceArgsForCall []struct {
		spaceGUID string
	}
	resetIsolationSegmentForSpaceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListIsolationSegments() ([]go_cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsMutex.Lock()
	fake.listIsolationSegmentsArgsForCall = append(fake.listIsolationSegmentsArgsForCall, struct{}{})
	fake.recordInvocation("ListIsolationSegments", []interface{}{})
	fake.listIsolationSegmentsMutex.Unlock()
	if fake.ListIsolationSegmentsStub != nil {
		return fake.ListIsolationSegmentsStub()
	} else {
		return fake.listIsolationSegmentsReturns.result1, fake.listIsolationSegmentsReturns.result2
	}
}

func (fake *FakeCFClient) ListIsolationSegmentsCallCount() int {
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	return len(fake.listIsolationSegmentsArgsForCall)
}

func (fake *FakeCFClient) ListIsolationSegmentsReturns(result1 []go_cfclient.IsolationSegment, result2 error) {
	fake.ListIsolationSegmentsStub = nil
	fake.listIsolationSegmentsReturns = struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsByQuery(query url.Values) ([]go_cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	fake.listIsolationSegmentsByQueryArgsForCall = append(fake.listIsolationSegmentsByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListIsolationSegmentsByQuery", []interface{}{query})
	fake.listIsolationSegmentsByQueryMutex.Unlock()
	if fake.ListIsolationSegmentsByQueryStub != nil {
		return fake.ListIsolationSegmentsByQueryStub(query)
	} else {
		return fake.listIsolationSegmentsByQueryReturns.result1, fake.listIsolationSegmentsByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryCallCount() int {
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	return len(fake.listIsolationSegmentsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryArgsForCall(i int) url.Values {
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	return fake.listIsolationSegmentsByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryReturns(result1 []go_cfclient.IsolationSegment, result2 error) {
	fake.ListIsolationSegmentsByQueryStub = nil
	fake.listIsolationSegmentsByQueryReturns = struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateIsolationSegment(name string) (*go_cfclient.IsolationSegment, error) {
	fake.createIsolationSegmentMutex.Lock()
	fake.createIsolationSegmentArgsForCall = append(fake.createIsolationSegmentArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("CreateIsolationSegment", []interface{}{name})
	fake.createIsolationSegmentMutex.Unlock()
	if fake.CreateIsolationSegmentStub != nil {
		return fake.CreateIsolationSegmentStub(name)
	} else {
		return fake.createIsolationSegmentReturns.result1, fake.createIsolationSegmentReturns.result2
	}
}

func (fake *FakeCFClient) CreateIsolationSegmentCallCount() int {
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	return len(fake.createIsolationSegmentArgsForCall)
}

func (fake *FakeCFClient) CreateIsolationSegmentArgsForCall(i int) string {
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	return fake.createIsolationSegmentArgsForCall[i].name
}

func (fake *FakeCFClient) CreateIsolationSegmentReturns(result1 *go_cfclient.IsolationSegment, result2 error) {
	fake.CreateIsolationSegmentStub = nil
	fake.createIsolationSegmentReturns = struct {
		result1 *go_cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUID(guid string) error {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	fake.deleteIsolationSegmentByGUIDArgsForCall = append(fake.deleteIsolationSegmentByGUIDArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("DeleteIsolationSegmentByGUID", []interface{}{guid})
	fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	if fake.DeleteIsolationSegmentByGUIDStub != nil {
		return fake.DeleteIsolationSegmentByGUIDStub(guid)
	} else {
		return fake.deleteIsolationSegmentByGUIDReturns.result1
	}
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDCallCount() int {
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	return len(fake.deleteIsolationSegmentByGUIDArgsForCall)
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDArgsForCall(i int) string {
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	return fake.deleteIsolationSegmentByGUIDArgsForCall[i].guid
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDReturns(result1 error) {
	fake.DeleteIsolationSegmentByGUIDStub = nil
	fake.deleteIsolationSegmentByGUIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) GetIsolationSegmentByGUID(guid string) (*go_cfclient.IsolationSegment, error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	fake.getIsolationSegmentByGUIDArgsForCall = append(fake.getIsolationSegmentByGUIDArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetIsolationSegmentByGUID", []interface{}{guid})
	fake.getIsolationSegmentByGUIDMutex.Unlock()
	if fake.GetIsolationSegmentByGUIDStub != nil {
		return fake.GetIsolationSegmentByGUIDStub(guid)
	} else {
		return fake.getIsolationSegmentByGUIDReturns.result1, fake.getIsolationSegmentByGUIDReturns.result2
	}
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDCallCount() int {
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	return len(fake.getIsolationSegmentByGUIDArgsForCall)
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDArgsForCall(i int) string {
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	return fake.getIsolationSegmentByGUIDArgsForCall[i].guid
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDReturns(result1 *go_cfclient.IsolationSegment, result2 error) {
	fake.GetIsolationSegmentByGUIDStub = nil
	fake.getIsolationSegmentByGUIDReturns = struct {
		result1 *go_cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgByName(name string) (go_cfclient.Org, error) {
	fake.getOrgByNameMutex.Lock()
	fake.getOrgByNameArgsForCall = append(fake.getOrgByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetOrgByName", []interface{}{name})
	fake.getOrgByNameMutex.Unlock()
	if fake.GetOrgByNameStub != nil {
		return fake.GetOrgByNameStub(name)
	} else {
		return fake.getOrgByNameReturns.result1, fake.getOrgByNameReturns.result2
	}
}

func (fake *FakeCFClient) GetOrgByNameCallCount() int {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return len(fake.getOrgByNameArgsForCall)
}

func (fake *FakeCFClient) GetOrgByNameArgsForCall(i int) string {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return fake.getOrgByNameArgsForCall[i].name
}

func (fake *FakeCFClient) GetOrgByNameReturns(result1 go_cfclient.Org, result2 error) {
	fake.GetOrgByNameStub = nil
	fake.getOrgByNameReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceByName(spaceName string, orgGuid string) (go_cfclient.Space, error) {
	fake.getSpaceByNameMutex.Lock()
	fake.getSpaceByNameArgsForCall = append(fake.getSpaceByNameArgsForCall, struct {
		spaceName string
		orgGuid   string
	}{spaceName, orgGuid})
	fake.recordInvocation("GetSpaceByName", []interface{}{spaceName, orgGuid})
	fake.getSpaceByNameMutex.Unlock()
	if fake.GetSpaceByNameStub != nil {
		return fake.GetSpaceByNameStub(spaceName, orgGuid)
	} else {
		return fake.getSpaceByNameReturns.result1, fake.getSpaceByNameReturns.result2
	}
}

func (fake *FakeCFClient) GetSpaceByNameCallCount() int {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return len(fake.getSpaceByNameArgsForCall)
}

func (fake *FakeCFClient) GetSpaceByNameArgsForCall(i int) (string, string) {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return fake.getSpaceByNameArgsForCall[i].spaceName, fake.getSpaceByNameArgsForCall[i].orgGuid
}

func (fake *FakeCFClient) GetSpaceByNameReturns(result1 go_cfclient.Space, result2 error) {
	fake.GetSpaceByNameStub = nil
	fake.getSpaceByNameReturns = struct {
		result1 go_cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AddIsolationSegmentToOrg(isolationSegmentGUID string, orgGUID string) error {
	fake.addIsolationSegmentToOrgMutex.Lock()
	fake.addIsolationSegmentToOrgArgsForCall = append(fake.addIsolationSegmentToOrgArgsForCall, struct {
		isolationSegmentGUID string
		orgGUID              string
	}{isolationSegmentGUID, orgGUID})
	fake.recordInvocation("AddIsolationSegmentToOrg", []interface{}{isolationSegmentGUID, orgGUID})
	fake.addIsolationSegmentToOrgMutex.Unlock()
	if fake.AddIsolationSegmentToOrgStub != nil {
		return fake.AddIsolationSegmentToOrgStub(isolationSegmentGUID, orgGUID)
	} else {
		return fake.addIsolationSegmentToOrgReturns.result1
	}
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgCallCount() int {
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	return len(fake.addIsolationSegmentToOrgArgsForCall)
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgArgsForCall(i int) (string, string) {
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	return fake.addIsolationSegmentToOrgArgsForCall[i].isolationSegmentGUID, fake.addIsolationSegmentToOrgArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgReturns(result1 error) {
	fake.AddIsolationSegmentToOrgStub = nil
	fake.addIsolationSegmentToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrg(isolationSegmentGUID string, orgGUID string) error {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	fake.removeIsolationSegmentFromOrgArgsForCall = append(fake.removeIsolationSegmentFromOrgArgsForCall, struct {
		isolationSegmentGUID string
		orgGUID              string
	}{isolationSegmentGUID, orgGUID})
	fake.recordInvocation("RemoveIsolationSegmentFromOrg", []interface{}{isolationSegmentGUID, orgGUID})
	fake.removeIsolationSegmentFromOrgMutex.Unlock()
	if fake.RemoveIsolationSegmentFromOrgStub != nil {
		return fake.RemoveIsolationSegmentFromOrgStub(isolationSegmentGUID, orgGUID)
	} else {
		return fake.removeIsolationSegmentFromOrgReturns.result1
	}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgCallCount() int {
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	return len(fake.removeIsolationSegmentFromOrgArgsForCall)
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgArgsForCall(i int) (string, string) {
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	return fake.removeIsolationSegmentFromOrgArgsForCall[i].isolationSegmentGUID, fake.removeIsolationSegmentFromOrgArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgReturns(result1 error) {
	fake.RemoveIsolationSegmentFromOrgStub = nil
	fake.removeIsolationSegmentFromOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToSpace(isolationSegmentGUID string, spaceGUID string) error {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	fake.addIsolationSegmentToSpaceArgsForCall = append(fake.addIsolationSegmentToSpaceArgsForCall, struct {
		isolationSegmentGUID string
		spaceGUID            string
	}{isolationSegmentGUID, spaceGUID})
	fake.recordInvocation("AddIsolationSegmentToSpace", []interface{}{isolationSegmentGUID, spaceGUID})
	fake.addIsolationSegmentToSpaceMutex.Unlock()
	if fake.AddIsolationSegmentToSpaceStub != nil {
		return fake.AddIsolationSegmentToSpaceStub(isolationSegmentGUID, spaceGUID)
	} else {
		return fake.addIsolationSegmentToSpaceReturns.result1
	}
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceCallCount() int {
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	return len(fake.addIsolationSegmentToSpaceArgsForCall)
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceArgsForCall(i int) (string, string) {
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	return fake.addIsolationSegmentToSpaceArgsForCall[i].isolationSegmentGUID, fake.addIsolationSegmentToSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceReturns(result1 error) {
	fake.AddIsolationSegmentToSpaceStub = nil
	fake.addIsolationSegmentToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpace(isolationSegmentGUID string, spaceGUID string) error {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	fake.removeIsolationSegmentFromSpaceArgsForCall = append(fake.removeIsolationSegmentFromSpaceArgsForCall, struct {
		isolationSegmentGUID string
		spaceGUID            string
	}{isolationSegmentGUID, spaceGUID})
	fake.recordInvocation("RemoveIsolationSegmentFromSpace", []interface{}{isolationSegmentGUID, spaceGUID})
	fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	if fake.RemoveIsolationSegmentFromSpaceStub != nil {
		return fake.RemoveIsolationSegmentFromSpaceStub(isolationSegmentGUID, spaceGUID)
	} else {
		return fake.removeIsolationSegmentFromSpaceReturns.result1
	}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceCallCount() int {
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	return len(fake.removeIsolationSegmentFromSpaceArgsForCall)
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceArgsForCall(i int) (string, string) {
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	return fake.removeIsolationSegmentFromSpaceArgsForCall[i].isolationSegmentGUID, fake.removeIsolationSegmentFromSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceReturns(result1 error) {
	fake.RemoveIsolationSegmentFromSpaceStub = nil
	fake.removeIsolationSegmentFromSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrg(orgGUID string, isolationSegmentGUID string) error {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	fake.defaultIsolationSegmentForOrgArgsForCall = append(fake.defaultIsolationSegmentForOrgArgsForCall, struct {
		orgGUID              string
		isolationSegmentGUID string
	}{orgGUID, isolationSegmentGUID})
	fake.recordInvocation("DefaultIsolationSegmentForOrg", []interface{}{orgGUID, isolationSegmentGUID})
	fake.defaultIsolationSegmentForOrgMutex.Unlock()
	if fake.DefaultIsolationSegmentForOrgStub != nil {
		return fake.DefaultIsolationSegmentForOrgStub(orgGUID, isolationSegmentGUID)
	} else {
		return fake.defaultIsolationSegmentForOrgReturns.result1
	}
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgCallCount() int {
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	return len(fake.defaultIsolationSegmentForOrgArgsForCall)
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgArgsForCall(i int) (string, string) {
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	return fake.defaultIsolationSegmentForOrgArgsForCall[i].orgGUID, fake.defaultIsolationSegmentForOrgArgsForCall[i].isolationSegmentGUID
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgReturns(result1 error) {
	fake.DefaultIsolationSegmentForOrgStub = nil
	fake.defaultIsolationSegmentForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrg(orgGUID string) error {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	fake.resetDefaultIsolationSegmentForOrgArgsForCall = append(fake.resetDefaultIsolationSegmentForOrgArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ResetDefaultIsolationSegmentForOrg", []interface{}{orgGUID})
	fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	if fake.ResetDefaultIsolationSegmentForOrgStub != nil {
		return fake.ResetDefaultIsolationSegmentForOrgStub(orgGUID)
	} else {
		return fake.resetDefaultIsolationSegmentForOrgReturns.result1
	}
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgCallCount() int {
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	return len(fake.resetDefaultIsolationSegmentForOrgArgsForCall)
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgArgsForCall(i int) string {
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	return fake.resetDefaultIsolationSegmentForOrgArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgReturns(result1 error) {
	fake.ResetDefaultIsolationSegmentForOrgStub = nil
	fake.resetDefaultIsolationSegmentForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) IsolationSegmentForSpace(spaceGUID string, isolationSegmentGUID string) error {
	fake.isolationSegmentForSpaceMutex.Lock()
	fake.isolationSegmentForSpaceArgsForCall = append(fake.isolationSegmentForSpaceArgsForCall, struct {
		spaceGUID            string
		isolationSegmentGUID string
	}{spaceGUID, isolationSegmentGUID})
	fake.recordInvocation("IsolationSegmentForSpace", []interface{}{spaceGUID, isolationSegmentGUID})
	fake.isolationSegmentForSpaceMutex.Unlock()
	if fake.IsolationSegmentForSpaceStub != nil {
		return fake.IsolationSegmentForSpaceStub(spaceGUID, isolationSegmentGUID)
	} else {
		return fake.isolationSegmentForSpaceReturns.result1
	}
}

func (fake *FakeCFClient) IsolationSegmentForSpaceCallCount() int {
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	return len(fake.isolationSegmentForSpaceArgsForCall)
}

func (fake *FakeCFClient) IsolationSegmentForSpaceArgsForCall(i int) (string, string) {
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	return fake.isolationSegmentForSpaceArgsForCall[i].spaceGUID, fake.isolationSegmentForSpaceArgsForCall[i].isolationSegmentGUID
}

func (fake *FakeCFClient) IsolationSegmentForSpaceReturns(result1 error) {
	fake.IsolationSegmentForSpaceStub = nil
	fake.isolationSegmentForSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpace(spaceGUID string) error {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	fake.resetIsolationSegmentForSpaceArgsForCall = append(fake.resetIsolationSegmentForSpaceArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ResetIsolationSegmentForSpace", []interface{}{spaceGUID})
	fake.resetIsolationSegmentForSpaceMutex.Unlock()
	if fake.ResetIsolationSegmentForSpaceStub != nil {
		return fake.ResetIsolationSegmentForSpaceStub(spaceGUID)
	} else {
		return fake.resetIsolationSegmentForSpaceReturns.result1
	}
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceCallCount() int {
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	return len(fake.resetIsolationSegmentForSpaceArgsForCall)
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceArgsForCall(i int) string {
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	return fake.resetIsolationSegmentForSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceReturns(result1 error) {
	fake.ResetIsolationSegmentForSpaceStub = nil
	fake.resetIsolationSegmentForSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ isosegment.CFClient = new(FakeCFClient)
