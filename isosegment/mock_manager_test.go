// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package isosegment is a generated GoMock package.
package isosegment

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockmanager is a mock of manager interface
type Mockmanager struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerMockRecorder
}

// MockmanagerMockRecorder is the mock recorder for Mockmanager
type MockmanagerMockRecorder struct {
	mock *Mockmanager
}

// NewMockmanager creates a new mock instance
func NewMockmanager(ctrl *gomock.Controller) *Mockmanager {
	mock := &Mockmanager{ctrl: ctrl}
	mock.recorder = &MockmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockmanager) EXPECT() *MockmanagerMockRecorder {
	return m.recorder
}

// GetIsolationSegments mocks base method
func (m *Mockmanager) GetIsolationSegments() ([]Segment, error) {
	ret := m.ctrl.Call(m, "GetIsolationSegments")
	ret0, _ := ret[0].([]Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsolationSegments indicates an expected call of GetIsolationSegments
func (mr *MockmanagerMockRecorder) GetIsolationSegments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsolationSegments", reflect.TypeOf((*Mockmanager)(nil).GetIsolationSegments))
}

// EntitledIsolationSegments mocks base method
func (m *Mockmanager) EntitledIsolationSegments(org string) ([]Segment, error) {
	ret := m.ctrl.Call(m, "EntitledIsolationSegments", org)
	ret0, _ := ret[0].([]Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntitledIsolationSegments indicates an expected call of EntitledIsolationSegments
func (mr *MockmanagerMockRecorder) EntitledIsolationSegments(org interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntitledIsolationSegments", reflect.TypeOf((*Mockmanager)(nil).EntitledIsolationSegments), org)
}

// CreateIsolationSegment mocks base method
func (m *Mockmanager) CreateIsolationSegment(name string) error {
	ret := m.ctrl.Call(m, "CreateIsolationSegment", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIsolationSegment indicates an expected call of CreateIsolationSegment
func (mr *MockmanagerMockRecorder) CreateIsolationSegment(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIsolationSegment", reflect.TypeOf((*Mockmanager)(nil).CreateIsolationSegment), name)
}

// DeleteIsolationSegment mocks base method
func (m *Mockmanager) DeleteIsolationSegment(segmentName string) error {
	ret := m.ctrl.Call(m, "DeleteIsolationSegment", segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIsolationSegment indicates an expected call of DeleteIsolationSegment
func (mr *MockmanagerMockRecorder) DeleteIsolationSegment(segmentName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIsolationSegment", reflect.TypeOf((*Mockmanager)(nil).DeleteIsolationSegment), segmentName)
}

// EnableOrgIsolation mocks base method
func (m *Mockmanager) EnableOrgIsolation(orgName, segmentName string) error {
	ret := m.ctrl.Call(m, "EnableOrgIsolation", orgName, segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableOrgIsolation indicates an expected call of EnableOrgIsolation
func (mr *MockmanagerMockRecorder) EnableOrgIsolation(orgName, segmentName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrgIsolation", reflect.TypeOf((*Mockmanager)(nil).EnableOrgIsolation), orgName, segmentName)
}

// RevokeOrgIsolation mocks base method
func (m *Mockmanager) RevokeOrgIsolation(orgName, segmentName string) error {
	ret := m.ctrl.Call(m, "RevokeOrgIsolation", orgName, segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeOrgIsolation indicates an expected call of RevokeOrgIsolation
func (mr *MockmanagerMockRecorder) RevokeOrgIsolation(orgName, segmentName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOrgIsolation", reflect.TypeOf((*Mockmanager)(nil).RevokeOrgIsolation), orgName, segmentName)
}
