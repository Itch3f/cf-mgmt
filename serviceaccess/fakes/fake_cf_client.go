// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/serviceaccess"
)

type FakeCFClient struct {
	ListServicePlansByQueryStub        func(query url.Values) ([]go_cfclient.ServicePlan, error)
	listServicePlansByQueryMutex       sync.RWMutex
	listServicePlansByQueryArgsForCall []struct {
		query url.Values
	}
	listServicePlansByQueryReturns struct {
		result1 []go_cfclient.ServicePlan
		result2 error
	}
	MakeServicePlanPrivateStub        func(servicePlanGUID string) error
	makeServicePlanPrivateMutex       sync.RWMutex
	makeServicePlanPrivateArgsForCall []struct {
		servicePlanGUID string
	}
	makeServicePlanPrivateReturns struct {
		result1 error
	}
	ListServicesStub        func() ([]go_cfclient.Service, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct{}
	listServicesReturns     struct {
		result1 []go_cfclient.Service
		result2 error
	}
	ListServicePlanVisibilitiesByQueryStub        func(query url.Values) ([]go_cfclient.ServicePlanVisibility, error)
	listServicePlanVisibilitiesByQueryMutex       sync.RWMutex
	listServicePlanVisibilitiesByQueryArgsForCall []struct {
		query url.Values
	}
	listServicePlanVisibilitiesByQueryReturns struct {
		result1 []go_cfclient.ServicePlanVisibility
		result2 error
	}
	CreateServicePlanVisibilityStub        func(servicePlanGuid string, organizationGuid string) (go_cfclient.ServicePlanVisibility, error)
	createServicePlanVisibilityMutex       sync.RWMutex
	createServicePlanVisibilityArgsForCall []struct {
		servicePlanGuid  string
		organizationGuid string
	}
	createServicePlanVisibilityReturns struct {
		result1 go_cfclient.ServicePlanVisibility
		result2 error
	}
	DeleteServicePlanVisibilityByPlanAndOrgStub        func(servicePlanGuid string, organizationGuid string, async bool) error
	deleteServicePlanVisibilityByPlanAndOrgMutex       sync.RWMutex
	deleteServicePlanVisibilityByPlanAndOrgArgsForCall []struct {
		servicePlanGuid  string
		organizationGuid string
		async            bool
	}
	deleteServicePlanVisibilityByPlanAndOrgReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListServicePlansByQuery(query url.Values) ([]go_cfclient.ServicePlan, error) {
	fake.listServicePlansByQueryMutex.Lock()
	fake.listServicePlansByQueryArgsForCall = append(fake.listServicePlansByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListServicePlansByQuery", []interface{}{query})
	fake.listServicePlansByQueryMutex.Unlock()
	if fake.ListServicePlansByQueryStub != nil {
		return fake.ListServicePlansByQueryStub(query)
	} else {
		return fake.listServicePlansByQueryReturns.result1, fake.listServicePlansByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListServicePlansByQueryCallCount() int {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return len(fake.listServicePlansByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicePlansByQueryArgsForCall(i int) url.Values {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return fake.listServicePlansByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListServicePlansByQueryReturns(result1 []go_cfclient.ServicePlan, result2 error) {
	fake.ListServicePlansByQueryStub = nil
	fake.listServicePlansByQueryReturns = struct {
		result1 []go_cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) MakeServicePlanPrivate(servicePlanGUID string) error {
	fake.makeServicePlanPrivateMutex.Lock()
	fake.makeServicePlanPrivateArgsForCall = append(fake.makeServicePlanPrivateArgsForCall, struct {
		servicePlanGUID string
	}{servicePlanGUID})
	fake.recordInvocation("MakeServicePlanPrivate", []interface{}{servicePlanGUID})
	fake.makeServicePlanPrivateMutex.Unlock()
	if fake.MakeServicePlanPrivateStub != nil {
		return fake.MakeServicePlanPrivateStub(servicePlanGUID)
	} else {
		return fake.makeServicePlanPrivateReturns.result1
	}
}

func (fake *FakeCFClient) MakeServicePlanPrivateCallCount() int {
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	return len(fake.makeServicePlanPrivateArgsForCall)
}

func (fake *FakeCFClient) MakeServicePlanPrivateArgsForCall(i int) string {
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	return fake.makeServicePlanPrivateArgsForCall[i].servicePlanGUID
}

func (fake *FakeCFClient) MakeServicePlanPrivateReturns(result1 error) {
	fake.MakeServicePlanPrivateStub = nil
	fake.makeServicePlanPrivateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListServices() ([]go_cfclient.Service, error) {
	fake.listServicesMutex.Lock()
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct{}{})
	fake.recordInvocation("ListServices", []interface{}{})
	fake.listServicesMutex.Unlock()
	if fake.ListServicesStub != nil {
		return fake.ListServicesStub()
	} else {
		return fake.listServicesReturns.result1, fake.listServicesReturns.result2
	}
}

func (fake *FakeCFClient) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeCFClient) ListServicesReturns(result1 []go_cfclient.Service, result2 error) {
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 []go_cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQuery(query url.Values) ([]go_cfclient.ServicePlanVisibility, error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	fake.listServicePlanVisibilitiesByQueryArgsForCall = append(fake.listServicePlanVisibilitiesByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListServicePlanVisibilitiesByQuery", []interface{}{query})
	fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	if fake.ListServicePlanVisibilitiesByQueryStub != nil {
		return fake.ListServicePlanVisibilitiesByQueryStub(query)
	} else {
		return fake.listServicePlanVisibilitiesByQueryReturns.result1, fake.listServicePlanVisibilitiesByQueryReturns.result2
	}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryCallCount() int {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	return len(fake.listServicePlanVisibilitiesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryArgsForCall(i int) url.Values {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	return fake.listServicePlanVisibilitiesByQueryArgsForCall[i].query
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryReturns(result1 []go_cfclient.ServicePlanVisibility, result2 error) {
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	fake.listServicePlanVisibilitiesByQueryReturns = struct {
		result1 []go_cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServicePlanVisibility(servicePlanGuid string, organizationGuid string) (go_cfclient.ServicePlanVisibility, error) {
	fake.createServicePlanVisibilityMutex.Lock()
	fake.createServicePlanVisibilityArgsForCall = append(fake.createServicePlanVisibilityArgsForCall, struct {
		servicePlanGuid  string
		organizationGuid string
	}{servicePlanGuid, organizationGuid})
	fake.recordInvocation("CreateServicePlanVisibility", []interface{}{servicePlanGuid, organizationGuid})
	fake.createServicePlanVisibilityMutex.Unlock()
	if fake.CreateServicePlanVisibilityStub != nil {
		return fake.CreateServicePlanVisibilityStub(servicePlanGuid, organizationGuid)
	} else {
		return fake.createServicePlanVisibilityReturns.result1, fake.createServicePlanVisibilityReturns.result2
	}
}

func (fake *FakeCFClient) CreateServicePlanVisibilityCallCount() int {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	return len(fake.createServicePlanVisibilityArgsForCall)
}

func (fake *FakeCFClient) CreateServicePlanVisibilityArgsForCall(i int) (string, string) {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	return fake.createServicePlanVisibilityArgsForCall[i].servicePlanGuid, fake.createServicePlanVisibilityArgsForCall[i].organizationGuid
}

func (fake *FakeCFClient) CreateServicePlanVisibilityReturns(result1 go_cfclient.ServicePlanVisibility, result2 error) {
	fake.CreateServicePlanVisibilityStub = nil
	fake.createServicePlanVisibilityReturns = struct {
		result1 go_cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrg(servicePlanGuid string, organizationGuid string, async bool) error {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall = append(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall, struct {
		servicePlanGuid  string
		organizationGuid string
		async            bool
	}{servicePlanGuid, organizationGuid, async})
	fake.recordInvocation("DeleteServicePlanVisibilityByPlanAndOrg", []interface{}{servicePlanGuid, organizationGuid, async})
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	if fake.DeleteServicePlanVisibilityByPlanAndOrgStub != nil {
		return fake.DeleteServicePlanVisibilityByPlanAndOrgStub(servicePlanGuid, organizationGuid, async)
	} else {
		return fake.deleteServicePlanVisibilityByPlanAndOrgReturns.result1
	}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgCallCount() int {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	return len(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall)
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgArgsForCall(i int) (string, string, bool) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	return fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall[i].servicePlanGuid, fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall[i].organizationGuid, fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall[i].async
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgReturns(result1 error) {
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = nil
	fake.deleteServicePlanVisibilityByPlanAndOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ serviceaccess.CFClient = new(FakeCFClient)
