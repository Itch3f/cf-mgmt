// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/cloudcontroller"
)

type FakeManager struct {
	CreateOrgStub        func(orgName string) error
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		orgName string
	}
	createOrgReturns struct {
		result1 error
	}
	DeleteOrgStub        func(orgGUID string) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		orgGUID string
	}
	deleteOrgReturns struct {
		result1 error
	}
	DeleteOrgByNameStub        func(orgName string) error
	deleteOrgByNameMutex       sync.RWMutex
	deleteOrgByNameArgsForCall []struct {
		orgName string
	}
	deleteOrgByNameReturns struct {
		result1 error
	}
	ListOrgsStub        func() ([]go_cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []go_cfclient.Org
		result2 error
	}
	ListIsolationSegmentsStub        func() ([]go_cfclient.IsolationSegment, error)
	listIsolationSegmentsMutex       sync.RWMutex
	listIsolationSegmentsArgsForCall []struct{}
	listIsolationSegmentsReturns     struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}
	AddUserToOrgRoleStub        func(userName, role, orgGUID string) error
	addUserToOrgRoleMutex       sync.RWMutex
	addUserToOrgRoleArgsForCall []struct {
		userName string
		role     string
		orgGUID  string
	}
	addUserToOrgRoleReturns struct {
		result1 error
	}
	AddUserToOrgStub        func(userName, orgGUID string) error
	addUserToOrgMutex       sync.RWMutex
	addUserToOrgArgsForCall []struct {
		userName string
		orgGUID  string
	}
	addUserToOrgReturns struct {
		result1 error
	}
	ListAllOrgQuotasStub        func() (quotas map[string]string, err error)
	listAllOrgQuotasMutex       sync.RWMutex
	listAllOrgQuotasArgsForCall []struct{}
	listAllOrgQuotasReturns     struct {
		result1 map[string]string
		result2 error
	}
	CreateQuotaStub        func(quota cloudcontroller.QuotaEntity) (string, error)
	createQuotaMutex       sync.RWMutex
	createQuotaArgsForCall []struct {
		quota cloudcontroller.QuotaEntity
	}
	createQuotaReturns struct {
		result1 string
		result2 error
	}
	UpdateQuotaStub        func(quotaGUID string, quota cloudcontroller.QuotaEntity) error
	updateQuotaMutex       sync.RWMutex
	updateQuotaArgsForCall []struct {
		quotaGUID string
		quota     cloudcontroller.QuotaEntity
	}
	updateQuotaReturns struct {
		result1 error
	}
	AssignQuotaToOrgStub        func(orgGUID, quotaGUID string) error
	assignQuotaToOrgMutex       sync.RWMutex
	assignQuotaToOrgArgsForCall []struct {
		orgGUID   string
		quotaGUID string
	}
	assignQuotaToOrgReturns struct {
		result1 error
	}
	GetCFUsersStub        func(entityGUID, entityType, role string) (map[string]string, error)
	getCFUsersMutex       sync.RWMutex
	getCFUsersArgsForCall []struct {
		entityGUID string
		entityType string
		role       string
	}
	getCFUsersReturns struct {
		result1 map[string]string
		result2 error
	}
	RemoveCFUserByUserNameStub        func(entityGUID, entityType, userName, role string) error
	removeCFUserByUserNameMutex       sync.RWMutex
	removeCFUserByUserNameArgsForCall []struct {
		entityGUID string
		entityType string
		userName   string
		role       string
	}
	removeCFUserByUserNameReturns struct {
		result1 error
	}
	OrgQuotaByNameStub        func(name string) (go_cfclient.OrgQuota, error)
	orgQuotaByNameMutex       sync.RWMutex
	orgQuotaByNameArgsForCall []struct {
		name string
	}
	orgQuotaByNameReturns struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}
	SpaceQuotaByNameStub        func(name string) (go_cfclient.SpaceQuota, error)
	spaceQuotaByNameMutex       sync.RWMutex
	spaceQuotaByNameArgsForCall []struct {
		name string
	}
	spaceQuotaByNameReturns struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}
	ListAllPrivateDomainsStub        func() (map[string]cloudcontroller.PrivateDomainInfo, error)
	listAllPrivateDomainsMutex       sync.RWMutex
	listAllPrivateDomainsArgsForCall []struct{}
	listAllPrivateDomainsReturns     struct {
		result1 map[string]cloudcontroller.PrivateDomainInfo
		result2 error
	}
	ListOrgOwnedPrivateDomainsStub        func(orgGUID string) (map[string]string, error)
	listOrgOwnedPrivateDomainsMutex       sync.RWMutex
	listOrgOwnedPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgOwnedPrivateDomainsReturns struct {
		result1 map[string]string
		result2 error
	}
	ListOrgSharedPrivateDomainsStub        func(orgGUID string) (map[string]string, error)
	listOrgSharedPrivateDomainsMutex       sync.RWMutex
	listOrgSharedPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgSharedPrivateDomainsReturns struct {
		result1 map[string]string
		result2 error
	}
	DeletePrivateDomainStub        func(guid string) error
	deletePrivateDomainMutex       sync.RWMutex
	deletePrivateDomainArgsForCall []struct {
		guid string
	}
	deletePrivateDomainReturns struct {
		result1 error
	}
	CreatePrivateDomainStub        func(orgGUID, privateDomain string) (string, error)
	createPrivateDomainMutex       sync.RWMutex
	createPrivateDomainArgsForCall []struct {
		orgGUID       string
		privateDomain string
	}
	createPrivateDomainReturns struct {
		result1 string
		result2 error
	}
	SharePrivateDomainStub        func(sharedOrgGUID, privateDomainGUID string) error
	sharePrivateDomainMutex       sync.RWMutex
	sharePrivateDomainArgsForCall []struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}
	sharePrivateDomainReturns struct {
		result1 error
	}
	RemoveSharedPrivateDomainStub        func(sharedOrgGUID, privateDomainGUID string) error
	removeSharedPrivateDomainMutex       sync.RWMutex
	removeSharedPrivateDomainArgsForCall []struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}
	removeSharedPrivateDomainReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) CreateOrg(orgName string) error {
	fake.createOrgMutex.Lock()
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("CreateOrg", []interface{}{orgName})
	fake.createOrgMutex.Unlock()
	if fake.CreateOrgStub != nil {
		return fake.CreateOrgStub(orgName)
	} else {
		return fake.createOrgReturns.result1
	}
}

func (fake *FakeManager) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeManager) CreateOrgArgsForCall(i int) string {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return fake.createOrgArgsForCall[i].orgName
}

func (fake *FakeManager) CreateOrgReturns(result1 error) {
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrg(orgGUID string) error {
	fake.deleteOrgMutex.Lock()
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("DeleteOrg", []interface{}{orgGUID})
	fake.deleteOrgMutex.Unlock()
	if fake.DeleteOrgStub != nil {
		return fake.DeleteOrgStub(orgGUID)
	} else {
		return fake.deleteOrgReturns.result1
	}
}

func (fake *FakeManager) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeManager) DeleteOrgArgsForCall(i int) string {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return fake.deleteOrgArgsForCall[i].orgGUID
}

func (fake *FakeManager) DeleteOrgReturns(result1 error) {
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrgByName(orgName string) error {
	fake.deleteOrgByNameMutex.Lock()
	fake.deleteOrgByNameArgsForCall = append(fake.deleteOrgByNameArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("DeleteOrgByName", []interface{}{orgName})
	fake.deleteOrgByNameMutex.Unlock()
	if fake.DeleteOrgByNameStub != nil {
		return fake.DeleteOrgByNameStub(orgName)
	} else {
		return fake.deleteOrgByNameReturns.result1
	}
}

func (fake *FakeManager) DeleteOrgByNameCallCount() int {
	fake.deleteOrgByNameMutex.RLock()
	defer fake.deleteOrgByNameMutex.RUnlock()
	return len(fake.deleteOrgByNameArgsForCall)
}

func (fake *FakeManager) DeleteOrgByNameArgsForCall(i int) string {
	fake.deleteOrgByNameMutex.RLock()
	defer fake.deleteOrgByNameMutex.RUnlock()
	return fake.deleteOrgByNameArgsForCall[i].orgName
}

func (fake *FakeManager) DeleteOrgByNameReturns(result1 error) {
	fake.DeleteOrgByNameStub = nil
	fake.deleteOrgByNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListOrgs() ([]go_cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	} else {
		return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
	}
}

func (fake *FakeManager) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeManager) ListOrgsReturns(result1 []go_cfclient.Org, result2 error) {
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListIsolationSegments() ([]go_cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsMutex.Lock()
	fake.listIsolationSegmentsArgsForCall = append(fake.listIsolationSegmentsArgsForCall, struct{}{})
	fake.recordInvocation("ListIsolationSegments", []interface{}{})
	fake.listIsolationSegmentsMutex.Unlock()
	if fake.ListIsolationSegmentsStub != nil {
		return fake.ListIsolationSegmentsStub()
	} else {
		return fake.listIsolationSegmentsReturns.result1, fake.listIsolationSegmentsReturns.result2
	}
}

func (fake *FakeManager) ListIsolationSegmentsCallCount() int {
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	return len(fake.listIsolationSegmentsArgsForCall)
}

func (fake *FakeManager) ListIsolationSegmentsReturns(result1 []go_cfclient.IsolationSegment, result2 error) {
	fake.ListIsolationSegmentsStub = nil
	fake.listIsolationSegmentsReturns = struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AddUserToOrgRole(userName string, role string, orgGUID string) error {
	fake.addUserToOrgRoleMutex.Lock()
	fake.addUserToOrgRoleArgsForCall = append(fake.addUserToOrgRoleArgsForCall, struct {
		userName string
		role     string
		orgGUID  string
	}{userName, role, orgGUID})
	fake.recordInvocation("AddUserToOrgRole", []interface{}{userName, role, orgGUID})
	fake.addUserToOrgRoleMutex.Unlock()
	if fake.AddUserToOrgRoleStub != nil {
		return fake.AddUserToOrgRoleStub(userName, role, orgGUID)
	} else {
		return fake.addUserToOrgRoleReturns.result1
	}
}

func (fake *FakeManager) AddUserToOrgRoleCallCount() int {
	fake.addUserToOrgRoleMutex.RLock()
	defer fake.addUserToOrgRoleMutex.RUnlock()
	return len(fake.addUserToOrgRoleArgsForCall)
}

func (fake *FakeManager) AddUserToOrgRoleArgsForCall(i int) (string, string, string) {
	fake.addUserToOrgRoleMutex.RLock()
	defer fake.addUserToOrgRoleMutex.RUnlock()
	return fake.addUserToOrgRoleArgsForCall[i].userName, fake.addUserToOrgRoleArgsForCall[i].role, fake.addUserToOrgRoleArgsForCall[i].orgGUID
}

func (fake *FakeManager) AddUserToOrgRoleReturns(result1 error) {
	fake.AddUserToOrgRoleStub = nil
	fake.addUserToOrgRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddUserToOrg(userName string, orgGUID string) error {
	fake.addUserToOrgMutex.Lock()
	fake.addUserToOrgArgsForCall = append(fake.addUserToOrgArgsForCall, struct {
		userName string
		orgGUID  string
	}{userName, orgGUID})
	fake.recordInvocation("AddUserToOrg", []interface{}{userName, orgGUID})
	fake.addUserToOrgMutex.Unlock()
	if fake.AddUserToOrgStub != nil {
		return fake.AddUserToOrgStub(userName, orgGUID)
	} else {
		return fake.addUserToOrgReturns.result1
	}
}

func (fake *FakeManager) AddUserToOrgCallCount() int {
	fake.addUserToOrgMutex.RLock()
	defer fake.addUserToOrgMutex.RUnlock()
	return len(fake.addUserToOrgArgsForCall)
}

func (fake *FakeManager) AddUserToOrgArgsForCall(i int) (string, string) {
	fake.addUserToOrgMutex.RLock()
	defer fake.addUserToOrgMutex.RUnlock()
	return fake.addUserToOrgArgsForCall[i].userName, fake.addUserToOrgArgsForCall[i].orgGUID
}

func (fake *FakeManager) AddUserToOrgReturns(result1 error) {
	fake.AddUserToOrgStub = nil
	fake.addUserToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListAllOrgQuotas() (quotas map[string]string, err error) {
	fake.listAllOrgQuotasMutex.Lock()
	fake.listAllOrgQuotasArgsForCall = append(fake.listAllOrgQuotasArgsForCall, struct{}{})
	fake.recordInvocation("ListAllOrgQuotas", []interface{}{})
	fake.listAllOrgQuotasMutex.Unlock()
	if fake.ListAllOrgQuotasStub != nil {
		return fake.ListAllOrgQuotasStub()
	} else {
		return fake.listAllOrgQuotasReturns.result1, fake.listAllOrgQuotasReturns.result2
	}
}

func (fake *FakeManager) ListAllOrgQuotasCallCount() int {
	fake.listAllOrgQuotasMutex.RLock()
	defer fake.listAllOrgQuotasMutex.RUnlock()
	return len(fake.listAllOrgQuotasArgsForCall)
}

func (fake *FakeManager) ListAllOrgQuotasReturns(result1 map[string]string, result2 error) {
	fake.ListAllOrgQuotasStub = nil
	fake.listAllOrgQuotasReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateQuota(quota cloudcontroller.QuotaEntity) (string, error) {
	fake.createQuotaMutex.Lock()
	fake.createQuotaArgsForCall = append(fake.createQuotaArgsForCall, struct {
		quota cloudcontroller.QuotaEntity
	}{quota})
	fake.recordInvocation("CreateQuota", []interface{}{quota})
	fake.createQuotaMutex.Unlock()
	if fake.CreateQuotaStub != nil {
		return fake.CreateQuotaStub(quota)
	} else {
		return fake.createQuotaReturns.result1, fake.createQuotaReturns.result2
	}
}

func (fake *FakeManager) CreateQuotaCallCount() int {
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	return len(fake.createQuotaArgsForCall)
}

func (fake *FakeManager) CreateQuotaArgsForCall(i int) cloudcontroller.QuotaEntity {
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	return fake.createQuotaArgsForCall[i].quota
}

func (fake *FakeManager) CreateQuotaReturns(result1 string, result2 error) {
	fake.CreateQuotaStub = nil
	fake.createQuotaReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) UpdateQuota(quotaGUID string, quota cloudcontroller.QuotaEntity) error {
	fake.updateQuotaMutex.Lock()
	fake.updateQuotaArgsForCall = append(fake.updateQuotaArgsForCall, struct {
		quotaGUID string
		quota     cloudcontroller.QuotaEntity
	}{quotaGUID, quota})
	fake.recordInvocation("UpdateQuota", []interface{}{quotaGUID, quota})
	fake.updateQuotaMutex.Unlock()
	if fake.UpdateQuotaStub != nil {
		return fake.UpdateQuotaStub(quotaGUID, quota)
	} else {
		return fake.updateQuotaReturns.result1
	}
}

func (fake *FakeManager) UpdateQuotaCallCount() int {
	fake.updateQuotaMutex.RLock()
	defer fake.updateQuotaMutex.RUnlock()
	return len(fake.updateQuotaArgsForCall)
}

func (fake *FakeManager) UpdateQuotaArgsForCall(i int) (string, cloudcontroller.QuotaEntity) {
	fake.updateQuotaMutex.RLock()
	defer fake.updateQuotaMutex.RUnlock()
	return fake.updateQuotaArgsForCall[i].quotaGUID, fake.updateQuotaArgsForCall[i].quota
}

func (fake *FakeManager) UpdateQuotaReturns(result1 error) {
	fake.UpdateQuotaStub = nil
	fake.updateQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignQuotaToOrg(orgGUID string, quotaGUID string) error {
	fake.assignQuotaToOrgMutex.Lock()
	fake.assignQuotaToOrgArgsForCall = append(fake.assignQuotaToOrgArgsForCall, struct {
		orgGUID   string
		quotaGUID string
	}{orgGUID, quotaGUID})
	fake.recordInvocation("AssignQuotaToOrg", []interface{}{orgGUID, quotaGUID})
	fake.assignQuotaToOrgMutex.Unlock()
	if fake.AssignQuotaToOrgStub != nil {
		return fake.AssignQuotaToOrgStub(orgGUID, quotaGUID)
	} else {
		return fake.assignQuotaToOrgReturns.result1
	}
}

func (fake *FakeManager) AssignQuotaToOrgCallCount() int {
	fake.assignQuotaToOrgMutex.RLock()
	defer fake.assignQuotaToOrgMutex.RUnlock()
	return len(fake.assignQuotaToOrgArgsForCall)
}

func (fake *FakeManager) AssignQuotaToOrgArgsForCall(i int) (string, string) {
	fake.assignQuotaToOrgMutex.RLock()
	defer fake.assignQuotaToOrgMutex.RUnlock()
	return fake.assignQuotaToOrgArgsForCall[i].orgGUID, fake.assignQuotaToOrgArgsForCall[i].quotaGUID
}

func (fake *FakeManager) AssignQuotaToOrgReturns(result1 error) {
	fake.AssignQuotaToOrgStub = nil
	fake.assignQuotaToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) GetCFUsers(entityGUID string, entityType string, role string) (map[string]string, error) {
	fake.getCFUsersMutex.Lock()
	fake.getCFUsersArgsForCall = append(fake.getCFUsersArgsForCall, struct {
		entityGUID string
		entityType string
		role       string
	}{entityGUID, entityType, role})
	fake.recordInvocation("GetCFUsers", []interface{}{entityGUID, entityType, role})
	fake.getCFUsersMutex.Unlock()
	if fake.GetCFUsersStub != nil {
		return fake.GetCFUsersStub(entityGUID, entityType, role)
	} else {
		return fake.getCFUsersReturns.result1, fake.getCFUsersReturns.result2
	}
}

func (fake *FakeManager) GetCFUsersCallCount() int {
	fake.getCFUsersMutex.RLock()
	defer fake.getCFUsersMutex.RUnlock()
	return len(fake.getCFUsersArgsForCall)
}

func (fake *FakeManager) GetCFUsersArgsForCall(i int) (string, string, string) {
	fake.getCFUsersMutex.RLock()
	defer fake.getCFUsersMutex.RUnlock()
	return fake.getCFUsersArgsForCall[i].entityGUID, fake.getCFUsersArgsForCall[i].entityType, fake.getCFUsersArgsForCall[i].role
}

func (fake *FakeManager) GetCFUsersReturns(result1 map[string]string, result2 error) {
	fake.GetCFUsersStub = nil
	fake.getCFUsersReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) RemoveCFUserByUserName(entityGUID string, entityType string, userName string, role string) error {
	fake.removeCFUserByUserNameMutex.Lock()
	fake.removeCFUserByUserNameArgsForCall = append(fake.removeCFUserByUserNameArgsForCall, struct {
		entityGUID string
		entityType string
		userName   string
		role       string
	}{entityGUID, entityType, userName, role})
	fake.recordInvocation("RemoveCFUserByUserName", []interface{}{entityGUID, entityType, userName, role})
	fake.removeCFUserByUserNameMutex.Unlock()
	if fake.RemoveCFUserByUserNameStub != nil {
		return fake.RemoveCFUserByUserNameStub(entityGUID, entityType, userName, role)
	} else {
		return fake.removeCFUserByUserNameReturns.result1
	}
}

func (fake *FakeManager) RemoveCFUserByUserNameCallCount() int {
	fake.removeCFUserByUserNameMutex.RLock()
	defer fake.removeCFUserByUserNameMutex.RUnlock()
	return len(fake.removeCFUserByUserNameArgsForCall)
}

func (fake *FakeManager) RemoveCFUserByUserNameArgsForCall(i int) (string, string, string, string) {
	fake.removeCFUserByUserNameMutex.RLock()
	defer fake.removeCFUserByUserNameMutex.RUnlock()
	return fake.removeCFUserByUserNameArgsForCall[i].entityGUID, fake.removeCFUserByUserNameArgsForCall[i].entityType, fake.removeCFUserByUserNameArgsForCall[i].userName, fake.removeCFUserByUserNameArgsForCall[i].role
}

func (fake *FakeManager) RemoveCFUserByUserNameReturns(result1 error) {
	fake.RemoveCFUserByUserNameStub = nil
	fake.removeCFUserByUserNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) OrgQuotaByName(name string) (go_cfclient.OrgQuota, error) {
	fake.orgQuotaByNameMutex.Lock()
	fake.orgQuotaByNameArgsForCall = append(fake.orgQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("OrgQuotaByName", []interface{}{name})
	fake.orgQuotaByNameMutex.Unlock()
	if fake.OrgQuotaByNameStub != nil {
		return fake.OrgQuotaByNameStub(name)
	} else {
		return fake.orgQuotaByNameReturns.result1, fake.orgQuotaByNameReturns.result2
	}
}

func (fake *FakeManager) OrgQuotaByNameCallCount() int {
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return len(fake.orgQuotaByNameArgsForCall)
}

func (fake *FakeManager) OrgQuotaByNameArgsForCall(i int) string {
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return fake.orgQuotaByNameArgsForCall[i].name
}

func (fake *FakeManager) OrgQuotaByNameReturns(result1 go_cfclient.OrgQuota, result2 error) {
	fake.OrgQuotaByNameStub = nil
	fake.orgQuotaByNameReturns = struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) SpaceQuotaByName(name string) (go_cfclient.SpaceQuota, error) {
	fake.spaceQuotaByNameMutex.Lock()
	fake.spaceQuotaByNameArgsForCall = append(fake.spaceQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("SpaceQuotaByName", []interface{}{name})
	fake.spaceQuotaByNameMutex.Unlock()
	if fake.SpaceQuotaByNameStub != nil {
		return fake.SpaceQuotaByNameStub(name)
	} else {
		return fake.spaceQuotaByNameReturns.result1, fake.spaceQuotaByNameReturns.result2
	}
}

func (fake *FakeManager) SpaceQuotaByNameCallCount() int {
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return len(fake.spaceQuotaByNameArgsForCall)
}

func (fake *FakeManager) SpaceQuotaByNameArgsForCall(i int) string {
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return fake.spaceQuotaByNameArgsForCall[i].name
}

func (fake *FakeManager) SpaceQuotaByNameReturns(result1 go_cfclient.SpaceQuota, result2 error) {
	fake.SpaceQuotaByNameStub = nil
	fake.spaceQuotaByNameReturns = struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListAllPrivateDomains() (map[string]cloudcontroller.PrivateDomainInfo, error) {
	fake.listAllPrivateDomainsMutex.Lock()
	fake.listAllPrivateDomainsArgsForCall = append(fake.listAllPrivateDomainsArgsForCall, struct{}{})
	fake.recordInvocation("ListAllPrivateDomains", []interface{}{})
	fake.listAllPrivateDomainsMutex.Unlock()
	if fake.ListAllPrivateDomainsStub != nil {
		return fake.ListAllPrivateDomainsStub()
	} else {
		return fake.listAllPrivateDomainsReturns.result1, fake.listAllPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListAllPrivateDomainsCallCount() int {
	fake.listAllPrivateDomainsMutex.RLock()
	defer fake.listAllPrivateDomainsMutex.RUnlock()
	return len(fake.listAllPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListAllPrivateDomainsReturns(result1 map[string]cloudcontroller.PrivateDomainInfo, result2 error) {
	fake.ListAllPrivateDomainsStub = nil
	fake.listAllPrivateDomainsReturns = struct {
		result1 map[string]cloudcontroller.PrivateDomainInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgOwnedPrivateDomains(orgGUID string) (map[string]string, error) {
	fake.listOrgOwnedPrivateDomainsMutex.Lock()
	fake.listOrgOwnedPrivateDomainsArgsForCall = append(fake.listOrgOwnedPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgOwnedPrivateDomains", []interface{}{orgGUID})
	fake.listOrgOwnedPrivateDomainsMutex.Unlock()
	if fake.ListOrgOwnedPrivateDomainsStub != nil {
		return fake.ListOrgOwnedPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgOwnedPrivateDomainsReturns.result1, fake.listOrgOwnedPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsCallCount() int {
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgOwnedPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsArgsForCall(i int) string {
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	return fake.listOrgOwnedPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsReturns(result1 map[string]string, result2 error) {
	fake.ListOrgOwnedPrivateDomainsStub = nil
	fake.listOrgOwnedPrivateDomainsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgSharedPrivateDomains(orgGUID string) (map[string]string, error) {
	fake.listOrgSharedPrivateDomainsMutex.Lock()
	fake.listOrgSharedPrivateDomainsArgsForCall = append(fake.listOrgSharedPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgSharedPrivateDomains", []interface{}{orgGUID})
	fake.listOrgSharedPrivateDomainsMutex.Unlock()
	if fake.ListOrgSharedPrivateDomainsStub != nil {
		return fake.ListOrgSharedPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgSharedPrivateDomainsReturns.result1, fake.listOrgSharedPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsCallCount() int {
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgSharedPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsArgsForCall(i int) string {
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	return fake.listOrgSharedPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsReturns(result1 map[string]string, result2 error) {
	fake.ListOrgSharedPrivateDomainsStub = nil
	fake.listOrgSharedPrivateDomainsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) DeletePrivateDomain(guid string) error {
	fake.deletePrivateDomainMutex.Lock()
	fake.deletePrivateDomainArgsForCall = append(fake.deletePrivateDomainArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("DeletePrivateDomain", []interface{}{guid})
	fake.deletePrivateDomainMutex.Unlock()
	if fake.DeletePrivateDomainStub != nil {
		return fake.DeletePrivateDomainStub(guid)
	} else {
		return fake.deletePrivateDomainReturns.result1
	}
}

func (fake *FakeManager) DeletePrivateDomainCallCount() int {
	fake.deletePrivateDomainMutex.RLock()
	defer fake.deletePrivateDomainMutex.RUnlock()
	return len(fake.deletePrivateDomainArgsForCall)
}

func (fake *FakeManager) DeletePrivateDomainArgsForCall(i int) string {
	fake.deletePrivateDomainMutex.RLock()
	defer fake.deletePrivateDomainMutex.RUnlock()
	return fake.deletePrivateDomainArgsForCall[i].guid
}

func (fake *FakeManager) DeletePrivateDomainReturns(result1 error) {
	fake.DeletePrivateDomainStub = nil
	fake.deletePrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreatePrivateDomain(orgGUID string, privateDomain string) (string, error) {
	fake.createPrivateDomainMutex.Lock()
	fake.createPrivateDomainArgsForCall = append(fake.createPrivateDomainArgsForCall, struct {
		orgGUID       string
		privateDomain string
	}{orgGUID, privateDomain})
	fake.recordInvocation("CreatePrivateDomain", []interface{}{orgGUID, privateDomain})
	fake.createPrivateDomainMutex.Unlock()
	if fake.CreatePrivateDomainStub != nil {
		return fake.CreatePrivateDomainStub(orgGUID, privateDomain)
	} else {
		return fake.createPrivateDomainReturns.result1, fake.createPrivateDomainReturns.result2
	}
}

func (fake *FakeManager) CreatePrivateDomainCallCount() int {
	fake.createPrivateDomainMutex.RLock()
	defer fake.createPrivateDomainMutex.RUnlock()
	return len(fake.createPrivateDomainArgsForCall)
}

func (fake *FakeManager) CreatePrivateDomainArgsForCall(i int) (string, string) {
	fake.createPrivateDomainMutex.RLock()
	defer fake.createPrivateDomainMutex.RUnlock()
	return fake.createPrivateDomainArgsForCall[i].orgGUID, fake.createPrivateDomainArgsForCall[i].privateDomain
}

func (fake *FakeManager) CreatePrivateDomainReturns(result1 string, result2 error) {
	fake.CreatePrivateDomainStub = nil
	fake.createPrivateDomainReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) SharePrivateDomain(sharedOrgGUID string, privateDomainGUID string) error {
	fake.sharePrivateDomainMutex.Lock()
	fake.sharePrivateDomainArgsForCall = append(fake.sharePrivateDomainArgsForCall, struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}{sharedOrgGUID, privateDomainGUID})
	fake.recordInvocation("SharePrivateDomain", []interface{}{sharedOrgGUID, privateDomainGUID})
	fake.sharePrivateDomainMutex.Unlock()
	if fake.SharePrivateDomainStub != nil {
		return fake.SharePrivateDomainStub(sharedOrgGUID, privateDomainGUID)
	} else {
		return fake.sharePrivateDomainReturns.result1
	}
}

func (fake *FakeManager) SharePrivateDomainCallCount() int {
	fake.sharePrivateDomainMutex.RLock()
	defer fake.sharePrivateDomainMutex.RUnlock()
	return len(fake.sharePrivateDomainArgsForCall)
}

func (fake *FakeManager) SharePrivateDomainArgsForCall(i int) (string, string) {
	fake.sharePrivateDomainMutex.RLock()
	defer fake.sharePrivateDomainMutex.RUnlock()
	return fake.sharePrivateDomainArgsForCall[i].sharedOrgGUID, fake.sharePrivateDomainArgsForCall[i].privateDomainGUID
}

func (fake *FakeManager) SharePrivateDomainReturns(result1 error) {
	fake.SharePrivateDomainStub = nil
	fake.sharePrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RemoveSharedPrivateDomain(sharedOrgGUID string, privateDomainGUID string) error {
	fake.removeSharedPrivateDomainMutex.Lock()
	fake.removeSharedPrivateDomainArgsForCall = append(fake.removeSharedPrivateDomainArgsForCall, struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}{sharedOrgGUID, privateDomainGUID})
	fake.recordInvocation("RemoveSharedPrivateDomain", []interface{}{sharedOrgGUID, privateDomainGUID})
	fake.removeSharedPrivateDomainMutex.Unlock()
	if fake.RemoveSharedPrivateDomainStub != nil {
		return fake.RemoveSharedPrivateDomainStub(sharedOrgGUID, privateDomainGUID)
	} else {
		return fake.removeSharedPrivateDomainReturns.result1
	}
}

func (fake *FakeManager) RemoveSharedPrivateDomainCallCount() int {
	fake.removeSharedPrivateDomainMutex.RLock()
	defer fake.removeSharedPrivateDomainMutex.RUnlock()
	return len(fake.removeSharedPrivateDomainArgsForCall)
}

func (fake *FakeManager) RemoveSharedPrivateDomainArgsForCall(i int) (string, string) {
	fake.removeSharedPrivateDomainMutex.RLock()
	defer fake.removeSharedPrivateDomainMutex.RUnlock()
	return fake.removeSharedPrivateDomainArgsForCall[i].sharedOrgGUID, fake.removeSharedPrivateDomainArgsForCall[i].privateDomainGUID
}

func (fake *FakeManager) RemoveSharedPrivateDomainReturns(result1 error) {
	fake.RemoveSharedPrivateDomainStub = nil
	fake.removeSharedPrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.deleteOrgByNameMutex.RLock()
	defer fake.deleteOrgByNameMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	fake.addUserToOrgRoleMutex.RLock()
	defer fake.addUserToOrgRoleMutex.RUnlock()
	fake.addUserToOrgMutex.RLock()
	defer fake.addUserToOrgMutex.RUnlock()
	fake.listAllOrgQuotasMutex.RLock()
	defer fake.listAllOrgQuotasMutex.RUnlock()
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	fake.updateQuotaMutex.RLock()
	defer fake.updateQuotaMutex.RUnlock()
	fake.assignQuotaToOrgMutex.RLock()
	defer fake.assignQuotaToOrgMutex.RUnlock()
	fake.getCFUsersMutex.RLock()
	defer fake.getCFUsersMutex.RUnlock()
	fake.removeCFUserByUserNameMutex.RLock()
	defer fake.removeCFUserByUserNameMutex.RUnlock()
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	fake.listAllPrivateDomainsMutex.RLock()
	defer fake.listAllPrivateDomainsMutex.RUnlock()
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	fake.deletePrivateDomainMutex.RLock()
	defer fake.deletePrivateDomainMutex.RUnlock()
	fake.createPrivateDomainMutex.RLock()
	defer fake.createPrivateDomainMutex.RUnlock()
	fake.sharePrivateDomainMutex.RLock()
	defer fake.sharePrivateDomainMutex.RUnlock()
	fake.removeSharedPrivateDomainMutex.RLock()
	defer fake.removeSharedPrivateDomainMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudcontroller.Manager = new(FakeManager)
