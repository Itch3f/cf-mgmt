// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotalservices/cf-mgmt/cloudcontroller"
)

type FakeManager struct {
	CreateSpaceStub        func(spaceName, orgGUID string) error
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		spaceName string
		orgGUID   string
	}
	createSpaceReturns struct {
		result1 error
	}
	DeleteSpaceStub        func(spaceGUID string) error
	deleteSpaceMutex       sync.RWMutex
	deleteSpaceArgsForCall []struct {
		spaceGUID string
	}
	deleteSpaceReturns struct {
		result1 error
	}
	ListSpacesStub        func(orgGUID string) ([]*cloudcontroller.Space, error)
	listSpacesMutex       sync.RWMutex
	listSpacesArgsForCall []struct {
		orgGUID string
	}
	listSpacesReturns struct {
		result1 []*cloudcontroller.Space
		result2 error
	}
	ListSpaceSecurityGroupsStub        func(spaceGUID string) (map[string]string, error)
	listSpaceSecurityGroupsMutex       sync.RWMutex
	listSpaceSecurityGroupsArgsForCall []struct {
		spaceGUID string
	}
	listSpaceSecurityGroupsReturns struct {
		result1 map[string]string
		result2 error
	}
	AddUserToSpaceRoleStub        func(userName, role, spaceGUID string) error
	addUserToSpaceRoleMutex       sync.RWMutex
	addUserToSpaceRoleArgsForCall []struct {
		userName  string
		role      string
		spaceGUID string
	}
	addUserToSpaceRoleReturns struct {
		result1 error
	}
	UpdateSpaceSSHStub        func(sshAllowed bool, spaceGUID string) error
	updateSpaceSSHMutex       sync.RWMutex
	updateSpaceSSHArgsForCall []struct {
		sshAllowed bool
		spaceGUID  string
	}
	updateSpaceSSHReturns struct {
		result1 error
	}
	AssignRunningSecurityGroupStub        func(sgGUID string) error
	assignRunningSecurityGroupMutex       sync.RWMutex
	assignRunningSecurityGroupArgsForCall []struct {
		sgGUID string
	}
	assignRunningSecurityGroupReturns struct {
		result1 error
	}
	AssignStagingSecurityGroupStub        func(sgGUID string) error
	assignStagingSecurityGroupMutex       sync.RWMutex
	assignStagingSecurityGroupArgsForCall []struct {
		sgGUID string
	}
	assignStagingSecurityGroupReturns struct {
		result1 error
	}
	UnassignRunningSecurityGroupStub        func(sgGUID string) error
	unassignRunningSecurityGroupMutex       sync.RWMutex
	unassignRunningSecurityGroupArgsForCall []struct {
		sgGUID string
	}
	unassignRunningSecurityGroupReturns struct {
		result1 error
	}
	UnassignStagingSecurityGroupStub        func(sgGUID string) error
	unassignStagingSecurityGroupMutex       sync.RWMutex
	unassignStagingSecurityGroupArgsForCall []struct {
		sgGUID string
	}
	unassignStagingSecurityGroupReturns struct {
		result1 error
	}
	AssignSecurityGroupToSpaceStub        func(spaceGUID, sgGUID string) error
	assignSecurityGroupToSpaceMutex       sync.RWMutex
	assignSecurityGroupToSpaceArgsForCall []struct {
		spaceGUID string
		sgGUID    string
	}
	assignSecurityGroupToSpaceReturns struct {
		result1 error
	}
	ListNonDefaultSecurityGroupsStub        func() (map[string]cloudcontroller.SecurityGroupInfo, error)
	listNonDefaultSecurityGroupsMutex       sync.RWMutex
	listNonDefaultSecurityGroupsArgsForCall []struct{}
	listNonDefaultSecurityGroupsReturns     struct {
		result1 map[string]cloudcontroller.SecurityGroupInfo
		result2 error
	}
	ListDefaultSecurityGroupsStub        func() (map[string]cloudcontroller.SecurityGroupInfo, error)
	listDefaultSecurityGroupsMutex       sync.RWMutex
	listDefaultSecurityGroupsArgsForCall []struct{}
	listDefaultSecurityGroupsReturns     struct {
		result1 map[string]cloudcontroller.SecurityGroupInfo
		result2 error
	}
	ListSecurityGroupsStub        func() (map[string]cloudcontroller.SecurityGroupInfo, error)
	listSecurityGroupsMutex       sync.RWMutex
	listSecurityGroupsArgsForCall []struct{}
	listSecurityGroupsReturns     struct {
		result1 map[string]cloudcontroller.SecurityGroupInfo
		result2 error
	}
	CreateSecurityGroupStub        func(sgName, contents string) (string, error)
	createSecurityGroupMutex       sync.RWMutex
	createSecurityGroupArgsForCall []struct {
		sgName   string
		contents string
	}
	createSecurityGroupReturns struct {
		result1 string
		result2 error
	}
	UpdateSecurityGroupStub        func(sgGUID, sgName, contents string) error
	updateSecurityGroupMutex       sync.RWMutex
	updateSecurityGroupArgsForCall []struct {
		sgGUID   string
		sgName   string
		contents string
	}
	updateSecurityGroupReturns struct {
		result1 error
	}
	GetSecurityGroupRulesStub        func(sgGUID string) ([]byte, error)
	getSecurityGroupRulesMutex       sync.RWMutex
	getSecurityGroupRulesArgsForCall []struct {
		sgGUID string
	}
	getSecurityGroupRulesReturns struct {
		result1 []byte
		result2 error
	}
	CreateSpaceQuotaStub        func(quota cloudcontroller.SpaceQuotaEntity) (string, error)
	createSpaceQuotaMutex       sync.RWMutex
	createSpaceQuotaArgsForCall []struct {
		quota cloudcontroller.SpaceQuotaEntity
	}
	createSpaceQuotaReturns struct {
		result1 string
		result2 error
	}
	UpdateSpaceQuotaStub        func(quotaGUID string, quota cloudcontroller.SpaceQuotaEntity) error
	updateSpaceQuotaMutex       sync.RWMutex
	updateSpaceQuotaArgsForCall []struct {
		quotaGUID string
		quota     cloudcontroller.SpaceQuotaEntity
	}
	updateSpaceQuotaReturns struct {
		result1 error
	}
	ListAllSpaceQuotasForOrgStub        func(orgGUID string) (map[string]string, error)
	listAllSpaceQuotasForOrgMutex       sync.RWMutex
	listAllSpaceQuotasForOrgArgsForCall []struct {
		orgGUID string
	}
	listAllSpaceQuotasForOrgReturns struct {
		result1 map[string]string
		result2 error
	}
	AssignQuotaToSpaceStub        func(spaceGUID, quotaGUID string) error
	assignQuotaToSpaceMutex       sync.RWMutex
	assignQuotaToSpaceArgsForCall []struct {
		spaceGUID string
		quotaGUID string
	}
	assignQuotaToSpaceReturns struct {
		result1 error
	}
	CreateOrgStub        func(orgName string) error
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		orgName string
	}
	createOrgReturns struct {
		result1 error
	}
	DeleteOrgStub        func(orgGUID string) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		orgGUID string
	}
	deleteOrgReturns struct {
		result1 error
	}
	DeleteOrgByNameStub        func(orgName string) error
	deleteOrgByNameMutex       sync.RWMutex
	deleteOrgByNameArgsForCall []struct {
		orgName string
	}
	deleteOrgByNameReturns struct {
		result1 error
	}
	ListOrgsStub        func() ([]*cloudcontroller.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []*cloudcontroller.Org
		result2 error
	}
	AddUserToOrgRoleStub        func(userName, role, orgGUID string) error
	addUserToOrgRoleMutex       sync.RWMutex
	addUserToOrgRoleArgsForCall []struct {
		userName string
		role     string
		orgGUID  string
	}
	addUserToOrgRoleReturns struct {
		result1 error
	}
	AddUserToOrgStub        func(userName, orgGUID string) error
	addUserToOrgMutex       sync.RWMutex
	addUserToOrgArgsForCall []struct {
		userName string
		orgGUID  string
	}
	addUserToOrgReturns struct {
		result1 error
	}
	ListAllOrgQuotasStub        func() (quotas map[string]string, err error)
	listAllOrgQuotasMutex       sync.RWMutex
	listAllOrgQuotasArgsForCall []struct{}
	listAllOrgQuotasReturns     struct {
		result1 map[string]string
		result2 error
	}
	CreateQuotaStub        func(quota cloudcontroller.QuotaEntity) (string, error)
	createQuotaMutex       sync.RWMutex
	createQuotaArgsForCall []struct {
		quota cloudcontroller.QuotaEntity
	}
	createQuotaReturns struct {
		result1 string
		result2 error
	}
	UpdateQuotaStub        func(quotaGUID string, quota cloudcontroller.QuotaEntity) error
	updateQuotaMutex       sync.RWMutex
	updateQuotaArgsForCall []struct {
		quotaGUID string
		quota     cloudcontroller.QuotaEntity
	}
	updateQuotaReturns struct {
		result1 error
	}
	AssignQuotaToOrgStub        func(orgGUID, quotaGUID string) error
	assignQuotaToOrgMutex       sync.RWMutex
	assignQuotaToOrgArgsForCall []struct {
		orgGUID   string
		quotaGUID string
	}
	assignQuotaToOrgReturns struct {
		result1 error
	}
	GetCFUsersStub        func(entityGUID, entityType, role string) (map[string]string, error)
	getCFUsersMutex       sync.RWMutex
	getCFUsersArgsForCall []struct {
		entityGUID string
		entityType string
		role       string
	}
	getCFUsersReturns struct {
		result1 map[string]string
		result2 error
	}
	RemoveCFUserStub        func(entityGUID, entityType, userGUID, role string) error
	removeCFUserMutex       sync.RWMutex
	removeCFUserArgsForCall []struct {
		entityGUID string
		entityType string
		userGUID   string
		role       string
	}
	removeCFUserReturns struct {
		result1 error
	}
	QuotaDefStub        func(quotaDefGUID string, entityType string) (*cloudcontroller.Quota, error)
	quotaDefMutex       sync.RWMutex
	quotaDefArgsForCall []struct {
		quotaDefGUID string
		entityType   string
	}
	quotaDefReturns struct {
		result1 *cloudcontroller.Quota
		result2 error
	}
	ListAllPrivateDomainsStub        func() (map[string]cloudcontroller.PrivateDomainInfo, error)
	listAllPrivateDomainsMutex       sync.RWMutex
	listAllPrivateDomainsArgsForCall []struct{}
	listAllPrivateDomainsReturns     struct {
		result1 map[string]cloudcontroller.PrivateDomainInfo
		result2 error
	}
	ListOrgOwnedPrivateDomainsStub        func(orgGUID string) (map[string]string, error)
	listOrgOwnedPrivateDomainsMutex       sync.RWMutex
	listOrgOwnedPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgOwnedPrivateDomainsReturns struct {
		result1 map[string]string
		result2 error
	}
	ListOrgSharedPrivateDomainsStub        func(orgGUID string) (map[string]string, error)
	listOrgSharedPrivateDomainsMutex       sync.RWMutex
	listOrgSharedPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgSharedPrivateDomainsReturns struct {
		result1 map[string]string
		result2 error
	}
	DeletePrivateDomainStub        func(guid string) error
	deletePrivateDomainMutex       sync.RWMutex
	deletePrivateDomainArgsForCall []struct {
		guid string
	}
	deletePrivateDomainReturns struct {
		result1 error
	}
	CreatePrivateDomainStub        func(orgGUID, privateDomain string) (string, error)
	createPrivateDomainMutex       sync.RWMutex
	createPrivateDomainArgsForCall []struct {
		orgGUID       string
		privateDomain string
	}
	createPrivateDomainReturns struct {
		result1 string
		result2 error
	}
	SharePrivateDomainStub        func(sharedOrgGUID, privateDomainGUID string) error
	sharePrivateDomainMutex       sync.RWMutex
	sharePrivateDomainArgsForCall []struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}
	sharePrivateDomainReturns struct {
		result1 error
	}
	RemoveSharedPrivateDomainStub        func(sharedOrgGUID, privateDomainGUID string) error
	removeSharedPrivateDomainMutex       sync.RWMutex
	removeSharedPrivateDomainArgsForCall []struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}
	removeSharedPrivateDomainReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) CreateSpace(spaceName string, orgGUID string) error {
	fake.createSpaceMutex.Lock()
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		spaceName string
		orgGUID   string
	}{spaceName, orgGUID})
	fake.recordInvocation("CreateSpace", []interface{}{spaceName, orgGUID})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(spaceName, orgGUID)
	} else {
		return fake.createSpaceReturns.result1
	}
}

func (fake *FakeManager) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeManager) CreateSpaceArgsForCall(i int) (string, string) {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return fake.createSpaceArgsForCall[i].spaceName, fake.createSpaceArgsForCall[i].orgGUID
}

func (fake *FakeManager) CreateSpaceReturns(result1 error) {
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteSpace(spaceGUID string) error {
	fake.deleteSpaceMutex.Lock()
	fake.deleteSpaceArgsForCall = append(fake.deleteSpaceArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("DeleteSpace", []interface{}{spaceGUID})
	fake.deleteSpaceMutex.Unlock()
	if fake.DeleteSpaceStub != nil {
		return fake.DeleteSpaceStub(spaceGUID)
	} else {
		return fake.deleteSpaceReturns.result1
	}
}

func (fake *FakeManager) DeleteSpaceCallCount() int {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return len(fake.deleteSpaceArgsForCall)
}

func (fake *FakeManager) DeleteSpaceArgsForCall(i int) string {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return fake.deleteSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeManager) DeleteSpaceReturns(result1 error) {
	fake.DeleteSpaceStub = nil
	fake.deleteSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListSpaces(orgGUID string) ([]*cloudcontroller.Space, error) {
	fake.listSpacesMutex.Lock()
	fake.listSpacesArgsForCall = append(fake.listSpacesArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListSpaces", []interface{}{orgGUID})
	fake.listSpacesMutex.Unlock()
	if fake.ListSpacesStub != nil {
		return fake.ListSpacesStub(orgGUID)
	} else {
		return fake.listSpacesReturns.result1, fake.listSpacesReturns.result2
	}
}

func (fake *FakeManager) ListSpacesCallCount() int {
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	return len(fake.listSpacesArgsForCall)
}

func (fake *FakeManager) ListSpacesArgsForCall(i int) string {
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	return fake.listSpacesArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListSpacesReturns(result1 []*cloudcontroller.Space, result2 error) {
	fake.ListSpacesStub = nil
	fake.listSpacesReturns = struct {
		result1 []*cloudcontroller.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSpaceSecurityGroups(spaceGUID string) (map[string]string, error) {
	fake.listSpaceSecurityGroupsMutex.Lock()
	fake.listSpaceSecurityGroupsArgsForCall = append(fake.listSpaceSecurityGroupsArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListSpaceSecurityGroups", []interface{}{spaceGUID})
	fake.listSpaceSecurityGroupsMutex.Unlock()
	if fake.ListSpaceSecurityGroupsStub != nil {
		return fake.ListSpaceSecurityGroupsStub(spaceGUID)
	} else {
		return fake.listSpaceSecurityGroupsReturns.result1, fake.listSpaceSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListSpaceSecurityGroupsCallCount() int {
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	return len(fake.listSpaceSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListSpaceSecurityGroupsArgsForCall(i int) string {
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	return fake.listSpaceSecurityGroupsArgsForCall[i].spaceGUID
}

func (fake *FakeManager) ListSpaceSecurityGroupsReturns(result1 map[string]string, result2 error) {
	fake.ListSpaceSecurityGroupsStub = nil
	fake.listSpaceSecurityGroupsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AddUserToSpaceRole(userName string, role string, spaceGUID string) error {
	fake.addUserToSpaceRoleMutex.Lock()
	fake.addUserToSpaceRoleArgsForCall = append(fake.addUserToSpaceRoleArgsForCall, struct {
		userName  string
		role      string
		spaceGUID string
	}{userName, role, spaceGUID})
	fake.recordInvocation("AddUserToSpaceRole", []interface{}{userName, role, spaceGUID})
	fake.addUserToSpaceRoleMutex.Unlock()
	if fake.AddUserToSpaceRoleStub != nil {
		return fake.AddUserToSpaceRoleStub(userName, role, spaceGUID)
	} else {
		return fake.addUserToSpaceRoleReturns.result1
	}
}

func (fake *FakeManager) AddUserToSpaceRoleCallCount() int {
	fake.addUserToSpaceRoleMutex.RLock()
	defer fake.addUserToSpaceRoleMutex.RUnlock()
	return len(fake.addUserToSpaceRoleArgsForCall)
}

func (fake *FakeManager) AddUserToSpaceRoleArgsForCall(i int) (string, string, string) {
	fake.addUserToSpaceRoleMutex.RLock()
	defer fake.addUserToSpaceRoleMutex.RUnlock()
	return fake.addUserToSpaceRoleArgsForCall[i].userName, fake.addUserToSpaceRoleArgsForCall[i].role, fake.addUserToSpaceRoleArgsForCall[i].spaceGUID
}

func (fake *FakeManager) AddUserToSpaceRoleReturns(result1 error) {
	fake.AddUserToSpaceRoleStub = nil
	fake.addUserToSpaceRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UpdateSpaceSSH(sshAllowed bool, spaceGUID string) error {
	fake.updateSpaceSSHMutex.Lock()
	fake.updateSpaceSSHArgsForCall = append(fake.updateSpaceSSHArgsForCall, struct {
		sshAllowed bool
		spaceGUID  string
	}{sshAllowed, spaceGUID})
	fake.recordInvocation("UpdateSpaceSSH", []interface{}{sshAllowed, spaceGUID})
	fake.updateSpaceSSHMutex.Unlock()
	if fake.UpdateSpaceSSHStub != nil {
		return fake.UpdateSpaceSSHStub(sshAllowed, spaceGUID)
	} else {
		return fake.updateSpaceSSHReturns.result1
	}
}

func (fake *FakeManager) UpdateSpaceSSHCallCount() int {
	fake.updateSpaceSSHMutex.RLock()
	defer fake.updateSpaceSSHMutex.RUnlock()
	return len(fake.updateSpaceSSHArgsForCall)
}

func (fake *FakeManager) UpdateSpaceSSHArgsForCall(i int) (bool, string) {
	fake.updateSpaceSSHMutex.RLock()
	defer fake.updateSpaceSSHMutex.RUnlock()
	return fake.updateSpaceSSHArgsForCall[i].sshAllowed, fake.updateSpaceSSHArgsForCall[i].spaceGUID
}

func (fake *FakeManager) UpdateSpaceSSHReturns(result1 error) {
	fake.UpdateSpaceSSHStub = nil
	fake.updateSpaceSSHReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignRunningSecurityGroup(sgGUID string) error {
	fake.assignRunningSecurityGroupMutex.Lock()
	fake.assignRunningSecurityGroupArgsForCall = append(fake.assignRunningSecurityGroupArgsForCall, struct {
		sgGUID string
	}{sgGUID})
	fake.recordInvocation("AssignRunningSecurityGroup", []interface{}{sgGUID})
	fake.assignRunningSecurityGroupMutex.Unlock()
	if fake.AssignRunningSecurityGroupStub != nil {
		return fake.AssignRunningSecurityGroupStub(sgGUID)
	} else {
		return fake.assignRunningSecurityGroupReturns.result1
	}
}

func (fake *FakeManager) AssignRunningSecurityGroupCallCount() int {
	fake.assignRunningSecurityGroupMutex.RLock()
	defer fake.assignRunningSecurityGroupMutex.RUnlock()
	return len(fake.assignRunningSecurityGroupArgsForCall)
}

func (fake *FakeManager) AssignRunningSecurityGroupArgsForCall(i int) string {
	fake.assignRunningSecurityGroupMutex.RLock()
	defer fake.assignRunningSecurityGroupMutex.RUnlock()
	return fake.assignRunningSecurityGroupArgsForCall[i].sgGUID
}

func (fake *FakeManager) AssignRunningSecurityGroupReturns(result1 error) {
	fake.AssignRunningSecurityGroupStub = nil
	fake.assignRunningSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignStagingSecurityGroup(sgGUID string) error {
	fake.assignStagingSecurityGroupMutex.Lock()
	fake.assignStagingSecurityGroupArgsForCall = append(fake.assignStagingSecurityGroupArgsForCall, struct {
		sgGUID string
	}{sgGUID})
	fake.recordInvocation("AssignStagingSecurityGroup", []interface{}{sgGUID})
	fake.assignStagingSecurityGroupMutex.Unlock()
	if fake.AssignStagingSecurityGroupStub != nil {
		return fake.AssignStagingSecurityGroupStub(sgGUID)
	} else {
		return fake.assignStagingSecurityGroupReturns.result1
	}
}

func (fake *FakeManager) AssignStagingSecurityGroupCallCount() int {
	fake.assignStagingSecurityGroupMutex.RLock()
	defer fake.assignStagingSecurityGroupMutex.RUnlock()
	return len(fake.assignStagingSecurityGroupArgsForCall)
}

func (fake *FakeManager) AssignStagingSecurityGroupArgsForCall(i int) string {
	fake.assignStagingSecurityGroupMutex.RLock()
	defer fake.assignStagingSecurityGroupMutex.RUnlock()
	return fake.assignStagingSecurityGroupArgsForCall[i].sgGUID
}

func (fake *FakeManager) AssignStagingSecurityGroupReturns(result1 error) {
	fake.AssignStagingSecurityGroupStub = nil
	fake.assignStagingSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UnassignRunningSecurityGroup(sgGUID string) error {
	fake.unassignRunningSecurityGroupMutex.Lock()
	fake.unassignRunningSecurityGroupArgsForCall = append(fake.unassignRunningSecurityGroupArgsForCall, struct {
		sgGUID string
	}{sgGUID})
	fake.recordInvocation("UnassignRunningSecurityGroup", []interface{}{sgGUID})
	fake.unassignRunningSecurityGroupMutex.Unlock()
	if fake.UnassignRunningSecurityGroupStub != nil {
		return fake.UnassignRunningSecurityGroupStub(sgGUID)
	} else {
		return fake.unassignRunningSecurityGroupReturns.result1
	}
}

func (fake *FakeManager) UnassignRunningSecurityGroupCallCount() int {
	fake.unassignRunningSecurityGroupMutex.RLock()
	defer fake.unassignRunningSecurityGroupMutex.RUnlock()
	return len(fake.unassignRunningSecurityGroupArgsForCall)
}

func (fake *FakeManager) UnassignRunningSecurityGroupArgsForCall(i int) string {
	fake.unassignRunningSecurityGroupMutex.RLock()
	defer fake.unassignRunningSecurityGroupMutex.RUnlock()
	return fake.unassignRunningSecurityGroupArgsForCall[i].sgGUID
}

func (fake *FakeManager) UnassignRunningSecurityGroupReturns(result1 error) {
	fake.UnassignRunningSecurityGroupStub = nil
	fake.unassignRunningSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UnassignStagingSecurityGroup(sgGUID string) error {
	fake.unassignStagingSecurityGroupMutex.Lock()
	fake.unassignStagingSecurityGroupArgsForCall = append(fake.unassignStagingSecurityGroupArgsForCall, struct {
		sgGUID string
	}{sgGUID})
	fake.recordInvocation("UnassignStagingSecurityGroup", []interface{}{sgGUID})
	fake.unassignStagingSecurityGroupMutex.Unlock()
	if fake.UnassignStagingSecurityGroupStub != nil {
		return fake.UnassignStagingSecurityGroupStub(sgGUID)
	} else {
		return fake.unassignStagingSecurityGroupReturns.result1
	}
}

func (fake *FakeManager) UnassignStagingSecurityGroupCallCount() int {
	fake.unassignStagingSecurityGroupMutex.RLock()
	defer fake.unassignStagingSecurityGroupMutex.RUnlock()
	return len(fake.unassignStagingSecurityGroupArgsForCall)
}

func (fake *FakeManager) UnassignStagingSecurityGroupArgsForCall(i int) string {
	fake.unassignStagingSecurityGroupMutex.RLock()
	defer fake.unassignStagingSecurityGroupMutex.RUnlock()
	return fake.unassignStagingSecurityGroupArgsForCall[i].sgGUID
}

func (fake *FakeManager) UnassignStagingSecurityGroupReturns(result1 error) {
	fake.UnassignStagingSecurityGroupStub = nil
	fake.unassignStagingSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignSecurityGroupToSpace(spaceGUID string, sgGUID string) error {
	fake.assignSecurityGroupToSpaceMutex.Lock()
	fake.assignSecurityGroupToSpaceArgsForCall = append(fake.assignSecurityGroupToSpaceArgsForCall, struct {
		spaceGUID string
		sgGUID    string
	}{spaceGUID, sgGUID})
	fake.recordInvocation("AssignSecurityGroupToSpace", []interface{}{spaceGUID, sgGUID})
	fake.assignSecurityGroupToSpaceMutex.Unlock()
	if fake.AssignSecurityGroupToSpaceStub != nil {
		return fake.AssignSecurityGroupToSpaceStub(spaceGUID, sgGUID)
	} else {
		return fake.assignSecurityGroupToSpaceReturns.result1
	}
}

func (fake *FakeManager) AssignSecurityGroupToSpaceCallCount() int {
	fake.assignSecurityGroupToSpaceMutex.RLock()
	defer fake.assignSecurityGroupToSpaceMutex.RUnlock()
	return len(fake.assignSecurityGroupToSpaceArgsForCall)
}

func (fake *FakeManager) AssignSecurityGroupToSpaceArgsForCall(i int) (string, string) {
	fake.assignSecurityGroupToSpaceMutex.RLock()
	defer fake.assignSecurityGroupToSpaceMutex.RUnlock()
	return fake.assignSecurityGroupToSpaceArgsForCall[i].spaceGUID, fake.assignSecurityGroupToSpaceArgsForCall[i].sgGUID
}

func (fake *FakeManager) AssignSecurityGroupToSpaceReturns(result1 error) {
	fake.AssignSecurityGroupToSpaceStub = nil
	fake.assignSecurityGroupToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListNonDefaultSecurityGroups() (map[string]cloudcontroller.SecurityGroupInfo, error) {
	fake.listNonDefaultSecurityGroupsMutex.Lock()
	fake.listNonDefaultSecurityGroupsArgsForCall = append(fake.listNonDefaultSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListNonDefaultSecurityGroups", []interface{}{})
	fake.listNonDefaultSecurityGroupsMutex.Unlock()
	if fake.ListNonDefaultSecurityGroupsStub != nil {
		return fake.ListNonDefaultSecurityGroupsStub()
	} else {
		return fake.listNonDefaultSecurityGroupsReturns.result1, fake.listNonDefaultSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsCallCount() int {
	fake.listNonDefaultSecurityGroupsMutex.RLock()
	defer fake.listNonDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.listNonDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsReturns(result1 map[string]cloudcontroller.SecurityGroupInfo, result2 error) {
	fake.ListNonDefaultSecurityGroupsStub = nil
	fake.listNonDefaultSecurityGroupsReturns = struct {
		result1 map[string]cloudcontroller.SecurityGroupInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListDefaultSecurityGroups() (map[string]cloudcontroller.SecurityGroupInfo, error) {
	fake.listDefaultSecurityGroupsMutex.Lock()
	fake.listDefaultSecurityGroupsArgsForCall = append(fake.listDefaultSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListDefaultSecurityGroups", []interface{}{})
	fake.listDefaultSecurityGroupsMutex.Unlock()
	if fake.ListDefaultSecurityGroupsStub != nil {
		return fake.ListDefaultSecurityGroupsStub()
	} else {
		return fake.listDefaultSecurityGroupsReturns.result1, fake.listDefaultSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListDefaultSecurityGroupsCallCount() int {
	fake.listDefaultSecurityGroupsMutex.RLock()
	defer fake.listDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.listDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListDefaultSecurityGroupsReturns(result1 map[string]cloudcontroller.SecurityGroupInfo, result2 error) {
	fake.ListDefaultSecurityGroupsStub = nil
	fake.listDefaultSecurityGroupsReturns = struct {
		result1 map[string]cloudcontroller.SecurityGroupInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSecurityGroups() (map[string]cloudcontroller.SecurityGroupInfo, error) {
	fake.listSecurityGroupsMutex.Lock()
	fake.listSecurityGroupsArgsForCall = append(fake.listSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListSecurityGroups", []interface{}{})
	fake.listSecurityGroupsMutex.Unlock()
	if fake.ListSecurityGroupsStub != nil {
		return fake.ListSecurityGroupsStub()
	} else {
		return fake.listSecurityGroupsReturns.result1, fake.listSecurityGroupsReturns.result2
	}
}

func (fake *FakeManager) ListSecurityGroupsCallCount() int {
	fake.listSecurityGroupsMutex.RLock()
	defer fake.listSecurityGroupsMutex.RUnlock()
	return len(fake.listSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListSecurityGroupsReturns(result1 map[string]cloudcontroller.SecurityGroupInfo, result2 error) {
	fake.ListSecurityGroupsStub = nil
	fake.listSecurityGroupsReturns = struct {
		result1 map[string]cloudcontroller.SecurityGroupInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateSecurityGroup(sgName string, contents string) (string, error) {
	fake.createSecurityGroupMutex.Lock()
	fake.createSecurityGroupArgsForCall = append(fake.createSecurityGroupArgsForCall, struct {
		sgName   string
		contents string
	}{sgName, contents})
	fake.recordInvocation("CreateSecurityGroup", []interface{}{sgName, contents})
	fake.createSecurityGroupMutex.Unlock()
	if fake.CreateSecurityGroupStub != nil {
		return fake.CreateSecurityGroupStub(sgName, contents)
	} else {
		return fake.createSecurityGroupReturns.result1, fake.createSecurityGroupReturns.result2
	}
}

func (fake *FakeManager) CreateSecurityGroupCallCount() int {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	return len(fake.createSecurityGroupArgsForCall)
}

func (fake *FakeManager) CreateSecurityGroupArgsForCall(i int) (string, string) {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	return fake.createSecurityGroupArgsForCall[i].sgName, fake.createSecurityGroupArgsForCall[i].contents
}

func (fake *FakeManager) CreateSecurityGroupReturns(result1 string, result2 error) {
	fake.CreateSecurityGroupStub = nil
	fake.createSecurityGroupReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) UpdateSecurityGroup(sgGUID string, sgName string, contents string) error {
	fake.updateSecurityGroupMutex.Lock()
	fake.updateSecurityGroupArgsForCall = append(fake.updateSecurityGroupArgsForCall, struct {
		sgGUID   string
		sgName   string
		contents string
	}{sgGUID, sgName, contents})
	fake.recordInvocation("UpdateSecurityGroup", []interface{}{sgGUID, sgName, contents})
	fake.updateSecurityGroupMutex.Unlock()
	if fake.UpdateSecurityGroupStub != nil {
		return fake.UpdateSecurityGroupStub(sgGUID, sgName, contents)
	} else {
		return fake.updateSecurityGroupReturns.result1
	}
}

func (fake *FakeManager) UpdateSecurityGroupCallCount() int {
	fake.updateSecurityGroupMutex.RLock()
	defer fake.updateSecurityGroupMutex.RUnlock()
	return len(fake.updateSecurityGroupArgsForCall)
}

func (fake *FakeManager) UpdateSecurityGroupArgsForCall(i int) (string, string, string) {
	fake.updateSecurityGroupMutex.RLock()
	defer fake.updateSecurityGroupMutex.RUnlock()
	return fake.updateSecurityGroupArgsForCall[i].sgGUID, fake.updateSecurityGroupArgsForCall[i].sgName, fake.updateSecurityGroupArgsForCall[i].contents
}

func (fake *FakeManager) UpdateSecurityGroupReturns(result1 error) {
	fake.UpdateSecurityGroupStub = nil
	fake.updateSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) GetSecurityGroupRules(sgGUID string) ([]byte, error) {
	fake.getSecurityGroupRulesMutex.Lock()
	fake.getSecurityGroupRulesArgsForCall = append(fake.getSecurityGroupRulesArgsForCall, struct {
		sgGUID string
	}{sgGUID})
	fake.recordInvocation("GetSecurityGroupRules", []interface{}{sgGUID})
	fake.getSecurityGroupRulesMutex.Unlock()
	if fake.GetSecurityGroupRulesStub != nil {
		return fake.GetSecurityGroupRulesStub(sgGUID)
	} else {
		return fake.getSecurityGroupRulesReturns.result1, fake.getSecurityGroupRulesReturns.result2
	}
}

func (fake *FakeManager) GetSecurityGroupRulesCallCount() int {
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	return len(fake.getSecurityGroupRulesArgsForCall)
}

func (fake *FakeManager) GetSecurityGroupRulesArgsForCall(i int) string {
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	return fake.getSecurityGroupRulesArgsForCall[i].sgGUID
}

func (fake *FakeManager) GetSecurityGroupRulesReturns(result1 []byte, result2 error) {
	fake.GetSecurityGroupRulesStub = nil
	fake.getSecurityGroupRulesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateSpaceQuota(quota cloudcontroller.SpaceQuotaEntity) (string, error) {
	fake.createSpaceQuotaMutex.Lock()
	fake.createSpaceQuotaArgsForCall = append(fake.createSpaceQuotaArgsForCall, struct {
		quota cloudcontroller.SpaceQuotaEntity
	}{quota})
	fake.recordInvocation("CreateSpaceQuota", []interface{}{quota})
	fake.createSpaceQuotaMutex.Unlock()
	if fake.CreateSpaceQuotaStub != nil {
		return fake.CreateSpaceQuotaStub(quota)
	} else {
		return fake.createSpaceQuotaReturns.result1, fake.createSpaceQuotaReturns.result2
	}
}

func (fake *FakeManager) CreateSpaceQuotaCallCount() int {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return len(fake.createSpaceQuotaArgsForCall)
}

func (fake *FakeManager) CreateSpaceQuotaArgsForCall(i int) cloudcontroller.SpaceQuotaEntity {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return fake.createSpaceQuotaArgsForCall[i].quota
}

func (fake *FakeManager) CreateSpaceQuotaReturns(result1 string, result2 error) {
	fake.CreateSpaceQuotaStub = nil
	fake.createSpaceQuotaReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) UpdateSpaceQuota(quotaGUID string, quota cloudcontroller.SpaceQuotaEntity) error {
	fake.updateSpaceQuotaMutex.Lock()
	fake.updateSpaceQuotaArgsForCall = append(fake.updateSpaceQuotaArgsForCall, struct {
		quotaGUID string
		quota     cloudcontroller.SpaceQuotaEntity
	}{quotaGUID, quota})
	fake.recordInvocation("UpdateSpaceQuota", []interface{}{quotaGUID, quota})
	fake.updateSpaceQuotaMutex.Unlock()
	if fake.UpdateSpaceQuotaStub != nil {
		return fake.UpdateSpaceQuotaStub(quotaGUID, quota)
	} else {
		return fake.updateSpaceQuotaReturns.result1
	}
}

func (fake *FakeManager) UpdateSpaceQuotaCallCount() int {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return len(fake.updateSpaceQuotaArgsForCall)
}

func (fake *FakeManager) UpdateSpaceQuotaArgsForCall(i int) (string, cloudcontroller.SpaceQuotaEntity) {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return fake.updateSpaceQuotaArgsForCall[i].quotaGUID, fake.updateSpaceQuotaArgsForCall[i].quota
}

func (fake *FakeManager) UpdateSpaceQuotaReturns(result1 error) {
	fake.UpdateSpaceQuotaStub = nil
	fake.updateSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListAllSpaceQuotasForOrg(orgGUID string) (map[string]string, error) {
	fake.listAllSpaceQuotasForOrgMutex.Lock()
	fake.listAllSpaceQuotasForOrgArgsForCall = append(fake.listAllSpaceQuotasForOrgArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListAllSpaceQuotasForOrg", []interface{}{orgGUID})
	fake.listAllSpaceQuotasForOrgMutex.Unlock()
	if fake.ListAllSpaceQuotasForOrgStub != nil {
		return fake.ListAllSpaceQuotasForOrgStub(orgGUID)
	} else {
		return fake.listAllSpaceQuotasForOrgReturns.result1, fake.listAllSpaceQuotasForOrgReturns.result2
	}
}

func (fake *FakeManager) ListAllSpaceQuotasForOrgCallCount() int {
	fake.listAllSpaceQuotasForOrgMutex.RLock()
	defer fake.listAllSpaceQuotasForOrgMutex.RUnlock()
	return len(fake.listAllSpaceQuotasForOrgArgsForCall)
}

func (fake *FakeManager) ListAllSpaceQuotasForOrgArgsForCall(i int) string {
	fake.listAllSpaceQuotasForOrgMutex.RLock()
	defer fake.listAllSpaceQuotasForOrgMutex.RUnlock()
	return fake.listAllSpaceQuotasForOrgArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListAllSpaceQuotasForOrgReturns(result1 map[string]string, result2 error) {
	fake.ListAllSpaceQuotasForOrgStub = nil
	fake.listAllSpaceQuotasForOrgReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AssignQuotaToSpace(spaceGUID string, quotaGUID string) error {
	fake.assignQuotaToSpaceMutex.Lock()
	fake.assignQuotaToSpaceArgsForCall = append(fake.assignQuotaToSpaceArgsForCall, struct {
		spaceGUID string
		quotaGUID string
	}{spaceGUID, quotaGUID})
	fake.recordInvocation("AssignQuotaToSpace", []interface{}{spaceGUID, quotaGUID})
	fake.assignQuotaToSpaceMutex.Unlock()
	if fake.AssignQuotaToSpaceStub != nil {
		return fake.AssignQuotaToSpaceStub(spaceGUID, quotaGUID)
	} else {
		return fake.assignQuotaToSpaceReturns.result1
	}
}

func (fake *FakeManager) AssignQuotaToSpaceCallCount() int {
	fake.assignQuotaToSpaceMutex.RLock()
	defer fake.assignQuotaToSpaceMutex.RUnlock()
	return len(fake.assignQuotaToSpaceArgsForCall)
}

func (fake *FakeManager) AssignQuotaToSpaceArgsForCall(i int) (string, string) {
	fake.assignQuotaToSpaceMutex.RLock()
	defer fake.assignQuotaToSpaceMutex.RUnlock()
	return fake.assignQuotaToSpaceArgsForCall[i].spaceGUID, fake.assignQuotaToSpaceArgsForCall[i].quotaGUID
}

func (fake *FakeManager) AssignQuotaToSpaceReturns(result1 error) {
	fake.AssignQuotaToSpaceStub = nil
	fake.assignQuotaToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateOrg(orgName string) error {
	fake.createOrgMutex.Lock()
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("CreateOrg", []interface{}{orgName})
	fake.createOrgMutex.Unlock()
	if fake.CreateOrgStub != nil {
		return fake.CreateOrgStub(orgName)
	} else {
		return fake.createOrgReturns.result1
	}
}

func (fake *FakeManager) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeManager) CreateOrgArgsForCall(i int) string {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return fake.createOrgArgsForCall[i].orgName
}

func (fake *FakeManager) CreateOrgReturns(result1 error) {
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrg(orgGUID string) error {
	fake.deleteOrgMutex.Lock()
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("DeleteOrg", []interface{}{orgGUID})
	fake.deleteOrgMutex.Unlock()
	if fake.DeleteOrgStub != nil {
		return fake.DeleteOrgStub(orgGUID)
	} else {
		return fake.deleteOrgReturns.result1
	}
}

func (fake *FakeManager) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeManager) DeleteOrgArgsForCall(i int) string {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return fake.deleteOrgArgsForCall[i].orgGUID
}

func (fake *FakeManager) DeleteOrgReturns(result1 error) {
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrgByName(orgName string) error {
	fake.deleteOrgByNameMutex.Lock()
	fake.deleteOrgByNameArgsForCall = append(fake.deleteOrgByNameArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("DeleteOrgByName", []interface{}{orgName})
	fake.deleteOrgByNameMutex.Unlock()
	if fake.DeleteOrgByNameStub != nil {
		return fake.DeleteOrgByNameStub(orgName)
	} else {
		return fake.deleteOrgByNameReturns.result1
	}
}

func (fake *FakeManager) DeleteOrgByNameCallCount() int {
	fake.deleteOrgByNameMutex.RLock()
	defer fake.deleteOrgByNameMutex.RUnlock()
	return len(fake.deleteOrgByNameArgsForCall)
}

func (fake *FakeManager) DeleteOrgByNameArgsForCall(i int) string {
	fake.deleteOrgByNameMutex.RLock()
	defer fake.deleteOrgByNameMutex.RUnlock()
	return fake.deleteOrgByNameArgsForCall[i].orgName
}

func (fake *FakeManager) DeleteOrgByNameReturns(result1 error) {
	fake.DeleteOrgByNameStub = nil
	fake.deleteOrgByNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListOrgs() ([]*cloudcontroller.Org, error) {
	fake.listOrgsMutex.Lock()
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	} else {
		return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
	}
}

func (fake *FakeManager) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeManager) ListOrgsReturns(result1 []*cloudcontroller.Org, result2 error) {
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []*cloudcontroller.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AddUserToOrgRole(userName string, role string, orgGUID string) error {
	fake.addUserToOrgRoleMutex.Lock()
	fake.addUserToOrgRoleArgsForCall = append(fake.addUserToOrgRoleArgsForCall, struct {
		userName string
		role     string
		orgGUID  string
	}{userName, role, orgGUID})
	fake.recordInvocation("AddUserToOrgRole", []interface{}{userName, role, orgGUID})
	fake.addUserToOrgRoleMutex.Unlock()
	if fake.AddUserToOrgRoleStub != nil {
		return fake.AddUserToOrgRoleStub(userName, role, orgGUID)
	} else {
		return fake.addUserToOrgRoleReturns.result1
	}
}

func (fake *FakeManager) AddUserToOrgRoleCallCount() int {
	fake.addUserToOrgRoleMutex.RLock()
	defer fake.addUserToOrgRoleMutex.RUnlock()
	return len(fake.addUserToOrgRoleArgsForCall)
}

func (fake *FakeManager) AddUserToOrgRoleArgsForCall(i int) (string, string, string) {
	fake.addUserToOrgRoleMutex.RLock()
	defer fake.addUserToOrgRoleMutex.RUnlock()
	return fake.addUserToOrgRoleArgsForCall[i].userName, fake.addUserToOrgRoleArgsForCall[i].role, fake.addUserToOrgRoleArgsForCall[i].orgGUID
}

func (fake *FakeManager) AddUserToOrgRoleReturns(result1 error) {
	fake.AddUserToOrgRoleStub = nil
	fake.addUserToOrgRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddUserToOrg(userName string, orgGUID string) error {
	fake.addUserToOrgMutex.Lock()
	fake.addUserToOrgArgsForCall = append(fake.addUserToOrgArgsForCall, struct {
		userName string
		orgGUID  string
	}{userName, orgGUID})
	fake.recordInvocation("AddUserToOrg", []interface{}{userName, orgGUID})
	fake.addUserToOrgMutex.Unlock()
	if fake.AddUserToOrgStub != nil {
		return fake.AddUserToOrgStub(userName, orgGUID)
	} else {
		return fake.addUserToOrgReturns.result1
	}
}

func (fake *FakeManager) AddUserToOrgCallCount() int {
	fake.addUserToOrgMutex.RLock()
	defer fake.addUserToOrgMutex.RUnlock()
	return len(fake.addUserToOrgArgsForCall)
}

func (fake *FakeManager) AddUserToOrgArgsForCall(i int) (string, string) {
	fake.addUserToOrgMutex.RLock()
	defer fake.addUserToOrgMutex.RUnlock()
	return fake.addUserToOrgArgsForCall[i].userName, fake.addUserToOrgArgsForCall[i].orgGUID
}

func (fake *FakeManager) AddUserToOrgReturns(result1 error) {
	fake.AddUserToOrgStub = nil
	fake.addUserToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ListAllOrgQuotas() (quotas map[string]string, err error) {
	fake.listAllOrgQuotasMutex.Lock()
	fake.listAllOrgQuotasArgsForCall = append(fake.listAllOrgQuotasArgsForCall, struct{}{})
	fake.recordInvocation("ListAllOrgQuotas", []interface{}{})
	fake.listAllOrgQuotasMutex.Unlock()
	if fake.ListAllOrgQuotasStub != nil {
		return fake.ListAllOrgQuotasStub()
	} else {
		return fake.listAllOrgQuotasReturns.result1, fake.listAllOrgQuotasReturns.result2
	}
}

func (fake *FakeManager) ListAllOrgQuotasCallCount() int {
	fake.listAllOrgQuotasMutex.RLock()
	defer fake.listAllOrgQuotasMutex.RUnlock()
	return len(fake.listAllOrgQuotasArgsForCall)
}

func (fake *FakeManager) ListAllOrgQuotasReturns(result1 map[string]string, result2 error) {
	fake.ListAllOrgQuotasStub = nil
	fake.listAllOrgQuotasReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateQuota(quota cloudcontroller.QuotaEntity) (string, error) {
	fake.createQuotaMutex.Lock()
	fake.createQuotaArgsForCall = append(fake.createQuotaArgsForCall, struct {
		quota cloudcontroller.QuotaEntity
	}{quota})
	fake.recordInvocation("CreateQuota", []interface{}{quota})
	fake.createQuotaMutex.Unlock()
	if fake.CreateQuotaStub != nil {
		return fake.CreateQuotaStub(quota)
	} else {
		return fake.createQuotaReturns.result1, fake.createQuotaReturns.result2
	}
}

func (fake *FakeManager) CreateQuotaCallCount() int {
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	return len(fake.createQuotaArgsForCall)
}

func (fake *FakeManager) CreateQuotaArgsForCall(i int) cloudcontroller.QuotaEntity {
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	return fake.createQuotaArgsForCall[i].quota
}

func (fake *FakeManager) CreateQuotaReturns(result1 string, result2 error) {
	fake.CreateQuotaStub = nil
	fake.createQuotaReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) UpdateQuota(quotaGUID string, quota cloudcontroller.QuotaEntity) error {
	fake.updateQuotaMutex.Lock()
	fake.updateQuotaArgsForCall = append(fake.updateQuotaArgsForCall, struct {
		quotaGUID string
		quota     cloudcontroller.QuotaEntity
	}{quotaGUID, quota})
	fake.recordInvocation("UpdateQuota", []interface{}{quotaGUID, quota})
	fake.updateQuotaMutex.Unlock()
	if fake.UpdateQuotaStub != nil {
		return fake.UpdateQuotaStub(quotaGUID, quota)
	} else {
		return fake.updateQuotaReturns.result1
	}
}

func (fake *FakeManager) UpdateQuotaCallCount() int {
	fake.updateQuotaMutex.RLock()
	defer fake.updateQuotaMutex.RUnlock()
	return len(fake.updateQuotaArgsForCall)
}

func (fake *FakeManager) UpdateQuotaArgsForCall(i int) (string, cloudcontroller.QuotaEntity) {
	fake.updateQuotaMutex.RLock()
	defer fake.updateQuotaMutex.RUnlock()
	return fake.updateQuotaArgsForCall[i].quotaGUID, fake.updateQuotaArgsForCall[i].quota
}

func (fake *FakeManager) UpdateQuotaReturns(result1 error) {
	fake.UpdateQuotaStub = nil
	fake.updateQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignQuotaToOrg(orgGUID string, quotaGUID string) error {
	fake.assignQuotaToOrgMutex.Lock()
	fake.assignQuotaToOrgArgsForCall = append(fake.assignQuotaToOrgArgsForCall, struct {
		orgGUID   string
		quotaGUID string
	}{orgGUID, quotaGUID})
	fake.recordInvocation("AssignQuotaToOrg", []interface{}{orgGUID, quotaGUID})
	fake.assignQuotaToOrgMutex.Unlock()
	if fake.AssignQuotaToOrgStub != nil {
		return fake.AssignQuotaToOrgStub(orgGUID, quotaGUID)
	} else {
		return fake.assignQuotaToOrgReturns.result1
	}
}

func (fake *FakeManager) AssignQuotaToOrgCallCount() int {
	fake.assignQuotaToOrgMutex.RLock()
	defer fake.assignQuotaToOrgMutex.RUnlock()
	return len(fake.assignQuotaToOrgArgsForCall)
}

func (fake *FakeManager) AssignQuotaToOrgArgsForCall(i int) (string, string) {
	fake.assignQuotaToOrgMutex.RLock()
	defer fake.assignQuotaToOrgMutex.RUnlock()
	return fake.assignQuotaToOrgArgsForCall[i].orgGUID, fake.assignQuotaToOrgArgsForCall[i].quotaGUID
}

func (fake *FakeManager) AssignQuotaToOrgReturns(result1 error) {
	fake.AssignQuotaToOrgStub = nil
	fake.assignQuotaToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) GetCFUsers(entityGUID string, entityType string, role string) (map[string]string, error) {
	fake.getCFUsersMutex.Lock()
	fake.getCFUsersArgsForCall = append(fake.getCFUsersArgsForCall, struct {
		entityGUID string
		entityType string
		role       string
	}{entityGUID, entityType, role})
	fake.recordInvocation("GetCFUsers", []interface{}{entityGUID, entityType, role})
	fake.getCFUsersMutex.Unlock()
	if fake.GetCFUsersStub != nil {
		return fake.GetCFUsersStub(entityGUID, entityType, role)
	} else {
		return fake.getCFUsersReturns.result1, fake.getCFUsersReturns.result2
	}
}

func (fake *FakeManager) GetCFUsersCallCount() int {
	fake.getCFUsersMutex.RLock()
	defer fake.getCFUsersMutex.RUnlock()
	return len(fake.getCFUsersArgsForCall)
}

func (fake *FakeManager) GetCFUsersArgsForCall(i int) (string, string, string) {
	fake.getCFUsersMutex.RLock()
	defer fake.getCFUsersMutex.RUnlock()
	return fake.getCFUsersArgsForCall[i].entityGUID, fake.getCFUsersArgsForCall[i].entityType, fake.getCFUsersArgsForCall[i].role
}

func (fake *FakeManager) GetCFUsersReturns(result1 map[string]string, result2 error) {
	fake.GetCFUsersStub = nil
	fake.getCFUsersReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) RemoveCFUser(entityGUID string, entityType string, userGUID string, role string) error {
	fake.removeCFUserMutex.Lock()
	fake.removeCFUserArgsForCall = append(fake.removeCFUserArgsForCall, struct {
		entityGUID string
		entityType string
		userGUID   string
		role       string
	}{entityGUID, entityType, userGUID, role})
	fake.recordInvocation("RemoveCFUser", []interface{}{entityGUID, entityType, userGUID, role})
	fake.removeCFUserMutex.Unlock()
	if fake.RemoveCFUserStub != nil {
		return fake.RemoveCFUserStub(entityGUID, entityType, userGUID, role)
	} else {
		return fake.removeCFUserReturns.result1
	}
}

func (fake *FakeManager) RemoveCFUserCallCount() int {
	fake.removeCFUserMutex.RLock()
	defer fake.removeCFUserMutex.RUnlock()
	return len(fake.removeCFUserArgsForCall)
}

func (fake *FakeManager) RemoveCFUserArgsForCall(i int) (string, string, string, string) {
	fake.removeCFUserMutex.RLock()
	defer fake.removeCFUserMutex.RUnlock()
	return fake.removeCFUserArgsForCall[i].entityGUID, fake.removeCFUserArgsForCall[i].entityType, fake.removeCFUserArgsForCall[i].userGUID, fake.removeCFUserArgsForCall[i].role
}

func (fake *FakeManager) RemoveCFUserReturns(result1 error) {
	fake.RemoveCFUserStub = nil
	fake.removeCFUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) QuotaDef(quotaDefGUID string, entityType string) (*cloudcontroller.Quota, error) {
	fake.quotaDefMutex.Lock()
	fake.quotaDefArgsForCall = append(fake.quotaDefArgsForCall, struct {
		quotaDefGUID string
		entityType   string
	}{quotaDefGUID, entityType})
	fake.recordInvocation("QuotaDef", []interface{}{quotaDefGUID, entityType})
	fake.quotaDefMutex.Unlock()
	if fake.QuotaDefStub != nil {
		return fake.QuotaDefStub(quotaDefGUID, entityType)
	} else {
		return fake.quotaDefReturns.result1, fake.quotaDefReturns.result2
	}
}

func (fake *FakeManager) QuotaDefCallCount() int {
	fake.quotaDefMutex.RLock()
	defer fake.quotaDefMutex.RUnlock()
	return len(fake.quotaDefArgsForCall)
}

func (fake *FakeManager) QuotaDefArgsForCall(i int) (string, string) {
	fake.quotaDefMutex.RLock()
	defer fake.quotaDefMutex.RUnlock()
	return fake.quotaDefArgsForCall[i].quotaDefGUID, fake.quotaDefArgsForCall[i].entityType
}

func (fake *FakeManager) QuotaDefReturns(result1 *cloudcontroller.Quota, result2 error) {
	fake.QuotaDefStub = nil
	fake.quotaDefReturns = struct {
		result1 *cloudcontroller.Quota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListAllPrivateDomains() (map[string]cloudcontroller.PrivateDomainInfo, error) {
	fake.listAllPrivateDomainsMutex.Lock()
	fake.listAllPrivateDomainsArgsForCall = append(fake.listAllPrivateDomainsArgsForCall, struct{}{})
	fake.recordInvocation("ListAllPrivateDomains", []interface{}{})
	fake.listAllPrivateDomainsMutex.Unlock()
	if fake.ListAllPrivateDomainsStub != nil {
		return fake.ListAllPrivateDomainsStub()
	} else {
		return fake.listAllPrivateDomainsReturns.result1, fake.listAllPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListAllPrivateDomainsCallCount() int {
	fake.listAllPrivateDomainsMutex.RLock()
	defer fake.listAllPrivateDomainsMutex.RUnlock()
	return len(fake.listAllPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListAllPrivateDomainsReturns(result1 map[string]cloudcontroller.PrivateDomainInfo, result2 error) {
	fake.ListAllPrivateDomainsStub = nil
	fake.listAllPrivateDomainsReturns = struct {
		result1 map[string]cloudcontroller.PrivateDomainInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgOwnedPrivateDomains(orgGUID string) (map[string]string, error) {
	fake.listOrgOwnedPrivateDomainsMutex.Lock()
	fake.listOrgOwnedPrivateDomainsArgsForCall = append(fake.listOrgOwnedPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgOwnedPrivateDomains", []interface{}{orgGUID})
	fake.listOrgOwnedPrivateDomainsMutex.Unlock()
	if fake.ListOrgOwnedPrivateDomainsStub != nil {
		return fake.ListOrgOwnedPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgOwnedPrivateDomainsReturns.result1, fake.listOrgOwnedPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsCallCount() int {
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgOwnedPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsArgsForCall(i int) string {
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	return fake.listOrgOwnedPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsReturns(result1 map[string]string, result2 error) {
	fake.ListOrgOwnedPrivateDomainsStub = nil
	fake.listOrgOwnedPrivateDomainsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgSharedPrivateDomains(orgGUID string) (map[string]string, error) {
	fake.listOrgSharedPrivateDomainsMutex.Lock()
	fake.listOrgSharedPrivateDomainsArgsForCall = append(fake.listOrgSharedPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgSharedPrivateDomains", []interface{}{orgGUID})
	fake.listOrgSharedPrivateDomainsMutex.Unlock()
	if fake.ListOrgSharedPrivateDomainsStub != nil {
		return fake.ListOrgSharedPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgSharedPrivateDomainsReturns.result1, fake.listOrgSharedPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsCallCount() int {
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgSharedPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsArgsForCall(i int) string {
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	return fake.listOrgSharedPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsReturns(result1 map[string]string, result2 error) {
	fake.ListOrgSharedPrivateDomainsStub = nil
	fake.listOrgSharedPrivateDomainsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) DeletePrivateDomain(guid string) error {
	fake.deletePrivateDomainMutex.Lock()
	fake.deletePrivateDomainArgsForCall = append(fake.deletePrivateDomainArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("DeletePrivateDomain", []interface{}{guid})
	fake.deletePrivateDomainMutex.Unlock()
	if fake.DeletePrivateDomainStub != nil {
		return fake.DeletePrivateDomainStub(guid)
	} else {
		return fake.deletePrivateDomainReturns.result1
	}
}

func (fake *FakeManager) DeletePrivateDomainCallCount() int {
	fake.deletePrivateDomainMutex.RLock()
	defer fake.deletePrivateDomainMutex.RUnlock()
	return len(fake.deletePrivateDomainArgsForCall)
}

func (fake *FakeManager) DeletePrivateDomainArgsForCall(i int) string {
	fake.deletePrivateDomainMutex.RLock()
	defer fake.deletePrivateDomainMutex.RUnlock()
	return fake.deletePrivateDomainArgsForCall[i].guid
}

func (fake *FakeManager) DeletePrivateDomainReturns(result1 error) {
	fake.DeletePrivateDomainStub = nil
	fake.deletePrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreatePrivateDomain(orgGUID string, privateDomain string) (string, error) {
	fake.createPrivateDomainMutex.Lock()
	fake.createPrivateDomainArgsForCall = append(fake.createPrivateDomainArgsForCall, struct {
		orgGUID       string
		privateDomain string
	}{orgGUID, privateDomain})
	fake.recordInvocation("CreatePrivateDomain", []interface{}{orgGUID, privateDomain})
	fake.createPrivateDomainMutex.Unlock()
	if fake.CreatePrivateDomainStub != nil {
		return fake.CreatePrivateDomainStub(orgGUID, privateDomain)
	} else {
		return fake.createPrivateDomainReturns.result1, fake.createPrivateDomainReturns.result2
	}
}

func (fake *FakeManager) CreatePrivateDomainCallCount() int {
	fake.createPrivateDomainMutex.RLock()
	defer fake.createPrivateDomainMutex.RUnlock()
	return len(fake.createPrivateDomainArgsForCall)
}

func (fake *FakeManager) CreatePrivateDomainArgsForCall(i int) (string, string) {
	fake.createPrivateDomainMutex.RLock()
	defer fake.createPrivateDomainMutex.RUnlock()
	return fake.createPrivateDomainArgsForCall[i].orgGUID, fake.createPrivateDomainArgsForCall[i].privateDomain
}

func (fake *FakeManager) CreatePrivateDomainReturns(result1 string, result2 error) {
	fake.CreatePrivateDomainStub = nil
	fake.createPrivateDomainReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) SharePrivateDomain(sharedOrgGUID string, privateDomainGUID string) error {
	fake.sharePrivateDomainMutex.Lock()
	fake.sharePrivateDomainArgsForCall = append(fake.sharePrivateDomainArgsForCall, struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}{sharedOrgGUID, privateDomainGUID})
	fake.recordInvocation("SharePrivateDomain", []interface{}{sharedOrgGUID, privateDomainGUID})
	fake.sharePrivateDomainMutex.Unlock()
	if fake.SharePrivateDomainStub != nil {
		return fake.SharePrivateDomainStub(sharedOrgGUID, privateDomainGUID)
	} else {
		return fake.sharePrivateDomainReturns.result1
	}
}

func (fake *FakeManager) SharePrivateDomainCallCount() int {
	fake.sharePrivateDomainMutex.RLock()
	defer fake.sharePrivateDomainMutex.RUnlock()
	return len(fake.sharePrivateDomainArgsForCall)
}

func (fake *FakeManager) SharePrivateDomainArgsForCall(i int) (string, string) {
	fake.sharePrivateDomainMutex.RLock()
	defer fake.sharePrivateDomainMutex.RUnlock()
	return fake.sharePrivateDomainArgsForCall[i].sharedOrgGUID, fake.sharePrivateDomainArgsForCall[i].privateDomainGUID
}

func (fake *FakeManager) SharePrivateDomainReturns(result1 error) {
	fake.SharePrivateDomainStub = nil
	fake.sharePrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RemoveSharedPrivateDomain(sharedOrgGUID string, privateDomainGUID string) error {
	fake.removeSharedPrivateDomainMutex.Lock()
	fake.removeSharedPrivateDomainArgsForCall = append(fake.removeSharedPrivateDomainArgsForCall, struct {
		sharedOrgGUID     string
		privateDomainGUID string
	}{sharedOrgGUID, privateDomainGUID})
	fake.recordInvocation("RemoveSharedPrivateDomain", []interface{}{sharedOrgGUID, privateDomainGUID})
	fake.removeSharedPrivateDomainMutex.Unlock()
	if fake.RemoveSharedPrivateDomainStub != nil {
		return fake.RemoveSharedPrivateDomainStub(sharedOrgGUID, privateDomainGUID)
	} else {
		return fake.removeSharedPrivateDomainReturns.result1
	}
}

func (fake *FakeManager) RemoveSharedPrivateDomainCallCount() int {
	fake.removeSharedPrivateDomainMutex.RLock()
	defer fake.removeSharedPrivateDomainMutex.RUnlock()
	return len(fake.removeSharedPrivateDomainArgsForCall)
}

func (fake *FakeManager) RemoveSharedPrivateDomainArgsForCall(i int) (string, string) {
	fake.removeSharedPrivateDomainMutex.RLock()
	defer fake.removeSharedPrivateDomainMutex.RUnlock()
	return fake.removeSharedPrivateDomainArgsForCall[i].sharedOrgGUID, fake.removeSharedPrivateDomainArgsForCall[i].privateDomainGUID
}

func (fake *FakeManager) RemoveSharedPrivateDomainReturns(result1 error) {
	fake.RemoveSharedPrivateDomainStub = nil
	fake.removeSharedPrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	fake.addUserToSpaceRoleMutex.RLock()
	defer fake.addUserToSpaceRoleMutex.RUnlock()
	fake.updateSpaceSSHMutex.RLock()
	defer fake.updateSpaceSSHMutex.RUnlock()
	fake.assignRunningSecurityGroupMutex.RLock()
	defer fake.assignRunningSecurityGroupMutex.RUnlock()
	fake.assignStagingSecurityGroupMutex.RLock()
	defer fake.assignStagingSecurityGroupMutex.RUnlock()
	fake.unassignRunningSecurityGroupMutex.RLock()
	defer fake.unassignRunningSecurityGroupMutex.RUnlock()
	fake.unassignStagingSecurityGroupMutex.RLock()
	defer fake.unassignStagingSecurityGroupMutex.RUnlock()
	fake.assignSecurityGroupToSpaceMutex.RLock()
	defer fake.assignSecurityGroupToSpaceMutex.RUnlock()
	fake.listNonDefaultSecurityGroupsMutex.RLock()
	defer fake.listNonDefaultSecurityGroupsMutex.RUnlock()
	fake.listDefaultSecurityGroupsMutex.RLock()
	defer fake.listDefaultSecurityGroupsMutex.RUnlock()
	fake.listSecurityGroupsMutex.RLock()
	defer fake.listSecurityGroupsMutex.RUnlock()
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	fake.updateSecurityGroupMutex.RLock()
	defer fake.updateSecurityGroupMutex.RUnlock()
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	fake.listAllSpaceQuotasForOrgMutex.RLock()
	defer fake.listAllSpaceQuotasForOrgMutex.RUnlock()
	fake.assignQuotaToSpaceMutex.RLock()
	defer fake.assignQuotaToSpaceMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.deleteOrgByNameMutex.RLock()
	defer fake.deleteOrgByNameMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.addUserToOrgRoleMutex.RLock()
	defer fake.addUserToOrgRoleMutex.RUnlock()
	fake.addUserToOrgMutex.RLock()
	defer fake.addUserToOrgMutex.RUnlock()
	fake.listAllOrgQuotasMutex.RLock()
	defer fake.listAllOrgQuotasMutex.RUnlock()
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	fake.updateQuotaMutex.RLock()
	defer fake.updateQuotaMutex.RUnlock()
	fake.assignQuotaToOrgMutex.RLock()
	defer fake.assignQuotaToOrgMutex.RUnlock()
	fake.getCFUsersMutex.RLock()
	defer fake.getCFUsersMutex.RUnlock()
	fake.removeCFUserMutex.RLock()
	defer fake.removeCFUserMutex.RUnlock()
	fake.quotaDefMutex.RLock()
	defer fake.quotaDefMutex.RUnlock()
	fake.listAllPrivateDomainsMutex.RLock()
	defer fake.listAllPrivateDomainsMutex.RUnlock()
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	fake.deletePrivateDomainMutex.RLock()
	defer fake.deletePrivateDomainMutex.RUnlock()
	fake.createPrivateDomainMutex.RLock()
	defer fake.createPrivateDomainMutex.RUnlock()
	fake.sharePrivateDomainMutex.RLock()
	defer fake.sharePrivateDomainMutex.RUnlock()
	fake.removeSharedPrivateDomainMutex.RLock()
	defer fake.removeSharedPrivateDomainMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudcontroller.Manager = new(FakeManager)
