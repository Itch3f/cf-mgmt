// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/cloudcontroller"
)

type FakeManager struct {
	ListIsolationSegmentsStub        func() ([]go_cfclient.IsolationSegment, error)
	listIsolationSegmentsMutex       sync.RWMutex
	listIsolationSegmentsArgsForCall []struct{}
	listIsolationSegmentsReturns     struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}
	OrgQuotaByNameStub        func(name string) (go_cfclient.OrgQuota, error)
	orgQuotaByNameMutex       sync.RWMutex
	orgQuotaByNameArgsForCall []struct {
		name string
	}
	orgQuotaByNameReturns struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}
	SpaceQuotaByNameStub        func(name string) (go_cfclient.SpaceQuota, error)
	spaceQuotaByNameMutex       sync.RWMutex
	spaceQuotaByNameArgsForCall []struct {
		name string
	}
	spaceQuotaByNameReturns struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) ListIsolationSegments() ([]go_cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsMutex.Lock()
	fake.listIsolationSegmentsArgsForCall = append(fake.listIsolationSegmentsArgsForCall, struct{}{})
	fake.recordInvocation("ListIsolationSegments", []interface{}{})
	fake.listIsolationSegmentsMutex.Unlock()
	if fake.ListIsolationSegmentsStub != nil {
		return fake.ListIsolationSegmentsStub()
	} else {
		return fake.listIsolationSegmentsReturns.result1, fake.listIsolationSegmentsReturns.result2
	}
}

func (fake *FakeManager) ListIsolationSegmentsCallCount() int {
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	return len(fake.listIsolationSegmentsArgsForCall)
}

func (fake *FakeManager) ListIsolationSegmentsReturns(result1 []go_cfclient.IsolationSegment, result2 error) {
	fake.ListIsolationSegmentsStub = nil
	fake.listIsolationSegmentsReturns = struct {
		result1 []go_cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) OrgQuotaByName(name string) (go_cfclient.OrgQuota, error) {
	fake.orgQuotaByNameMutex.Lock()
	fake.orgQuotaByNameArgsForCall = append(fake.orgQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("OrgQuotaByName", []interface{}{name})
	fake.orgQuotaByNameMutex.Unlock()
	if fake.OrgQuotaByNameStub != nil {
		return fake.OrgQuotaByNameStub(name)
	} else {
		return fake.orgQuotaByNameReturns.result1, fake.orgQuotaByNameReturns.result2
	}
}

func (fake *FakeManager) OrgQuotaByNameCallCount() int {
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return len(fake.orgQuotaByNameArgsForCall)
}

func (fake *FakeManager) OrgQuotaByNameArgsForCall(i int) string {
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	return fake.orgQuotaByNameArgsForCall[i].name
}

func (fake *FakeManager) OrgQuotaByNameReturns(result1 go_cfclient.OrgQuota, result2 error) {
	fake.OrgQuotaByNameStub = nil
	fake.orgQuotaByNameReturns = struct {
		result1 go_cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) SpaceQuotaByName(name string) (go_cfclient.SpaceQuota, error) {
	fake.spaceQuotaByNameMutex.Lock()
	fake.spaceQuotaByNameArgsForCall = append(fake.spaceQuotaByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("SpaceQuotaByName", []interface{}{name})
	fake.spaceQuotaByNameMutex.Unlock()
	if fake.SpaceQuotaByNameStub != nil {
		return fake.SpaceQuotaByNameStub(name)
	} else {
		return fake.spaceQuotaByNameReturns.result1, fake.spaceQuotaByNameReturns.result2
	}
}

func (fake *FakeManager) SpaceQuotaByNameCallCount() int {
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return len(fake.spaceQuotaByNameArgsForCall)
}

func (fake *FakeManager) SpaceQuotaByNameArgsForCall(i int) string {
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return fake.spaceQuotaByNameArgsForCall[i].name
}

func (fake *FakeManager) SpaceQuotaByNameReturns(result1 go_cfclient.SpaceQuota, result2 error) {
	fake.SpaceQuotaByNameStub = nil
	fake.spaceQuotaByNameReturns = struct {
		result1 go_cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	fake.orgQuotaByNameMutex.RLock()
	defer fake.orgQuotaByNameMutex.RUnlock()
	fake.spaceQuotaByNameMutex.RLock()
	defer fake.spaceQuotaByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudcontroller.Manager = new(FakeManager)
