// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pivotalservices/cf-mgmt/cloudcontroller (interfaces: Manager)

// Package mock_cloudcontroller is a generated GoMock package.
package mock_cloudcontroller

import (
	reflect "reflect"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ListIsolationSegments mocks base method
func (m *MockManager) ListIsolationSegments() ([]go_cfclient.IsolationSegment, error) {
	ret := m.ctrl.Call(m, "ListIsolationSegments")
	ret0, _ := ret[0].([]go_cfclient.IsolationSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIsolationSegments indicates an expected call of ListIsolationSegments
func (mr *MockManagerMockRecorder) ListIsolationSegments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIsolationSegments", reflect.TypeOf((*MockManager)(nil).ListIsolationSegments))
}

// OrgQuotaByName mocks base method
func (m *MockManager) OrgQuotaByName(arg0 string) (go_cfclient.OrgQuota, error) {
	ret := m.ctrl.Call(m, "OrgQuotaByName", arg0)
	ret0, _ := ret[0].(go_cfclient.OrgQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrgQuotaByName indicates an expected call of OrgQuotaByName
func (mr *MockManagerMockRecorder) OrgQuotaByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrgQuotaByName", reflect.TypeOf((*MockManager)(nil).OrgQuotaByName), arg0)
}

// SpaceQuotaByName mocks base method
func (m *MockManager) SpaceQuotaByName(arg0 string) (go_cfclient.SpaceQuota, error) {
	ret := m.ctrl.Call(m, "SpaceQuotaByName", arg0)
	ret0, _ := ret[0].(go_cfclient.SpaceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceQuotaByName indicates an expected call of SpaceQuotaByName
func (mr *MockManagerMockRecorder) SpaceQuotaByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceQuotaByName", reflect.TypeOf((*MockManager)(nil).SpaceQuotaByName), arg0)
}
