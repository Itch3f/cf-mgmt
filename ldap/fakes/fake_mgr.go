// This file was generated by counterfeiter
package fakes

import (
	"sync"

	ldapgo_ldap "github.com/go-ldap/ldap"
	"github.com/pivotalservices/cf-mgmt/ldap"
)

type FakeManager struct {
	GetUserIDsStub        func(config *ldap.Config, groupName string) (users []ldap.User, err error)
	getUserIDsMutex       sync.RWMutex
	getUserIDsArgsForCall []struct {
		config    *ldap.Config
		groupName string
	}
	getUserIDsReturns struct {
		result1 []ldap.User
		result2 error
	}
	GetUserStub        func(config *ldap.Config, userID string) (*ldap.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		config *ldap.Config
		userID string
	}
	getUserReturns struct {
		result1 *ldap.User
		result2 error
	}
	GetConfigStub        func(configDir, ldapBindPassword string) (*ldap.Config, error)
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct {
		configDir        string
		ldapBindPassword string
	}
	getConfigReturns struct {
		result1 *ldap.Config
		result2 error
	}
	GetLdapUserStub        func(config *ldap.Config, userDN string) (*ldap.User, error)
	getLdapUserMutex       sync.RWMutex
	getLdapUserArgsForCall []struct {
		config *ldap.Config
		userDN string
	}
	getLdapUserReturns struct {
		result1 *ldap.User
		result2 error
	}
	LdapConnectionStub        func(config *ldap.Config) (*ldapgo_ldap.Conn, error)
	ldapConnectionMutex       sync.RWMutex
	ldapConnectionArgsForCall []struct {
		config *ldap.Config
	}
	ldapConnectionReturns struct {
		result1 *ldapgo_ldap.Conn
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) GetUserIDs(config *ldap.Config, groupName string) (users []ldap.User, err error) {
	fake.getUserIDsMutex.Lock()
	fake.getUserIDsArgsForCall = append(fake.getUserIDsArgsForCall, struct {
		config    *ldap.Config
		groupName string
	}{config, groupName})
	fake.recordInvocation("GetUserIDs", []interface{}{config, groupName})
	fake.getUserIDsMutex.Unlock()
	if fake.GetUserIDsStub != nil {
		return fake.GetUserIDsStub(config, groupName)
	} else {
		return fake.getUserIDsReturns.result1, fake.getUserIDsReturns.result2
	}
}

func (fake *FakeManager) GetUserIDsCallCount() int {
	fake.getUserIDsMutex.RLock()
	defer fake.getUserIDsMutex.RUnlock()
	return len(fake.getUserIDsArgsForCall)
}

func (fake *FakeManager) GetUserIDsArgsForCall(i int) (*ldap.Config, string) {
	fake.getUserIDsMutex.RLock()
	defer fake.getUserIDsMutex.RUnlock()
	return fake.getUserIDsArgsForCall[i].config, fake.getUserIDsArgsForCall[i].groupName
}

func (fake *FakeManager) GetUserIDsReturns(result1 []ldap.User, result2 error) {
	fake.GetUserIDsStub = nil
	fake.getUserIDsReturns = struct {
		result1 []ldap.User
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetUser(config *ldap.Config, userID string) (*ldap.User, error) {
	fake.getUserMutex.Lock()
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		config *ldap.Config
		userID string
	}{config, userID})
	fake.recordInvocation("GetUser", []interface{}{config, userID})
	fake.getUserMutex.Unlock()
	if fake.GetUserStub != nil {
		return fake.GetUserStub(config, userID)
	} else {
		return fake.getUserReturns.result1, fake.getUserReturns.result2
	}
}

func (fake *FakeManager) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeManager) GetUserArgsForCall(i int) (*ldap.Config, string) {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return fake.getUserArgsForCall[i].config, fake.getUserArgsForCall[i].userID
}

func (fake *FakeManager) GetUserReturns(result1 *ldap.User, result2 error) {
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 *ldap.User
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetConfig(configDir string, ldapBindPassword string) (*ldap.Config, error) {
	fake.getConfigMutex.Lock()
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct {
		configDir        string
		ldapBindPassword string
	}{configDir, ldapBindPassword})
	fake.recordInvocation("GetConfig", []interface{}{configDir, ldapBindPassword})
	fake.getConfigMutex.Unlock()
	if fake.GetConfigStub != nil {
		return fake.GetConfigStub(configDir, ldapBindPassword)
	} else {
		return fake.getConfigReturns.result1, fake.getConfigReturns.result2
	}
}

func (fake *FakeManager) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeManager) GetConfigArgsForCall(i int) (string, string) {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return fake.getConfigArgsForCall[i].configDir, fake.getConfigArgsForCall[i].ldapBindPassword
}

func (fake *FakeManager) GetConfigReturns(result1 *ldap.Config, result2 error) {
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 *ldap.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetLdapUser(config *ldap.Config, userDN string) (*ldap.User, error) {
	fake.getLdapUserMutex.Lock()
	fake.getLdapUserArgsForCall = append(fake.getLdapUserArgsForCall, struct {
		config *ldap.Config
		userDN string
	}{config, userDN})
	fake.recordInvocation("GetLdapUser", []interface{}{config, userDN})
	fake.getLdapUserMutex.Unlock()
	if fake.GetLdapUserStub != nil {
		return fake.GetLdapUserStub(config, userDN)
	} else {
		return fake.getLdapUserReturns.result1, fake.getLdapUserReturns.result2
	}
}

func (fake *FakeManager) GetLdapUserCallCount() int {
	fake.getLdapUserMutex.RLock()
	defer fake.getLdapUserMutex.RUnlock()
	return len(fake.getLdapUserArgsForCall)
}

func (fake *FakeManager) GetLdapUserArgsForCall(i int) (*ldap.Config, string) {
	fake.getLdapUserMutex.RLock()
	defer fake.getLdapUserMutex.RUnlock()
	return fake.getLdapUserArgsForCall[i].config, fake.getLdapUserArgsForCall[i].userDN
}

func (fake *FakeManager) GetLdapUserReturns(result1 *ldap.User, result2 error) {
	fake.GetLdapUserStub = nil
	fake.getLdapUserReturns = struct {
		result1 *ldap.User
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) LdapConnection(config *ldap.Config) (*ldapgo_ldap.Conn, error) {
	fake.ldapConnectionMutex.Lock()
	fake.ldapConnectionArgsForCall = append(fake.ldapConnectionArgsForCall, struct {
		config *ldap.Config
	}{config})
	fake.recordInvocation("LdapConnection", []interface{}{config})
	fake.ldapConnectionMutex.Unlock()
	if fake.LdapConnectionStub != nil {
		return fake.LdapConnectionStub(config)
	} else {
		return fake.ldapConnectionReturns.result1, fake.ldapConnectionReturns.result2
	}
}

func (fake *FakeManager) LdapConnectionCallCount() int {
	fake.ldapConnectionMutex.RLock()
	defer fake.ldapConnectionMutex.RUnlock()
	return len(fake.ldapConnectionArgsForCall)
}

func (fake *FakeManager) LdapConnectionArgsForCall(i int) *ldap.Config {
	fake.ldapConnectionMutex.RLock()
	defer fake.ldapConnectionMutex.RUnlock()
	return fake.ldapConnectionArgsForCall[i].config
}

func (fake *FakeManager) LdapConnectionReturns(result1 *ldapgo_ldap.Conn, result2 error) {
	fake.LdapConnectionStub = nil
	fake.ldapConnectionReturns = struct {
		result1 *ldapgo_ldap.Conn
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserIDsMutex.RLock()
	defer fake.getUserIDsMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	fake.getLdapUserMutex.RLock()
	defer fake.getLdapUserMutex.RUnlock()
	fake.ldapConnectionMutex.RLock()
	defer fake.ldapConnectionMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ldap.Manager = new(FakeManager)
