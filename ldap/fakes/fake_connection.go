// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	ldapa "github.com/go-ldap/ldap"
	"github.com/vmwarepivotallabs/cf-mgmt/ldap"
)

type FakeConnection struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	IsClosingStub        func() bool
	isClosingMutex       sync.RWMutex
	isClosingArgsForCall []struct {
	}
	isClosingReturns struct {
		result1 bool
	}
	isClosingReturnsOnCall map[int]struct {
		result1 bool
	}
	SearchStub        func(*ldapa.SearchRequest) (*ldapa.SearchResult, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 *ldapa.SearchRequest
	}
	searchReturns struct {
		result1 *ldapa.SearchResult
		result2 error
	}
	searchReturnsOnCall map[int]struct {
		result1 *ldapa.SearchResult
		result2 error
	}
	SetTimeoutStub        func(time.Duration)
	setTimeoutMutex       sync.RWMutex
	setTimeoutArgsForCall []struct {
		arg1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnection) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeConnection) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeConnection) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeConnection) IsClosing() bool {
	fake.isClosingMutex.Lock()
	ret, specificReturn := fake.isClosingReturnsOnCall[len(fake.isClosingArgsForCall)]
	fake.isClosingArgsForCall = append(fake.isClosingArgsForCall, struct {
	}{})
	fake.recordInvocation("IsClosing", []interface{}{})
	fake.isClosingMutex.Unlock()
	if fake.IsClosingStub != nil {
		return fake.IsClosingStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isClosingReturns
	return fakeReturns.result1
}

func (fake *FakeConnection) IsClosingCallCount() int {
	fake.isClosingMutex.RLock()
	defer fake.isClosingMutex.RUnlock()
	return len(fake.isClosingArgsForCall)
}

func (fake *FakeConnection) IsClosingCalls(stub func() bool) {
	fake.isClosingMutex.Lock()
	defer fake.isClosingMutex.Unlock()
	fake.IsClosingStub = stub
}

func (fake *FakeConnection) IsClosingReturns(result1 bool) {
	fake.isClosingMutex.Lock()
	defer fake.isClosingMutex.Unlock()
	fake.IsClosingStub = nil
	fake.isClosingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConnection) IsClosingReturnsOnCall(i int, result1 bool) {
	fake.isClosingMutex.Lock()
	defer fake.isClosingMutex.Unlock()
	fake.IsClosingStub = nil
	if fake.isClosingReturnsOnCall == nil {
		fake.isClosingReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isClosingReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConnection) Search(arg1 *ldapa.SearchRequest) (*ldapa.SearchResult, error) {
	fake.searchMutex.Lock()
	ret, specificReturn := fake.searchReturnsOnCall[len(fake.searchArgsForCall)]
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 *ldapa.SearchRequest
	}{arg1})
	fake.recordInvocation("Search", []interface{}{arg1})
	fake.searchMutex.Unlock()
	if fake.SearchStub != nil {
		return fake.SearchStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConnection) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeConnection) SearchCalls(stub func(*ldapa.SearchRequest) (*ldapa.SearchResult, error)) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = stub
}

func (fake *FakeConnection) SearchArgsForCall(i int) *ldapa.SearchRequest {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	argsForCall := fake.searchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnection) SearchReturns(result1 *ldapa.SearchResult, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 *ldapa.SearchResult
		result2 error
	}{result1, result2}
}

func (fake *FakeConnection) SearchReturnsOnCall(i int, result1 *ldapa.SearchResult, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	if fake.searchReturnsOnCall == nil {
		fake.searchReturnsOnCall = make(map[int]struct {
			result1 *ldapa.SearchResult
			result2 error
		})
	}
	fake.searchReturnsOnCall[i] = struct {
		result1 *ldapa.SearchResult
		result2 error
	}{result1, result2}
}

func (fake *FakeConnection) SetTimeout(arg1 time.Duration) {
	fake.setTimeoutMutex.Lock()
	fake.setTimeoutArgsForCall = append(fake.setTimeoutArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("SetTimeout", []interface{}{arg1})
	fake.setTimeoutMutex.Unlock()
	if fake.SetTimeoutStub != nil {
		fake.SetTimeoutStub(arg1)
	}
}

func (fake *FakeConnection) SetTimeoutCallCount() int {
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	return len(fake.setTimeoutArgsForCall)
}

func (fake *FakeConnection) SetTimeoutCalls(stub func(time.Duration)) {
	fake.setTimeoutMutex.Lock()
	defer fake.setTimeoutMutex.Unlock()
	fake.SetTimeoutStub = stub
}

func (fake *FakeConnection) SetTimeoutArgsForCall(i int) time.Duration {
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	argsForCall := fake.setTimeoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnection) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.isClosingMutex.RLock()
	defer fake.isClosingMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConnection) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ldap.Connection = new(FakeConnection)
