// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotalservices/cf-mgmt/config"
)

type FakeUpdater struct {
	AddOrgToConfigStub        func(orgConfig *config.OrgConfig) error
	addOrgToConfigMutex       sync.RWMutex
	addOrgToConfigArgsForCall []struct {
		orgConfig *config.OrgConfig
	}
	addOrgToConfigReturns struct {
		result1 error
	}
	AddSpaceToConfigStub        func(spaceConfig *config.SpaceConfig) error
	addSpaceToConfigMutex       sync.RWMutex
	addSpaceToConfigArgsForCall []struct {
		spaceConfig *config.SpaceConfig
	}
	addSpaceToConfigReturns struct {
		result1 error
	}
	AddSecurityGroupToSpaceStub        func(orgName, spaceName string, securityGroupDefinition []byte) error
	addSecurityGroupToSpaceMutex       sync.RWMutex
	addSecurityGroupToSpaceArgsForCall []struct {
		orgName                 string
		spaceName               string
		securityGroupDefinition []byte
	}
	addSecurityGroupToSpaceReturns struct {
		result1 error
	}
	AddSecurityGroupStub        func(securityGroupName string, securityGroupDefinition []byte) error
	addSecurityGroupMutex       sync.RWMutex
	addSecurityGroupArgsForCall []struct {
		securityGroupName       string
		securityGroupDefinition []byte
	}
	addSecurityGroupReturns struct {
		result1 error
	}
	AddDefaultSecurityGroupStub        func(securityGroupName string, securityGroupDefinition []byte) error
	addDefaultSecurityGroupMutex       sync.RWMutex
	addDefaultSecurityGroupArgsForCall []struct {
		securityGroupName       string
		securityGroupDefinition []byte
	}
	addDefaultSecurityGroupReturns struct {
		result1 error
	}
	CreateConfigIfNotExistsStub        func(uaaOrigin string) error
	createConfigIfNotExistsMutex       sync.RWMutex
	createConfigIfNotExistsArgsForCall []struct {
		uaaOrigin string
	}
	createConfigIfNotExistsReturns struct {
		result1 error
	}
	DeleteConfigIfExistsStub        func() error
	deleteConfigIfExistsMutex       sync.RWMutex
	deleteConfigIfExistsArgsForCall []struct{}
	deleteConfigIfExistsReturns     struct {
		result1 error
	}
	SaveOrgSpacesStub        func(spaces *config.Spaces) error
	saveOrgSpacesMutex       sync.RWMutex
	saveOrgSpacesArgsForCall []struct {
		spaces *config.Spaces
	}
	saveOrgSpacesReturns struct {
		result1 error
	}
	SaveSpaceConfigStub        func(spaceConfig *config.SpaceConfig) error
	saveSpaceConfigMutex       sync.RWMutex
	saveSpaceConfigArgsForCall []struct {
		spaceConfig *config.SpaceConfig
	}
	saveSpaceConfigReturns struct {
		result1 error
	}
	SaveOrgConfigStub        func(orgConfig *config.OrgConfig) error
	saveOrgConfigMutex       sync.RWMutex
	saveOrgConfigArgsForCall []struct {
		orgConfig *config.OrgConfig
	}
	saveOrgConfigReturns struct {
		result1 error
	}
	DeleteOrgConfigStub        func(orgName string) error
	deleteOrgConfigMutex       sync.RWMutex
	deleteOrgConfigArgsForCall []struct {
		orgName string
	}
	deleteOrgConfigReturns struct {
		result1 error
	}
	DeleteSpaceConfigStub        func(orgName, spaceName string) error
	deleteSpaceConfigMutex       sync.RWMutex
	deleteSpaceConfigArgsForCall []struct {
		orgName   string
		spaceName string
	}
	deleteSpaceConfigReturns struct {
		result1 error
	}
	SaveOrgsStub        func(*config.Orgs) error
	saveOrgsMutex       sync.RWMutex
	saveOrgsArgsForCall []struct {
		arg1 *config.Orgs
	}
	saveOrgsReturns struct {
		result1 error
	}
	SaveGlobalConfigStub        func(*config.GlobalConfig) error
	saveGlobalConfigMutex       sync.RWMutex
	saveGlobalConfigArgsForCall []struct {
		arg1 *config.GlobalConfig
	}
	saveGlobalConfigReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdater) AddOrgToConfig(orgConfig *config.OrgConfig) error {
	fake.addOrgToConfigMutex.Lock()
	fake.addOrgToConfigArgsForCall = append(fake.addOrgToConfigArgsForCall, struct {
		orgConfig *config.OrgConfig
	}{orgConfig})
	fake.recordInvocation("AddOrgToConfig", []interface{}{orgConfig})
	fake.addOrgToConfigMutex.Unlock()
	if fake.AddOrgToConfigStub != nil {
		return fake.AddOrgToConfigStub(orgConfig)
	} else {
		return fake.addOrgToConfigReturns.result1
	}
}

func (fake *FakeUpdater) AddOrgToConfigCallCount() int {
	fake.addOrgToConfigMutex.RLock()
	defer fake.addOrgToConfigMutex.RUnlock()
	return len(fake.addOrgToConfigArgsForCall)
}

func (fake *FakeUpdater) AddOrgToConfigArgsForCall(i int) *config.OrgConfig {
	fake.addOrgToConfigMutex.RLock()
	defer fake.addOrgToConfigMutex.RUnlock()
	return fake.addOrgToConfigArgsForCall[i].orgConfig
}

func (fake *FakeUpdater) AddOrgToConfigReturns(result1 error) {
	fake.AddOrgToConfigStub = nil
	fake.addOrgToConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) AddSpaceToConfig(spaceConfig *config.SpaceConfig) error {
	fake.addSpaceToConfigMutex.Lock()
	fake.addSpaceToConfigArgsForCall = append(fake.addSpaceToConfigArgsForCall, struct {
		spaceConfig *config.SpaceConfig
	}{spaceConfig})
	fake.recordInvocation("AddSpaceToConfig", []interface{}{spaceConfig})
	fake.addSpaceToConfigMutex.Unlock()
	if fake.AddSpaceToConfigStub != nil {
		return fake.AddSpaceToConfigStub(spaceConfig)
	} else {
		return fake.addSpaceToConfigReturns.result1
	}
}

func (fake *FakeUpdater) AddSpaceToConfigCallCount() int {
	fake.addSpaceToConfigMutex.RLock()
	defer fake.addSpaceToConfigMutex.RUnlock()
	return len(fake.addSpaceToConfigArgsForCall)
}

func (fake *FakeUpdater) AddSpaceToConfigArgsForCall(i int) *config.SpaceConfig {
	fake.addSpaceToConfigMutex.RLock()
	defer fake.addSpaceToConfigMutex.RUnlock()
	return fake.addSpaceToConfigArgsForCall[i].spaceConfig
}

func (fake *FakeUpdater) AddSpaceToConfigReturns(result1 error) {
	fake.AddSpaceToConfigStub = nil
	fake.addSpaceToConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) AddSecurityGroupToSpace(orgName string, spaceName string, securityGroupDefinition []byte) error {
	var securityGroupDefinitionCopy []byte
	if securityGroupDefinition != nil {
		securityGroupDefinitionCopy = make([]byte, len(securityGroupDefinition))
		copy(securityGroupDefinitionCopy, securityGroupDefinition)
	}
	fake.addSecurityGroupToSpaceMutex.Lock()
	fake.addSecurityGroupToSpaceArgsForCall = append(fake.addSecurityGroupToSpaceArgsForCall, struct {
		orgName                 string
		spaceName               string
		securityGroupDefinition []byte
	}{orgName, spaceName, securityGroupDefinitionCopy})
	fake.recordInvocation("AddSecurityGroupToSpace", []interface{}{orgName, spaceName, securityGroupDefinitionCopy})
	fake.addSecurityGroupToSpaceMutex.Unlock()
	if fake.AddSecurityGroupToSpaceStub != nil {
		return fake.AddSecurityGroupToSpaceStub(orgName, spaceName, securityGroupDefinition)
	} else {
		return fake.addSecurityGroupToSpaceReturns.result1
	}
}

func (fake *FakeUpdater) AddSecurityGroupToSpaceCallCount() int {
	fake.addSecurityGroupToSpaceMutex.RLock()
	defer fake.addSecurityGroupToSpaceMutex.RUnlock()
	return len(fake.addSecurityGroupToSpaceArgsForCall)
}

func (fake *FakeUpdater) AddSecurityGroupToSpaceArgsForCall(i int) (string, string, []byte) {
	fake.addSecurityGroupToSpaceMutex.RLock()
	defer fake.addSecurityGroupToSpaceMutex.RUnlock()
	return fake.addSecurityGroupToSpaceArgsForCall[i].orgName, fake.addSecurityGroupToSpaceArgsForCall[i].spaceName, fake.addSecurityGroupToSpaceArgsForCall[i].securityGroupDefinition
}

func (fake *FakeUpdater) AddSecurityGroupToSpaceReturns(result1 error) {
	fake.AddSecurityGroupToSpaceStub = nil
	fake.addSecurityGroupToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) AddSecurityGroup(securityGroupName string, securityGroupDefinition []byte) error {
	var securityGroupDefinitionCopy []byte
	if securityGroupDefinition != nil {
		securityGroupDefinitionCopy = make([]byte, len(securityGroupDefinition))
		copy(securityGroupDefinitionCopy, securityGroupDefinition)
	}
	fake.addSecurityGroupMutex.Lock()
	fake.addSecurityGroupArgsForCall = append(fake.addSecurityGroupArgsForCall, struct {
		securityGroupName       string
		securityGroupDefinition []byte
	}{securityGroupName, securityGroupDefinitionCopy})
	fake.recordInvocation("AddSecurityGroup", []interface{}{securityGroupName, securityGroupDefinitionCopy})
	fake.addSecurityGroupMutex.Unlock()
	if fake.AddSecurityGroupStub != nil {
		return fake.AddSecurityGroupStub(securityGroupName, securityGroupDefinition)
	} else {
		return fake.addSecurityGroupReturns.result1
	}
}

func (fake *FakeUpdater) AddSecurityGroupCallCount() int {
	fake.addSecurityGroupMutex.RLock()
	defer fake.addSecurityGroupMutex.RUnlock()
	return len(fake.addSecurityGroupArgsForCall)
}

func (fake *FakeUpdater) AddSecurityGroupArgsForCall(i int) (string, []byte) {
	fake.addSecurityGroupMutex.RLock()
	defer fake.addSecurityGroupMutex.RUnlock()
	return fake.addSecurityGroupArgsForCall[i].securityGroupName, fake.addSecurityGroupArgsForCall[i].securityGroupDefinition
}

func (fake *FakeUpdater) AddSecurityGroupReturns(result1 error) {
	fake.AddSecurityGroupStub = nil
	fake.addSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) AddDefaultSecurityGroup(securityGroupName string, securityGroupDefinition []byte) error {
	var securityGroupDefinitionCopy []byte
	if securityGroupDefinition != nil {
		securityGroupDefinitionCopy = make([]byte, len(securityGroupDefinition))
		copy(securityGroupDefinitionCopy, securityGroupDefinition)
	}
	fake.addDefaultSecurityGroupMutex.Lock()
	fake.addDefaultSecurityGroupArgsForCall = append(fake.addDefaultSecurityGroupArgsForCall, struct {
		securityGroupName       string
		securityGroupDefinition []byte
	}{securityGroupName, securityGroupDefinitionCopy})
	fake.recordInvocation("AddDefaultSecurityGroup", []interface{}{securityGroupName, securityGroupDefinitionCopy})
	fake.addDefaultSecurityGroupMutex.Unlock()
	if fake.AddDefaultSecurityGroupStub != nil {
		return fake.AddDefaultSecurityGroupStub(securityGroupName, securityGroupDefinition)
	} else {
		return fake.addDefaultSecurityGroupReturns.result1
	}
}

func (fake *FakeUpdater) AddDefaultSecurityGroupCallCount() int {
	fake.addDefaultSecurityGroupMutex.RLock()
	defer fake.addDefaultSecurityGroupMutex.RUnlock()
	return len(fake.addDefaultSecurityGroupArgsForCall)
}

func (fake *FakeUpdater) AddDefaultSecurityGroupArgsForCall(i int) (string, []byte) {
	fake.addDefaultSecurityGroupMutex.RLock()
	defer fake.addDefaultSecurityGroupMutex.RUnlock()
	return fake.addDefaultSecurityGroupArgsForCall[i].securityGroupName, fake.addDefaultSecurityGroupArgsForCall[i].securityGroupDefinition
}

func (fake *FakeUpdater) AddDefaultSecurityGroupReturns(result1 error) {
	fake.AddDefaultSecurityGroupStub = nil
	fake.addDefaultSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) CreateConfigIfNotExists(uaaOrigin string) error {
	fake.createConfigIfNotExistsMutex.Lock()
	fake.createConfigIfNotExistsArgsForCall = append(fake.createConfigIfNotExistsArgsForCall, struct {
		uaaOrigin string
	}{uaaOrigin})
	fake.recordInvocation("CreateConfigIfNotExists", []interface{}{uaaOrigin})
	fake.createConfigIfNotExistsMutex.Unlock()
	if fake.CreateConfigIfNotExistsStub != nil {
		return fake.CreateConfigIfNotExistsStub(uaaOrigin)
	} else {
		return fake.createConfigIfNotExistsReturns.result1
	}
}

func (fake *FakeUpdater) CreateConfigIfNotExistsCallCount() int {
	fake.createConfigIfNotExistsMutex.RLock()
	defer fake.createConfigIfNotExistsMutex.RUnlock()
	return len(fake.createConfigIfNotExistsArgsForCall)
}

func (fake *FakeUpdater) CreateConfigIfNotExistsArgsForCall(i int) string {
	fake.createConfigIfNotExistsMutex.RLock()
	defer fake.createConfigIfNotExistsMutex.RUnlock()
	return fake.createConfigIfNotExistsArgsForCall[i].uaaOrigin
}

func (fake *FakeUpdater) CreateConfigIfNotExistsReturns(result1 error) {
	fake.CreateConfigIfNotExistsStub = nil
	fake.createConfigIfNotExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) DeleteConfigIfExists() error {
	fake.deleteConfigIfExistsMutex.Lock()
	fake.deleteConfigIfExistsArgsForCall = append(fake.deleteConfigIfExistsArgsForCall, struct{}{})
	fake.recordInvocation("DeleteConfigIfExists", []interface{}{})
	fake.deleteConfigIfExistsMutex.Unlock()
	if fake.DeleteConfigIfExistsStub != nil {
		return fake.DeleteConfigIfExistsStub()
	} else {
		return fake.deleteConfigIfExistsReturns.result1
	}
}

func (fake *FakeUpdater) DeleteConfigIfExistsCallCount() int {
	fake.deleteConfigIfExistsMutex.RLock()
	defer fake.deleteConfigIfExistsMutex.RUnlock()
	return len(fake.deleteConfigIfExistsArgsForCall)
}

func (fake *FakeUpdater) DeleteConfigIfExistsReturns(result1 error) {
	fake.DeleteConfigIfExistsStub = nil
	fake.deleteConfigIfExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) SaveOrgSpaces(spaces *config.Spaces) error {
	fake.saveOrgSpacesMutex.Lock()
	fake.saveOrgSpacesArgsForCall = append(fake.saveOrgSpacesArgsForCall, struct {
		spaces *config.Spaces
	}{spaces})
	fake.recordInvocation("SaveOrgSpaces", []interface{}{spaces})
	fake.saveOrgSpacesMutex.Unlock()
	if fake.SaveOrgSpacesStub != nil {
		return fake.SaveOrgSpacesStub(spaces)
	} else {
		return fake.saveOrgSpacesReturns.result1
	}
}

func (fake *FakeUpdater) SaveOrgSpacesCallCount() int {
	fake.saveOrgSpacesMutex.RLock()
	defer fake.saveOrgSpacesMutex.RUnlock()
	return len(fake.saveOrgSpacesArgsForCall)
}

func (fake *FakeUpdater) SaveOrgSpacesArgsForCall(i int) *config.Spaces {
	fake.saveOrgSpacesMutex.RLock()
	defer fake.saveOrgSpacesMutex.RUnlock()
	return fake.saveOrgSpacesArgsForCall[i].spaces
}

func (fake *FakeUpdater) SaveOrgSpacesReturns(result1 error) {
	fake.SaveOrgSpacesStub = nil
	fake.saveOrgSpacesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) SaveSpaceConfig(spaceConfig *config.SpaceConfig) error {
	fake.saveSpaceConfigMutex.Lock()
	fake.saveSpaceConfigArgsForCall = append(fake.saveSpaceConfigArgsForCall, struct {
		spaceConfig *config.SpaceConfig
	}{spaceConfig})
	fake.recordInvocation("SaveSpaceConfig", []interface{}{spaceConfig})
	fake.saveSpaceConfigMutex.Unlock()
	if fake.SaveSpaceConfigStub != nil {
		return fake.SaveSpaceConfigStub(spaceConfig)
	} else {
		return fake.saveSpaceConfigReturns.result1
	}
}

func (fake *FakeUpdater) SaveSpaceConfigCallCount() int {
	fake.saveSpaceConfigMutex.RLock()
	defer fake.saveSpaceConfigMutex.RUnlock()
	return len(fake.saveSpaceConfigArgsForCall)
}

func (fake *FakeUpdater) SaveSpaceConfigArgsForCall(i int) *config.SpaceConfig {
	fake.saveSpaceConfigMutex.RLock()
	defer fake.saveSpaceConfigMutex.RUnlock()
	return fake.saveSpaceConfigArgsForCall[i].spaceConfig
}

func (fake *FakeUpdater) SaveSpaceConfigReturns(result1 error) {
	fake.SaveSpaceConfigStub = nil
	fake.saveSpaceConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) SaveOrgConfig(orgConfig *config.OrgConfig) error {
	fake.saveOrgConfigMutex.Lock()
	fake.saveOrgConfigArgsForCall = append(fake.saveOrgConfigArgsForCall, struct {
		orgConfig *config.OrgConfig
	}{orgConfig})
	fake.recordInvocation("SaveOrgConfig", []interface{}{orgConfig})
	fake.saveOrgConfigMutex.Unlock()
	if fake.SaveOrgConfigStub != nil {
		return fake.SaveOrgConfigStub(orgConfig)
	} else {
		return fake.saveOrgConfigReturns.result1
	}
}

func (fake *FakeUpdater) SaveOrgConfigCallCount() int {
	fake.saveOrgConfigMutex.RLock()
	defer fake.saveOrgConfigMutex.RUnlock()
	return len(fake.saveOrgConfigArgsForCall)
}

func (fake *FakeUpdater) SaveOrgConfigArgsForCall(i int) *config.OrgConfig {
	fake.saveOrgConfigMutex.RLock()
	defer fake.saveOrgConfigMutex.RUnlock()
	return fake.saveOrgConfigArgsForCall[i].orgConfig
}

func (fake *FakeUpdater) SaveOrgConfigReturns(result1 error) {
	fake.SaveOrgConfigStub = nil
	fake.saveOrgConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) DeleteOrgConfig(orgName string) error {
	fake.deleteOrgConfigMutex.Lock()
	fake.deleteOrgConfigArgsForCall = append(fake.deleteOrgConfigArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("DeleteOrgConfig", []interface{}{orgName})
	fake.deleteOrgConfigMutex.Unlock()
	if fake.DeleteOrgConfigStub != nil {
		return fake.DeleteOrgConfigStub(orgName)
	} else {
		return fake.deleteOrgConfigReturns.result1
	}
}

func (fake *FakeUpdater) DeleteOrgConfigCallCount() int {
	fake.deleteOrgConfigMutex.RLock()
	defer fake.deleteOrgConfigMutex.RUnlock()
	return len(fake.deleteOrgConfigArgsForCall)
}

func (fake *FakeUpdater) DeleteOrgConfigArgsForCall(i int) string {
	fake.deleteOrgConfigMutex.RLock()
	defer fake.deleteOrgConfigMutex.RUnlock()
	return fake.deleteOrgConfigArgsForCall[i].orgName
}

func (fake *FakeUpdater) DeleteOrgConfigReturns(result1 error) {
	fake.DeleteOrgConfigStub = nil
	fake.deleteOrgConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) DeleteSpaceConfig(orgName string, spaceName string) error {
	fake.deleteSpaceConfigMutex.Lock()
	fake.deleteSpaceConfigArgsForCall = append(fake.deleteSpaceConfigArgsForCall, struct {
		orgName   string
		spaceName string
	}{orgName, spaceName})
	fake.recordInvocation("DeleteSpaceConfig", []interface{}{orgName, spaceName})
	fake.deleteSpaceConfigMutex.Unlock()
	if fake.DeleteSpaceConfigStub != nil {
		return fake.DeleteSpaceConfigStub(orgName, spaceName)
	} else {
		return fake.deleteSpaceConfigReturns.result1
	}
}

func (fake *FakeUpdater) DeleteSpaceConfigCallCount() int {
	fake.deleteSpaceConfigMutex.RLock()
	defer fake.deleteSpaceConfigMutex.RUnlock()
	return len(fake.deleteSpaceConfigArgsForCall)
}

func (fake *FakeUpdater) DeleteSpaceConfigArgsForCall(i int) (string, string) {
	fake.deleteSpaceConfigMutex.RLock()
	defer fake.deleteSpaceConfigMutex.RUnlock()
	return fake.deleteSpaceConfigArgsForCall[i].orgName, fake.deleteSpaceConfigArgsForCall[i].spaceName
}

func (fake *FakeUpdater) DeleteSpaceConfigReturns(result1 error) {
	fake.DeleteSpaceConfigStub = nil
	fake.deleteSpaceConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) SaveOrgs(arg1 *config.Orgs) error {
	fake.saveOrgsMutex.Lock()
	fake.saveOrgsArgsForCall = append(fake.saveOrgsArgsForCall, struct {
		arg1 *config.Orgs
	}{arg1})
	fake.recordInvocation("SaveOrgs", []interface{}{arg1})
	fake.saveOrgsMutex.Unlock()
	if fake.SaveOrgsStub != nil {
		return fake.SaveOrgsStub(arg1)
	} else {
		return fake.saveOrgsReturns.result1
	}
}

func (fake *FakeUpdater) SaveOrgsCallCount() int {
	fake.saveOrgsMutex.RLock()
	defer fake.saveOrgsMutex.RUnlock()
	return len(fake.saveOrgsArgsForCall)
}

func (fake *FakeUpdater) SaveOrgsArgsForCall(i int) *config.Orgs {
	fake.saveOrgsMutex.RLock()
	defer fake.saveOrgsMutex.RUnlock()
	return fake.saveOrgsArgsForCall[i].arg1
}

func (fake *FakeUpdater) SaveOrgsReturns(result1 error) {
	fake.SaveOrgsStub = nil
	fake.saveOrgsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) SaveGlobalConfig(arg1 *config.GlobalConfig) error {
	fake.saveGlobalConfigMutex.Lock()
	fake.saveGlobalConfigArgsForCall = append(fake.saveGlobalConfigArgsForCall, struct {
		arg1 *config.GlobalConfig
	}{arg1})
	fake.recordInvocation("SaveGlobalConfig", []interface{}{arg1})
	fake.saveGlobalConfigMutex.Unlock()
	if fake.SaveGlobalConfigStub != nil {
		return fake.SaveGlobalConfigStub(arg1)
	} else {
		return fake.saveGlobalConfigReturns.result1
	}
}

func (fake *FakeUpdater) SaveGlobalConfigCallCount() int {
	fake.saveGlobalConfigMutex.RLock()
	defer fake.saveGlobalConfigMutex.RUnlock()
	return len(fake.saveGlobalConfigArgsForCall)
}

func (fake *FakeUpdater) SaveGlobalConfigArgsForCall(i int) *config.GlobalConfig {
	fake.saveGlobalConfigMutex.RLock()
	defer fake.saveGlobalConfigMutex.RUnlock()
	return fake.saveGlobalConfigArgsForCall[i].arg1
}

func (fake *FakeUpdater) SaveGlobalConfigReturns(result1 error) {
	fake.SaveGlobalConfigStub = nil
	fake.saveGlobalConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addOrgToConfigMutex.RLock()
	defer fake.addOrgToConfigMutex.RUnlock()
	fake.addSpaceToConfigMutex.RLock()
	defer fake.addSpaceToConfigMutex.RUnlock()
	fake.addSecurityGroupToSpaceMutex.RLock()
	defer fake.addSecurityGroupToSpaceMutex.RUnlock()
	fake.addSecurityGroupMutex.RLock()
	defer fake.addSecurityGroupMutex.RUnlock()
	fake.addDefaultSecurityGroupMutex.RLock()
	defer fake.addDefaultSecurityGroupMutex.RUnlock()
	fake.createConfigIfNotExistsMutex.RLock()
	defer fake.createConfigIfNotExistsMutex.RUnlock()
	fake.deleteConfigIfExistsMutex.RLock()
	defer fake.deleteConfigIfExistsMutex.RUnlock()
	fake.saveOrgSpacesMutex.RLock()
	defer fake.saveOrgSpacesMutex.RUnlock()
	fake.saveSpaceConfigMutex.RLock()
	defer fake.saveSpaceConfigMutex.RUnlock()
	fake.saveOrgConfigMutex.RLock()
	defer fake.saveOrgConfigMutex.RUnlock()
	fake.deleteOrgConfigMutex.RLock()
	defer fake.deleteOrgConfigMutex.RUnlock()
	fake.deleteSpaceConfigMutex.RLock()
	defer fake.deleteSpaceConfigMutex.RUnlock()
	fake.saveOrgsMutex.RLock()
	defer fake.saveOrgsMutex.RUnlock()
	fake.saveGlobalConfigMutex.RLock()
	defer fake.saveGlobalConfigMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Updater = new(FakeUpdater)
