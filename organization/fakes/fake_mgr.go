// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/organization"
)

type FakeManager struct {
	ListOrgsStub        func() ([]go_cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []go_cfclient.Org
		result2 error
	}
	ListOrgSharedPrivateDomainsStub        func(orgGUID string) (map[string]go_cfclient.Domain, error)
	listOrgSharedPrivateDomainsMutex       sync.RWMutex
	listOrgSharedPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgSharedPrivateDomainsReturns struct {
		result1 map[string]go_cfclient.Domain
		result2 error
	}
	ListOrgOwnedPrivateDomainsStub        func(orgGUID string) (map[string]go_cfclient.Domain, error)
	listOrgOwnedPrivateDomainsMutex       sync.RWMutex
	listOrgOwnedPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgOwnedPrivateDomainsReturns struct {
		result1 map[string]go_cfclient.Domain
		result2 error
	}
	FindOrgStub        func(orgName string) (go_cfclient.Org, error)
	findOrgMutex       sync.RWMutex
	findOrgArgsForCall []struct {
		orgName string
	}
	findOrgReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	CreateOrgsStub        func() error
	createOrgsMutex       sync.RWMutex
	createOrgsArgsForCall []struct{}
	createOrgsReturns     struct {
		result1 error
	}
	CreatePrivateDomainsStub        func() error
	createPrivateDomainsMutex       sync.RWMutex
	createPrivateDomainsArgsForCall []struct{}
	createPrivateDomainsReturns     struct {
		result1 error
	}
	SharePrivateDomainsStub        func() error
	sharePrivateDomainsMutex       sync.RWMutex
	sharePrivateDomainsArgsForCall []struct{}
	sharePrivateDomainsReturns     struct {
		result1 error
	}
	DeleteOrgsStub        func() error
	deleteOrgsMutex       sync.RWMutex
	deleteOrgsArgsForCall []struct{}
	deleteOrgsReturns     struct {
		result1 error
	}
	GetOrgGUIDStub        func(orgName string) (string, error)
	getOrgGUIDMutex       sync.RWMutex
	getOrgGUIDArgsForCall []struct {
		orgName string
	}
	getOrgGUIDReturns struct {
		result1 string
		result2 error
	}
	UpdateOrgStub        func(orgGUID string, orgRequest go_cfclient.OrgRequest) (go_cfclient.Org, error)
	updateOrgMutex       sync.RWMutex
	updateOrgArgsForCall []struct {
		orgGUID    string
		orgRequest go_cfclient.OrgRequest
	}
	updateOrgReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	GetOrgByGUIDStub        func(orgGUID string) (go_cfclient.Org, error)
	getOrgByGUIDMutex       sync.RWMutex
	getOrgByGUIDArgsForCall []struct {
		orgGUID string
	}
	getOrgByGUIDReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) ListOrgs() ([]go_cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	} else {
		return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
	}
}

func (fake *FakeManager) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeManager) ListOrgsReturns(result1 []go_cfclient.Org, result2 error) {
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgSharedPrivateDomains(orgGUID string) (map[string]go_cfclient.Domain, error) {
	fake.listOrgSharedPrivateDomainsMutex.Lock()
	fake.listOrgSharedPrivateDomainsArgsForCall = append(fake.listOrgSharedPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgSharedPrivateDomains", []interface{}{orgGUID})
	fake.listOrgSharedPrivateDomainsMutex.Unlock()
	if fake.ListOrgSharedPrivateDomainsStub != nil {
		return fake.ListOrgSharedPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgSharedPrivateDomainsReturns.result1, fake.listOrgSharedPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsCallCount() int {
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgSharedPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsArgsForCall(i int) string {
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	return fake.listOrgSharedPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgSharedPrivateDomainsReturns(result1 map[string]go_cfclient.Domain, result2 error) {
	fake.ListOrgSharedPrivateDomainsStub = nil
	fake.listOrgSharedPrivateDomainsReturns = struct {
		result1 map[string]go_cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListOrgOwnedPrivateDomains(orgGUID string) (map[string]go_cfclient.Domain, error) {
	fake.listOrgOwnedPrivateDomainsMutex.Lock()
	fake.listOrgOwnedPrivateDomainsArgsForCall = append(fake.listOrgOwnedPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgOwnedPrivateDomains", []interface{}{orgGUID})
	fake.listOrgOwnedPrivateDomainsMutex.Unlock()
	if fake.ListOrgOwnedPrivateDomainsStub != nil {
		return fake.ListOrgOwnedPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgOwnedPrivateDomainsReturns.result1, fake.listOrgOwnedPrivateDomainsReturns.result2
	}
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsCallCount() int {
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgOwnedPrivateDomainsArgsForCall)
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsArgsForCall(i int) string {
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	return fake.listOrgOwnedPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeManager) ListOrgOwnedPrivateDomainsReturns(result1 map[string]go_cfclient.Domain, result2 error) {
	fake.ListOrgOwnedPrivateDomainsStub = nil
	fake.listOrgOwnedPrivateDomainsReturns = struct {
		result1 map[string]go_cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) FindOrg(orgName string) (go_cfclient.Org, error) {
	fake.findOrgMutex.Lock()
	fake.findOrgArgsForCall = append(fake.findOrgArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("FindOrg", []interface{}{orgName})
	fake.findOrgMutex.Unlock()
	if fake.FindOrgStub != nil {
		return fake.FindOrgStub(orgName)
	} else {
		return fake.findOrgReturns.result1, fake.findOrgReturns.result2
	}
}

func (fake *FakeManager) FindOrgCallCount() int {
	fake.findOrgMutex.RLock()
	defer fake.findOrgMutex.RUnlock()
	return len(fake.findOrgArgsForCall)
}

func (fake *FakeManager) FindOrgArgsForCall(i int) string {
	fake.findOrgMutex.RLock()
	defer fake.findOrgMutex.RUnlock()
	return fake.findOrgArgsForCall[i].orgName
}

func (fake *FakeManager) FindOrgReturns(result1 go_cfclient.Org, result2 error) {
	fake.FindOrgStub = nil
	fake.findOrgReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateOrgs() error {
	fake.createOrgsMutex.Lock()
	fake.createOrgsArgsForCall = append(fake.createOrgsArgsForCall, struct{}{})
	fake.recordInvocation("CreateOrgs", []interface{}{})
	fake.createOrgsMutex.Unlock()
	if fake.CreateOrgsStub != nil {
		return fake.CreateOrgsStub()
	} else {
		return fake.createOrgsReturns.result1
	}
}

func (fake *FakeManager) CreateOrgsCallCount() int {
	fake.createOrgsMutex.RLock()
	defer fake.createOrgsMutex.RUnlock()
	return len(fake.createOrgsArgsForCall)
}

func (fake *FakeManager) CreateOrgsReturns(result1 error) {
	fake.CreateOrgsStub = nil
	fake.createOrgsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreatePrivateDomains() error {
	fake.createPrivateDomainsMutex.Lock()
	fake.createPrivateDomainsArgsForCall = append(fake.createPrivateDomainsArgsForCall, struct{}{})
	fake.recordInvocation("CreatePrivateDomains", []interface{}{})
	fake.createPrivateDomainsMutex.Unlock()
	if fake.CreatePrivateDomainsStub != nil {
		return fake.CreatePrivateDomainsStub()
	} else {
		return fake.createPrivateDomainsReturns.result1
	}
}

func (fake *FakeManager) CreatePrivateDomainsCallCount() int {
	fake.createPrivateDomainsMutex.RLock()
	defer fake.createPrivateDomainsMutex.RUnlock()
	return len(fake.createPrivateDomainsArgsForCall)
}

func (fake *FakeManager) CreatePrivateDomainsReturns(result1 error) {
	fake.CreatePrivateDomainsStub = nil
	fake.createPrivateDomainsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SharePrivateDomains() error {
	fake.sharePrivateDomainsMutex.Lock()
	fake.sharePrivateDomainsArgsForCall = append(fake.sharePrivateDomainsArgsForCall, struct{}{})
	fake.recordInvocation("SharePrivateDomains", []interface{}{})
	fake.sharePrivateDomainsMutex.Unlock()
	if fake.SharePrivateDomainsStub != nil {
		return fake.SharePrivateDomainsStub()
	} else {
		return fake.sharePrivateDomainsReturns.result1
	}
}

func (fake *FakeManager) SharePrivateDomainsCallCount() int {
	fake.sharePrivateDomainsMutex.RLock()
	defer fake.sharePrivateDomainsMutex.RUnlock()
	return len(fake.sharePrivateDomainsArgsForCall)
}

func (fake *FakeManager) SharePrivateDomainsReturns(result1 error) {
	fake.SharePrivateDomainsStub = nil
	fake.sharePrivateDomainsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrgs() error {
	fake.deleteOrgsMutex.Lock()
	fake.deleteOrgsArgsForCall = append(fake.deleteOrgsArgsForCall, struct{}{})
	fake.recordInvocation("DeleteOrgs", []interface{}{})
	fake.deleteOrgsMutex.Unlock()
	if fake.DeleteOrgsStub != nil {
		return fake.DeleteOrgsStub()
	} else {
		return fake.deleteOrgsReturns.result1
	}
}

func (fake *FakeManager) DeleteOrgsCallCount() int {
	fake.deleteOrgsMutex.RLock()
	defer fake.deleteOrgsMutex.RUnlock()
	return len(fake.deleteOrgsArgsForCall)
}

func (fake *FakeManager) DeleteOrgsReturns(result1 error) {
	fake.DeleteOrgsStub = nil
	fake.deleteOrgsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) GetOrgGUID(orgName string) (string, error) {
	fake.getOrgGUIDMutex.Lock()
	fake.getOrgGUIDArgsForCall = append(fake.getOrgGUIDArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("GetOrgGUID", []interface{}{orgName})
	fake.getOrgGUIDMutex.Unlock()
	if fake.GetOrgGUIDStub != nil {
		return fake.GetOrgGUIDStub(orgName)
	} else {
		return fake.getOrgGUIDReturns.result1, fake.getOrgGUIDReturns.result2
	}
}

func (fake *FakeManager) GetOrgGUIDCallCount() int {
	fake.getOrgGUIDMutex.RLock()
	defer fake.getOrgGUIDMutex.RUnlock()
	return len(fake.getOrgGUIDArgsForCall)
}

func (fake *FakeManager) GetOrgGUIDArgsForCall(i int) string {
	fake.getOrgGUIDMutex.RLock()
	defer fake.getOrgGUIDMutex.RUnlock()
	return fake.getOrgGUIDArgsForCall[i].orgName
}

func (fake *FakeManager) GetOrgGUIDReturns(result1 string, result2 error) {
	fake.GetOrgGUIDStub = nil
	fake.getOrgGUIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) UpdateOrg(orgGUID string, orgRequest go_cfclient.OrgRequest) (go_cfclient.Org, error) {
	fake.updateOrgMutex.Lock()
	fake.updateOrgArgsForCall = append(fake.updateOrgArgsForCall, struct {
		orgGUID    string
		orgRequest go_cfclient.OrgRequest
	}{orgGUID, orgRequest})
	fake.recordInvocation("UpdateOrg", []interface{}{orgGUID, orgRequest})
	fake.updateOrgMutex.Unlock()
	if fake.UpdateOrgStub != nil {
		return fake.UpdateOrgStub(orgGUID, orgRequest)
	} else {
		return fake.updateOrgReturns.result1, fake.updateOrgReturns.result2
	}
}

func (fake *FakeManager) UpdateOrgCallCount() int {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	return len(fake.updateOrgArgsForCall)
}

func (fake *FakeManager) UpdateOrgArgsForCall(i int) (string, go_cfclient.OrgRequest) {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	return fake.updateOrgArgsForCall[i].orgGUID, fake.updateOrgArgsForCall[i].orgRequest
}

func (fake *FakeManager) UpdateOrgReturns(result1 go_cfclient.Org, result2 error) {
	fake.UpdateOrgStub = nil
	fake.updateOrgReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgByGUID(orgGUID string) (go_cfclient.Org, error) {
	fake.getOrgByGUIDMutex.Lock()
	fake.getOrgByGUIDArgsForCall = append(fake.getOrgByGUIDArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("GetOrgByGUID", []interface{}{orgGUID})
	fake.getOrgByGUIDMutex.Unlock()
	if fake.GetOrgByGUIDStub != nil {
		return fake.GetOrgByGUIDStub(orgGUID)
	} else {
		return fake.getOrgByGUIDReturns.result1, fake.getOrgByGUIDReturns.result2
	}
}

func (fake *FakeManager) GetOrgByGUIDCallCount() int {
	fake.getOrgByGUIDMutex.RLock()
	defer fake.getOrgByGUIDMutex.RUnlock()
	return len(fake.getOrgByGUIDArgsForCall)
}

func (fake *FakeManager) GetOrgByGUIDArgsForCall(i int) string {
	fake.getOrgByGUIDMutex.RLock()
	defer fake.getOrgByGUIDMutex.RUnlock()
	return fake.getOrgByGUIDArgsForCall[i].orgGUID
}

func (fake *FakeManager) GetOrgByGUIDReturns(result1 go_cfclient.Org, result2 error) {
	fake.GetOrgByGUIDStub = nil
	fake.getOrgByGUIDReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.listOrgSharedPrivateDomainsMutex.RLock()
	defer fake.listOrgSharedPrivateDomainsMutex.RUnlock()
	fake.listOrgOwnedPrivateDomainsMutex.RLock()
	defer fake.listOrgOwnedPrivateDomainsMutex.RUnlock()
	fake.findOrgMutex.RLock()
	defer fake.findOrgMutex.RUnlock()
	fake.createOrgsMutex.RLock()
	defer fake.createOrgsMutex.RUnlock()
	fake.createPrivateDomainsMutex.RLock()
	defer fake.createPrivateDomainsMutex.RUnlock()
	fake.sharePrivateDomainsMutex.RLock()
	defer fake.sharePrivateDomainsMutex.RUnlock()
	fake.deleteOrgsMutex.RLock()
	defer fake.deleteOrgsMutex.RUnlock()
	fake.getOrgGUIDMutex.RLock()
	defer fake.getOrgGUIDMutex.RUnlock()
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	fake.getOrgByGUIDMutex.RLock()
	defer fake.getOrgByGUIDMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ organization.Manager = new(FakeManager)
