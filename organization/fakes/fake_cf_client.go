// This file was generated by counterfeiter
package fakes

import (
	"sync"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/cf-mgmt/organization"
)

type FakeCFClient struct {
	ListOrgsStub        func() ([]go_cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []go_cfclient.Org
		result2 error
	}
	DeleteOrgStub        func(guid string, recursive, async bool) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		guid      string
		recursive bool
		async     bool
	}
	deleteOrgReturns struct {
		result1 error
	}
	CreateOrgStub        func(req go_cfclient.OrgRequest) (go_cfclient.Org, error)
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		req go_cfclient.OrgRequest
	}
	createOrgReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	GetOrgByGuidStub        func(guid string) (go_cfclient.Org, error)
	getOrgByGuidMutex       sync.RWMutex
	getOrgByGuidArgsForCall []struct {
		guid string
	}
	getOrgByGuidReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	UpdateOrgStub        func(orgGUID string, orgRequest go_cfclient.OrgRequest) (go_cfclient.Org, error)
	updateOrgMutex       sync.RWMutex
	updateOrgArgsForCall []struct {
		orgGUID    string
		orgRequest go_cfclient.OrgRequest
	}
	updateOrgReturns struct {
		result1 go_cfclient.Org
		result2 error
	}
	ListDomainsStub        func() ([]go_cfclient.Domain, error)
	listDomainsMutex       sync.RWMutex
	listDomainsArgsForCall []struct{}
	listDomainsReturns     struct {
		result1 []go_cfclient.Domain
		result2 error
	}
	CreateDomainStub        func(name, orgGuid string) (*go_cfclient.Domain, error)
	createDomainMutex       sync.RWMutex
	createDomainArgsForCall []struct {
		name    string
		orgGuid string
	}
	createDomainReturns struct {
		result1 *go_cfclient.Domain
		result2 error
	}
	ShareOrgPrivateDomainStub        func(orgGUID, privateDomainGUID string) (*go_cfclient.Domain, error)
	shareOrgPrivateDomainMutex       sync.RWMutex
	shareOrgPrivateDomainArgsForCall []struct {
		orgGUID           string
		privateDomainGUID string
	}
	shareOrgPrivateDomainReturns struct {
		result1 *go_cfclient.Domain
		result2 error
	}
	ListOrgPrivateDomainsStub        func(orgGUID string) ([]go_cfclient.Domain, error)
	listOrgPrivateDomainsMutex       sync.RWMutex
	listOrgPrivateDomainsArgsForCall []struct {
		orgGUID string
	}
	listOrgPrivateDomainsReturns struct {
		result1 []go_cfclient.Domain
		result2 error
	}
	DeleteDomainStub        func(guid string) error
	deleteDomainMutex       sync.RWMutex
	deleteDomainArgsForCall []struct {
		guid string
	}
	deleteDomainReturns struct {
		result1 error
	}
	UnshareOrgPrivateDomainStub        func(orgGUID, privateDomainGUID string) error
	unshareOrgPrivateDomainMutex       sync.RWMutex
	unshareOrgPrivateDomainArgsForCall []struct {
		orgGUID           string
		privateDomainGUID string
	}
	unshareOrgPrivateDomainReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListOrgs() ([]go_cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	} else {
		return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeCFClient) ListOrgsReturns(result1 []go_cfclient.Org, result2 error) {
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteOrg(guid string, recursive bool, async bool) error {
	fake.deleteOrgMutex.Lock()
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		guid      string
		recursive bool
		async     bool
	}{guid, recursive, async})
	fake.recordInvocation("DeleteOrg", []interface{}{guid, recursive, async})
	fake.deleteOrgMutex.Unlock()
	if fake.DeleteOrgStub != nil {
		return fake.DeleteOrgStub(guid, recursive, async)
	} else {
		return fake.deleteOrgReturns.result1
	}
}

func (fake *FakeCFClient) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeCFClient) DeleteOrgArgsForCall(i int) (string, bool, bool) {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return fake.deleteOrgArgsForCall[i].guid, fake.deleteOrgArgsForCall[i].recursive, fake.deleteOrgArgsForCall[i].async
}

func (fake *FakeCFClient) DeleteOrgReturns(result1 error) {
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateOrg(req go_cfclient.OrgRequest) (go_cfclient.Org, error) {
	fake.createOrgMutex.Lock()
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		req go_cfclient.OrgRequest
	}{req})
	fake.recordInvocation("CreateOrg", []interface{}{req})
	fake.createOrgMutex.Unlock()
	if fake.CreateOrgStub != nil {
		return fake.CreateOrgStub(req)
	} else {
		return fake.createOrgReturns.result1, fake.createOrgReturns.result2
	}
}

func (fake *FakeCFClient) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeCFClient) CreateOrgArgsForCall(i int) go_cfclient.OrgRequest {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return fake.createOrgArgsForCall[i].req
}

func (fake *FakeCFClient) CreateOrgReturns(result1 go_cfclient.Org, result2 error) {
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgByGuid(guid string) (go_cfclient.Org, error) {
	fake.getOrgByGuidMutex.Lock()
	fake.getOrgByGuidArgsForCall = append(fake.getOrgByGuidArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetOrgByGuid", []interface{}{guid})
	fake.getOrgByGuidMutex.Unlock()
	if fake.GetOrgByGuidStub != nil {
		return fake.GetOrgByGuidStub(guid)
	} else {
		return fake.getOrgByGuidReturns.result1, fake.getOrgByGuidReturns.result2
	}
}

func (fake *FakeCFClient) GetOrgByGuidCallCount() int {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	return len(fake.getOrgByGuidArgsForCall)
}

func (fake *FakeCFClient) GetOrgByGuidArgsForCall(i int) string {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	return fake.getOrgByGuidArgsForCall[i].guid
}

func (fake *FakeCFClient) GetOrgByGuidReturns(result1 go_cfclient.Org, result2 error) {
	fake.GetOrgByGuidStub = nil
	fake.getOrgByGuidReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrg(orgGUID string, orgRequest go_cfclient.OrgRequest) (go_cfclient.Org, error) {
	fake.updateOrgMutex.Lock()
	fake.updateOrgArgsForCall = append(fake.updateOrgArgsForCall, struct {
		orgGUID    string
		orgRequest go_cfclient.OrgRequest
	}{orgGUID, orgRequest})
	fake.recordInvocation("UpdateOrg", []interface{}{orgGUID, orgRequest})
	fake.updateOrgMutex.Unlock()
	if fake.UpdateOrgStub != nil {
		return fake.UpdateOrgStub(orgGUID, orgRequest)
	} else {
		return fake.updateOrgReturns.result1, fake.updateOrgReturns.result2
	}
}

func (fake *FakeCFClient) UpdateOrgCallCount() int {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	return len(fake.updateOrgArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgArgsForCall(i int) (string, go_cfclient.OrgRequest) {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	return fake.updateOrgArgsForCall[i].orgGUID, fake.updateOrgArgsForCall[i].orgRequest
}

func (fake *FakeCFClient) UpdateOrgReturns(result1 go_cfclient.Org, result2 error) {
	fake.UpdateOrgStub = nil
	fake.updateOrgReturns = struct {
		result1 go_cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListDomains() ([]go_cfclient.Domain, error) {
	fake.listDomainsMutex.Lock()
	fake.listDomainsArgsForCall = append(fake.listDomainsArgsForCall, struct{}{})
	fake.recordInvocation("ListDomains", []interface{}{})
	fake.listDomainsMutex.Unlock()
	if fake.ListDomainsStub != nil {
		return fake.ListDomainsStub()
	} else {
		return fake.listDomainsReturns.result1, fake.listDomainsReturns.result2
	}
}

func (fake *FakeCFClient) ListDomainsCallCount() int {
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	return len(fake.listDomainsArgsForCall)
}

func (fake *FakeCFClient) ListDomainsReturns(result1 []go_cfclient.Domain, result2 error) {
	fake.ListDomainsStub = nil
	fake.listDomainsReturns = struct {
		result1 []go_cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateDomain(name string, orgGuid string) (*go_cfclient.Domain, error) {
	fake.createDomainMutex.Lock()
	fake.createDomainArgsForCall = append(fake.createDomainArgsForCall, struct {
		name    string
		orgGuid string
	}{name, orgGuid})
	fake.recordInvocation("CreateDomain", []interface{}{name, orgGuid})
	fake.createDomainMutex.Unlock()
	if fake.CreateDomainStub != nil {
		return fake.CreateDomainStub(name, orgGuid)
	} else {
		return fake.createDomainReturns.result1, fake.createDomainReturns.result2
	}
}

func (fake *FakeCFClient) CreateDomainCallCount() int {
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	return len(fake.createDomainArgsForCall)
}

func (fake *FakeCFClient) CreateDomainArgsForCall(i int) (string, string) {
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	return fake.createDomainArgsForCall[i].name, fake.createDomainArgsForCall[i].orgGuid
}

func (fake *FakeCFClient) CreateDomainReturns(result1 *go_cfclient.Domain, result2 error) {
	fake.CreateDomainStub = nil
	fake.createDomainReturns = struct {
		result1 *go_cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ShareOrgPrivateDomain(orgGUID string, privateDomainGUID string) (*go_cfclient.Domain, error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	fake.shareOrgPrivateDomainArgsForCall = append(fake.shareOrgPrivateDomainArgsForCall, struct {
		orgGUID           string
		privateDomainGUID string
	}{orgGUID, privateDomainGUID})
	fake.recordInvocation("ShareOrgPrivateDomain", []interface{}{orgGUID, privateDomainGUID})
	fake.shareOrgPrivateDomainMutex.Unlock()
	if fake.ShareOrgPrivateDomainStub != nil {
		return fake.ShareOrgPrivateDomainStub(orgGUID, privateDomainGUID)
	} else {
		return fake.shareOrgPrivateDomainReturns.result1, fake.shareOrgPrivateDomainReturns.result2
	}
}

func (fake *FakeCFClient) ShareOrgPrivateDomainCallCount() int {
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	return len(fake.shareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) ShareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	return fake.shareOrgPrivateDomainArgsForCall[i].orgGUID, fake.shareOrgPrivateDomainArgsForCall[i].privateDomainGUID
}

func (fake *FakeCFClient) ShareOrgPrivateDomainReturns(result1 *go_cfclient.Domain, result2 error) {
	fake.ShareOrgPrivateDomainStub = nil
	fake.shareOrgPrivateDomainReturns = struct {
		result1 *go_cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgPrivateDomains(orgGUID string) ([]go_cfclient.Domain, error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	fake.listOrgPrivateDomainsArgsForCall = append(fake.listOrgPrivateDomainsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("ListOrgPrivateDomains", []interface{}{orgGUID})
	fake.listOrgPrivateDomainsMutex.Unlock()
	if fake.ListOrgPrivateDomainsStub != nil {
		return fake.ListOrgPrivateDomainsStub(orgGUID)
	} else {
		return fake.listOrgPrivateDomainsReturns.result1, fake.listOrgPrivateDomainsReturns.result2
	}
}

func (fake *FakeCFClient) ListOrgPrivateDomainsCallCount() int {
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgPrivateDomainsArgsForCall)
}

func (fake *FakeCFClient) ListOrgPrivateDomainsArgsForCall(i int) string {
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	return fake.listOrgPrivateDomainsArgsForCall[i].orgGUID
}

func (fake *FakeCFClient) ListOrgPrivateDomainsReturns(result1 []go_cfclient.Domain, result2 error) {
	fake.ListOrgPrivateDomainsStub = nil
	fake.listOrgPrivateDomainsReturns = struct {
		result1 []go_cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteDomain(guid string) error {
	fake.deleteDomainMutex.Lock()
	fake.deleteDomainArgsForCall = append(fake.deleteDomainArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("DeleteDomain", []interface{}{guid})
	fake.deleteDomainMutex.Unlock()
	if fake.DeleteDomainStub != nil {
		return fake.DeleteDomainStub(guid)
	} else {
		return fake.deleteDomainReturns.result1
	}
}

func (fake *FakeCFClient) DeleteDomainCallCount() int {
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	return len(fake.deleteDomainArgsForCall)
}

func (fake *FakeCFClient) DeleteDomainArgsForCall(i int) string {
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	return fake.deleteDomainArgsForCall[i].guid
}

func (fake *FakeCFClient) DeleteDomainReturns(result1 error) {
	fake.DeleteDomainStub = nil
	fake.deleteDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomain(orgGUID string, privateDomainGUID string) error {
	fake.unshareOrgPrivateDomainMutex.Lock()
	fake.unshareOrgPrivateDomainArgsForCall = append(fake.unshareOrgPrivateDomainArgsForCall, struct {
		orgGUID           string
		privateDomainGUID string
	}{orgGUID, privateDomainGUID})
	fake.recordInvocation("UnshareOrgPrivateDomain", []interface{}{orgGUID, privateDomainGUID})
	fake.unshareOrgPrivateDomainMutex.Unlock()
	if fake.UnshareOrgPrivateDomainStub != nil {
		return fake.UnshareOrgPrivateDomainStub(orgGUID, privateDomainGUID)
	} else {
		return fake.unshareOrgPrivateDomainReturns.result1
	}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCallCount() int {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	return len(fake.unshareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	return fake.unshareOrgPrivateDomainArgsForCall[i].orgGUID, fake.unshareOrgPrivateDomainArgsForCall[i].privateDomainGUID
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturns(result1 error) {
	fake.UnshareOrgPrivateDomainStub = nil
	fake.unshareOrgPrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ organization.CFClient = new(FakeCFClient)
