// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pivotalservices/cf-mgmt/organization (interfaces: Manager)

// Package mock_organization is a generated GoMock package.
package mock_organization

import (
	reflect "reflect"

	go_cfclient "github.com/cloudfoundry-community/go-cfclient"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateOrgs mocks base method
func (m *MockManager) CreateOrgs() error {
	ret := m.ctrl.Call(m, "CreateOrgs")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrgs indicates an expected call of CreateOrgs
func (mr *MockManagerMockRecorder) CreateOrgs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgs", reflect.TypeOf((*MockManager)(nil).CreateOrgs))
}

// CreatePrivateDomains mocks base method
func (m *MockManager) CreatePrivateDomains() error {
	ret := m.ctrl.Call(m, "CreatePrivateDomains")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePrivateDomains indicates an expected call of CreatePrivateDomains
func (mr *MockManagerMockRecorder) CreatePrivateDomains() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateDomains", reflect.TypeOf((*MockManager)(nil).CreatePrivateDomains))
}

// CreateQuotas mocks base method
func (m *MockManager) CreateQuotas() error {
	ret := m.ctrl.Call(m, "CreateQuotas")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuotas indicates an expected call of CreateQuotas
func (mr *MockManagerMockRecorder) CreateQuotas() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotas", reflect.TypeOf((*MockManager)(nil).CreateQuotas))
}

// DeleteOrgs mocks base method
func (m *MockManager) DeleteOrgs() error {
	ret := m.ctrl.Call(m, "DeleteOrgs")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrgs indicates an expected call of DeleteOrgs
func (mr *MockManagerMockRecorder) DeleteOrgs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgs", reflect.TypeOf((*MockManager)(nil).DeleteOrgs))
}

// FindOrg mocks base method
func (m *MockManager) FindOrg(arg0 string) (go_cfclient.Org, error) {
	ret := m.ctrl.Call(m, "FindOrg", arg0)
	ret0, _ := ret[0].(go_cfclient.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrg indicates an expected call of FindOrg
func (mr *MockManagerMockRecorder) FindOrg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrg", reflect.TypeOf((*MockManager)(nil).FindOrg), arg0)
}

// GetOrgGUID mocks base method
func (m *MockManager) GetOrgGUID(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetOrgGUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgGUID indicates an expected call of GetOrgGUID
func (mr *MockManagerMockRecorder) GetOrgGUID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgGUID", reflect.TypeOf((*MockManager)(nil).GetOrgGUID), arg0)
}

// SharePrivateDomains mocks base method
func (m *MockManager) SharePrivateDomains() error {
	ret := m.ctrl.Call(m, "SharePrivateDomains")
	ret0, _ := ret[0].(error)
	return ret0
}

// SharePrivateDomains indicates an expected call of SharePrivateDomains
func (mr *MockManagerMockRecorder) SharePrivateDomains() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharePrivateDomains", reflect.TypeOf((*MockManager)(nil).SharePrivateDomains))
}

// UpdateOrgUsers mocks base method
func (m *MockManager) UpdateOrgUsers(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "UpdateOrgUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrgUsers indicates an expected call of UpdateOrgUsers
func (mr *MockManagerMockRecorder) UpdateOrgUsers(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgUsers", reflect.TypeOf((*MockManager)(nil).UpdateOrgUsers), arg0, arg1)
}
