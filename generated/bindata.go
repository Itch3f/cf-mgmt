// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x28\x4b\x2d\x2a\xce\xcc\xcf\x83\xf3\x55\x9c\xdd\xe2\x7d\xdd\x7d\x43\xe2\x9d\xfd\x7d\x7d\x1d\xfd\x5c\xb8\x00\x01\x00\x00\xff\xff\x22\x7d\xfc\x6e\x53\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 83, mode: os.FileMode(493), modTime: time.Unix(1556910560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x6a\x03\x21\x14\x85\xf7\x3e\xc5\x25\xeb\xda\xec\xdd\x0d\x19\x13\x06\xe6\x27\xe8\x34\xa5\x2b\x11\x6b\x26\x92\x38\x8a\x3a\xa1\xa1\x34\xcf\x5e\x94\x10\xda\xdd\x3d\xdf\xc7\x39\x28\xc6\x18\xf9\x8b\x4c\x47\x17\x2c\x81\x8b\x99\x97\x2f\x84\x8c\x95\x93\x16\x41\x47\xb7\x04\xa5\x09\x02\x48\x37\xaf\x09\x7c\x3a\x75\xd6\x01\x17\x8d\x00\x1e\x1a\xbe\x83\xf6\x2e\x9a\xe4\xc2\x8d\x80\x37\x57\x97\xe4\x25\xea\x70\x35\x4a\xc7\xb5\x3a\x62\x3b\xd9\xf4\x02\x49\x4e\x04\x56\xf7\x03\x65\xbc\x19\xfa\xfb\xea\x07\x21\x33\xfb\x25\xc5\xbc\x8f\x61\x96\x56\x13\x50\x6e\x3e\x9a\x09\xe7\x41\x84\xbc\x0c\xd2\x16\xcd\x3f\xf8\x48\x3b\x51\x0f\x5d\xd5\xf4\x19\xbc\x71\xca\x44\x53\xe7\x73\x5f\x71\xfe\x3e\xb0\x72\x6f\x86\x7e\xdb\xec\x44\xdd\xb0\x92\xda\x86\xf6\xa3\xe0\x74\xc3\xe8\x98\x41\x5b\x57\x7b\x91\xab\xcf\xf0\xb7\x5c\x00\xa7\xec\xf0\xf0\xc3\x4e\xb4\xf4\x40\xdb\x32\xb5\x15\xdd\xae\x1b\xc5\x66\xe8\xba\xaa\xaf\x09\x0a\xcb\x9c\xb9\x97\xe9\xf4\xef\xd5\x6b\x65\xd6\x49\xc6\xf3\xf3\xe3\xaf\xf1\x84\x7e\x03\x00\x00\xff\xff\x4c\x6f\xbb\xac\x65\x01\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1556911879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x5b\x6f\xe2\x3a\x10\xc7\xdf\xf9\x14\x23\xce\x0b\x48\xe4\xf4\x3d\x6f\xa8\xa4\x15\x12\x97\x0a\x38\x3d\x5a\x55\x95\xe5\x26\x43\xf0\x6e\x6e\x6b\x3b\x54\x7c\xfb\x95\x93\x34\x04\x27\xe1\x16\x56\xad\xd4\xbc\x55\xcc\x64\x66\xf2\xff\x79\x9c\xb1\xcb\x51\x84\x31\xb7\x51\x98\x1d\x03\x02\xea\xa3\x09\x76\x18\xac\x99\x6b\x70\x8c\xc2\x0e\x80\xdc\x45\x68\x82\xcb\x64\x07\x20\x75\x35\x3b\x00\x00\x31\x67\x26\xf4\x7a\x2e\x93\x44\x79\x92\x98\xb3\x7e\x3f\xb1\xbc\x71\x1a\xd8\x9b\x03\x63\xfa\x53\x66\xff\x07\xc2\xc0\xdb\xc1\x3b\x95\xf6\x06\xd6\x21\x07\x7b\x43\x03\x17\x05\xb0\x20\xcb\x0d\x0e\xe3\x68\xcb\x90\xef\x92\x07\x22\x2a\x37\xc2\x84\x97\xae\xcd\xba\x03\xe8\xf6\x7a\xa9\x17\x71\x18\xef\xf7\xbb\xaf\x79\xe1\x92\xf9\x68\x48\xce\x5c\x17\x79\x5e\xb9\xfa\x51\x2b\x9d\x05\x12\xf9\x96\x7a\xaa\xc4\xe2\x33\xfd\x7e\xa7\xf3\x33\x7c\x2b\x4a\xc1\x91\x4a\x34\x42\xee\x8a\x0e\x40\xe4\xd1\x40\x45\x30\xc0\x45\xa9\xeb\x04\x90\x45\x31\x41\xf2\x18\x13\x37\x49\xc5\x2f\x3d\x08\xc0\x9a\x79\x87\x2a\xdf\xd9\xec\x4e\xb9\x8a\x3b\x7b\x6d\xf8\xae\x2f\xff\xdd\xf9\x5e\xf6\xe6\x9c\xfa\x22\xad\x1a\x60\xf9\x63\xb9\xb2\xa6\x64\x34\x9f\x0e\xc7\x33\x55\xbc\xd8\x09\x89\x3e\x71\x42\x9f\xb2\x20\x53\x17\xe0\xbf\xa5\xb5\x20\xe3\x91\x72\x88\x05\x72\xc2\x9c\xdc\xf4\x34\x5c\x2e\xff\x9f\x2f\x12\x5b\x44\x85\x78\x0f\xf9\xde\x78\x3f\x9f\x3d\x8c\x1f\xc9\x68\xbc\x50\xe6\xa2\xc6\x1f\x0e\x93\xb1\x35\x5b\x91\xa5\x75\xbf\xb0\x56\x89\x8f\xc7\x30\x90\x44\xa0\xcd\x51\xe6\x6e\x93\xf9\x23\x99\x58\xcf\xd6\x44\xb9\x78\xa1\x4b\x3c\xdc\xa2\xb7\x8f\xf2\x40\xa6\x8f\xd3\x15\xb9\x9f\x4f\xa7\xc3\xd9\xe8\x50\x9f\x5c\x79\xb1\xa1\x1c\x1d\x23\x7d\xb5\x06\xe2\x97\xe2\xb4\xfa\xeb\xfa\x6b\x12\xe9\x8b\x5f\xa0\x1d\x73\x26\x77\x86\xcb\xc3\x38\x6a\xde\x07\xe5\x78\x2d\x92\x9a\x96\xd0\xa5\xca\xd1\x50\x21\x98\x1b\x18\x0e\xae\x69\xec\xc9\xe6\x88\x94\xac\x42\xa0\x63\xc2\x4b\x75\xea\xd7\x02\xc7\x93\xc9\x5b\x9e\x3a\xcf\x13\x92\xe5\x5c\x1d\xf4\xb0\xc1\xf7\x26\x71\xd3\xbe\x82\xf5\xfd\x78\x98\xac\x85\xa6\x43\x2b\xea\x93\x13\x8a\x23\xe7\xe3\x63\x65\xf8\x28\xa9\x43\x25\x3d\x8d\x4a\xef\x2e\xf5\xf8\xeb\x51\x38\x35\x79\x5a\x4a\x3a\xa5\x4a\xa1\x2a\x06\x38\x23\xe2\x6c\xab\xfe\x3e\x7b\xa4\xb8\x1c\xda\xd1\x6c\x2d\xba\xfa\xc1\xaf\x24\xd7\x7e\x0e\x44\xbe\x65\x36\x1a\xd4\xb6\x51\xfc\x15\x68\xa5\x0c\x2d\xa8\xd2\x84\x78\x28\xd1\xe1\x90\x7e\xb3\xe6\xd2\x83\x9c\xc0\x76\x24\x77\x4b\xb0\x72\xc6\x3f\xde\x69\x1f\x83\x5f\x44\x6d\xbc\xb2\xd1\x06\x85\xdd\xd8\x50\xba\x9c\xb7\x5f\xe6\x29\x5b\x6e\x75\x07\x81\x54\x21\x7d\x4e\x6c\xc2\xaa\x8e\xcc\x55\x33\x64\x4b\xf0\xd4\x14\xa9\x13\xcc\x1a\xe5\x5a\x82\xe9\x73\xb7\x61\xa8\x97\xd2\x32\xac\x99\x31\x8f\x32\x6c\x70\x1a\x38\x0e\xb3\x02\x52\x7b\x22\x38\x9b\x56\xc5\x99\xa0\x68\x4f\xbf\x52\x5f\xa7\xff\xf2\x7a\xbe\x01\xd6\xd1\xf0\x89\xa8\x22\x12\xac\x0e\x8d\x88\x2a\xe3\xd0\x5c\x2c\x24\x71\x29\x55\x93\xb8\x2d\xad\xc5\x73\x21\x8e\x1a\x57\x8b\x91\x1a\xac\x9f\x8c\x47\xf5\xda\xf9\x1d\x87\x92\xde\x7c\xf1\x54\x2c\x8a\x3c\xd1\x37\x58\x15\x4d\x60\x65\x3a\x55\xd3\xba\xf8\x92\xb4\x1a\xdb\xa0\xfe\x82\xf4\x4c\x9a\xed\x85\xe9\x85\x58\x6b\xaf\x4b\xf5\xd3\xc6\x67\x4e\xc2\x15\xb5\x7c\x03\xac\x5f\x7c\x0f\xdf\xd3\xa8\x5a\x33\xd7\xee\xdf\x97\xdc\xde\xb6\x7b\xf7\x59\x90\xf4\x9d\x9b\x89\xd0\xa3\x92\x85\x81\x21\xd0\xf5\x31\x90\x37\xf9\xa7\x56\x7a\x47\x51\xfa\x0a\x5f\xda\xea\x95\xc5\x7d\x2a\xde\x33\x01\x9d\x04\x7d\x29\xc1\x0a\x25\xf6\xf7\x49\x1e\xd2\x20\x8e\xae\xda\x9d\xf5\xf6\x1d\x94\x67\xb2\xdb\xec\xda\x55\x45\xb6\x8d\x5a\xba\x85\x2a\xa9\xf4\x27\x00\x00\xff\xff\xc1\x52\x91\x33\x37\x24\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 9271, mode: os.FileMode(420), modTime: time.Unix(1556912020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x51\xc1\x8a\x14\x31\x10\xbd\xe7\x2b\x1e\x3b\xe7\xd9\xc5\x83\x97\xbe\x2d\xee\x0a\x82\xe8\x22\x7a\x6e\x32\x49\x75\xa6\x24\x49\x35\x95\xea\x19\xfa\xef\x25\xdd\xb3\x8a\x82\x08\x9e\xba\x5f\xf2\xde\xab\x57\x2f\x87\x55\x16\x45\x62\x83\xd2\x2c\x58\x94\x5d\x62\x1b\x3b\x18\x17\xe5\xe1\x17\x3a\xa9\xaf\xe1\x3c\xa0\xf8\x66\xa4\x6e\x17\x86\x09\x6d\x6d\x46\x05\x51\x8a\xe7\xea\x76\x34\xee\x68\x70\x07\x2c\x8d\x14\x3e\x04\x59\xaa\xe1\xca\x76\xc6\x4c\x5a\xb8\x35\x96\x0a\x13\x04\x25\x6f\x04\xd1\xd4\x1e\xda\xec\x03\x35\xd7\x25\x23\xc7\xae\x7e\x7a\x7e\xf9\xf2\xfc\xee\xf1\xeb\xf3\x13\x8e\xf8\xd6\x08\x21\x33\x55\x1b\x1b\x05\x25\xc3\x11\xb3\x6f\xed\x2a\x1a\x21\xd3\xff\x8c\x7a\x95\x0f\xb8\xbb\x73\x87\x9b\x3b\x6e\xee\x93\x28\x16\xef\xc3\xfe\xb3\x87\x72\xbf\x05\xe8\x11\x7f\x26\x30\xc1\x89\xeb\xf6\xcd\xd1\xcf\x38\x42\x6a\x5e\x51\x89\x22\x45\x70\xcf\xc7\x35\xe1\xe3\xd3\xe3\x8b\xeb\x84\xf1\x8f\xe1\x59\x52\xea\x84\x4c\x17\xca\xdb\xcc\x30\x1d\x4b\x2a\x86\x20\xa5\xf8\x1a\x1b\xb8\xc2\xce\x84\x99\x67\xca\x5c\xc9\x65\x49\xe3\x46\x1f\xf0\xe1\xd3\xfb\xcf\xee\x00\xe3\x42\xe0\x6a\xa4\x17\x9f\x7b\x14\x53\x4e\x89\x14\xcb\x1c\xbd\xd1\x43\xa4\x4c\x46\xf8\x2e\xa7\x06\xa9\xae\xd3\x8f\x37\xca\x80\x37\x6f\x8b\xeb\x2d\x48\x9d\x38\x2d\xea\xad\x17\x17\x59\x29\x98\xe8\xea\xf6\xf3\x31\xb2\x0e\xb8\x7f\xd8\x51\xe7\xfb\x9c\xe5\x8a\x36\x53\xe0\x69\xdd\x36\xe8\xeb\x37\xd2\x0b\x69\x8f\xfc\x1a\x17\x97\x6d\x83\x7e\x7b\xbf\x96\xbc\x97\xb0\xd3\xb6\x0a\xfe\x6a\xb5\xd5\xba\xbd\xee\xbf\xdc\x3a\x69\xf3\xfa\x11\x00\x00\xff\xff\x64\x16\x72\x4a\xd8\x02\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 728, mode: os.FileMode(420), modTime: time.Unix(1556818814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

