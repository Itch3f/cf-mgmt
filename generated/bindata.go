// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x01\xa4\x8d\xe9\x76\xef\x01\x1b\x55\x8e\x98\x7a\xdb\x24\x87\xbb\x03\xd0\xd9\x6e\x1b\xe4\xfb\x9b\xac\x49\x56\x27\x3b\x5e\xf5\xa7\xed\xf0\x1f\x00\x00\xff\xff\x06\xd9\x38\x16\xc7\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 199, mode: os.FileMode(420), modTime: time.Unix(1554829763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x4d\x6f\xe2\x3c\x10\xc7\xef\x7c\x8a\x39\x16\xa9\x29\xf7\xdc\x50\x49\x2b\x24\x5e\x2a\xc2\xd3\x47\xab\x55\x65\xb9\xc9\x90\x7a\x37\x6f\x6b\x3b\xac\xf8\xf6\x2b\x27\x34\x2f\x8e\x29\x94\xb0\xea\x0a\xe5\x86\xe2\xc9\xcc\xe4\xff\xf3\xd8\xc3\x70\x14\x49\xc6\x3d\x14\xf6\xc0\x82\x98\x46\x68\x83\x97\xc4\x1b\x16\x58\x1c\xd3\x64\x00\x20\x77\x29\xda\x10\x30\x39\x00\x28\x4c\xed\x01\x00\x40\xc6\x99\x0d\x37\x37\x01\x93\x44\x59\x92\x8c\xb3\xe1\x30\x5f\x79\xe5\x34\xf6\xde\x1a\x8b\xc5\xa3\xe1\xb0\x8c\x21\x59\x84\x96\xe4\x2c\x08\x90\x97\x41\xd4\x43\x2d\x0a\x8b\x25\xf2\x2d\x0d\x95\xb7\xfa\x3b\xc3\xe1\x60\xf0\x23\x79\xad\x67\xcd\x91\x4a\xb4\x12\x1e\x88\x01\x40\x1a\xd2\x58\x79\xb0\x20\x40\xa9\x7f\x12\xc0\xde\x8b\x0d\x92\x67\x98\x9b\x49\x2a\x7e\xea\x4e\x00\x36\x2c\x6c\x0a\x32\xf2\xd8\x48\x99\x8a\x91\xb7\xb1\xa2\x20\x92\x77\xbb\x28\xcc\x4d\x53\xca\x69\x24\x8a\xac\x01\xdc\x6f\xee\xda\x99\x93\xc9\x72\x3e\x9e\x2e\x54\xf2\x62\x27\x24\x46\xc4\x4f\x22\xca\xe2\xbd\x50\x00\xff\xb9\xce\x8a\x4c\x27\xca\x20\x13\xc8\x09\xf3\xcb\xa5\xa7\xb1\xeb\xfe\xbf\x5c\xe5\x6b\x29\x15\xe2\x77\xc2\xab\xc5\xfb\xe5\xe2\x61\xfa\x48\x26\xd3\x95\x0d\x77\xa3\x22\xbf\xf7\xa5\xd9\xd4\x59\xac\x89\xeb\xdc\xaf\x9c\xb5\x7a\xd9\x0b\x19\xc6\x92\x08\xf4\x38\xca\xd2\xc3\x6c\xf9\x48\x66\xce\xb3\x33\x53\x26\x61\x12\x90\x10\xb7\x18\x56\x01\x1e\xc8\xfc\x71\xbe\x26\xf7\xcb\xf9\x7c\xbc\x98\x34\x95\x29\x35\x17\x6f\x94\xa3\x6f\x15\x1f\xd5\x41\xf6\x96\x9f\x5e\xf9\x4a\x79\x4d\x1c\x7d\xc3\x0b\xf4\x32\xce\xe4\xce\x0a\x78\x92\xa5\xdd\xf7\x7e\xdb\x5f\x0f\xa3\x55\x06\xba\x48\x25\x14\x2a\x04\x0b\x62\xcb\xc7\x0d\xcd\x42\xd9\x1d\x8e\x12\x54\x08\xf4\x6d\xf8\x6e\x0e\xfd\x52\x23\x78\x34\x78\x4f\xb2\x22\x79\x44\xac\x92\xa8\x8f\x21\x76\xb8\x57\x72\x33\xed\xb6\x3b\x5c\x83\xcd\x60\x3d\xae\x0a\x57\x5d\x19\xc3\x9d\x6f\xa5\x9c\x6d\xd5\xef\x93\xef\x22\xbd\xae\x94\xe7\x97\x13\x9b\x03\x43\xb4\x9e\x95\xa9\x57\x68\x09\x55\xb5\x0e\xc8\xb7\xcc\x43\x8b\x7a\x1e\x8a\xbf\x82\xab\x15\xa1\x47\x54\x6b\x2a\x9a\xe2\x34\x3b\xba\x8b\x15\x94\xee\xe4\x08\xb0\x0f\x62\xf7\xec\xb4\x86\xf0\xe3\xea\x7a\xef\x15\x52\xea\xe1\x99\xc5\x75\x0b\x59\xea\xbf\x73\x54\x8a\x9c\x76\x3a\x96\x21\x7b\x62\xed\xae\xb1\xd0\x46\x6f\x2d\xba\x50\x3a\xc4\xe4\xac\xb6\xa3\x67\x77\xb8\xf1\xd0\xd9\xed\x8b\xe3\x5c\x76\xc5\x7b\x97\xa1\xa7\xa7\xd2\xd3\xab\xe8\x35\xb5\x31\xd2\x2b\x0e\xb7\x7f\x07\x61\x99\xcf\x55\x73\x9c\x8c\x9f\x48\x3d\x46\xe8\xd3\x94\xb4\x02\xe5\x66\xae\xb3\x7a\x76\x56\xa5\x91\x6a\x5d\xf2\x01\x60\xf7\x1d\xb1\x97\xda\xbc\x2d\x7e\x65\x89\xa4\x17\xdf\x17\x06\xde\x65\xa0\xab\x06\xde\x05\xd3\x5e\x21\x33\xa7\x4f\xcf\x58\xcc\xc0\x6e\x0f\xcf\x57\x4e\xe4\xd8\xcf\x5b\x4e\x06\x7a\x70\xda\xa2\xf7\x9c\x5f\xd9\x15\x19\x72\xb9\x6a\xa0\x5f\x7d\x24\x57\x42\x9b\xb6\xc3\xb9\xc7\xf1\xf1\x41\x81\x29\xc8\x55\x83\x3e\x1f\x8f\x7e\x10\x33\x91\x84\x54\xb2\x24\xb6\x04\x06\x11\xc6\xf2\x22\x23\xee\xe2\xef\x67\xeb\x3a\xfd\x6c\xfd\x1a\x93\xfb\x52\xb0\x27\x02\xfa\x00\xf1\x67\xd9\x19\x34\xa8\x86\x04\x21\xd2\x38\x4b\xcf\x3a\x6c\xf5\x92\xbd\x6d\xb7\x55\x97\x39\x84\x4d\x49\xf6\xc5\x59\x1b\x2d\xb4\xf4\xf9\x13\x00\x00\xff\xff\xd8\xbb\x69\xdb\xd2\x1f\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 8146, mode: os.FileMode(420), modTime: time.Unix(1556220323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xc1\x8e\xd4\x3c\x10\x84\xef\x7e\x8a\xd2\xe6\x9c\x7f\xf5\x1f\xb8\xe4\xb6\x62\x06\x09\x09\xc1\x0a\xc1\x39\xf2\x38\x1d\x4f\x23\xdb\x1d\xb5\x3b\x33\xca\xdb\x23\x27\xb3\x20\x38\x72\x4a\x4a\xae\xea\xfa\xaa\xdb\x64\x55\x44\x36\x28\x2d\x82\x55\xd9\x45\xb6\xb1\x89\x71\x55\x1e\x7e\xab\x8b\xfa\x12\xae\x03\xb2\xaf\x46\xea\x8e\x60\x98\x51\xb7\x6a\x94\x31\x49\xf6\x5c\xdc\xa1\xc6\x43\x0d\xae\xc3\x5a\x49\xe1\x43\x90\xb5\x18\xee\x6c\x57\x2c\xa4\x99\x6b\x65\x29\x30\x41\x50\xf2\x46\x10\x8d\xf5\xb9\x2e\x3e\x50\x75\x2d\x32\xf2\xd4\xd2\xa7\xf3\xeb\xd7\xf3\xfb\x97\x6f\xe7\x13\x7a\x7c\xaf\x84\x90\x98\x8a\x8d\x95\x82\x92\xa1\xc7\xe2\x6b\xbd\x8b\x4e\x90\xf9\x5f\xaa\xde\xe2\x03\x9e\x9e\x5c\xf7\xb8\x8e\xc7\xf5\x59\x14\xab\xf7\xe1\xf8\x39\xa0\xdc\x1f\x00\x0d\xf1\x17\x81\x09\x2e\x5c\xf6\x6f\x9a\xfc\x82\x1e\x52\xd2\x86\x42\x34\xd1\x04\x6e\x7c\x5c\x22\x3e\x9d\x5e\x5e\x5d\x33\x8c\x7f\x95\x27\x89\xb1\x19\x12\xdd\x28\xed\x9d\x61\xee\x73\xcc\x86\x20\x39\xfb\x32\x55\x70\x81\x5d\x09\x0b\x2f\x94\xb8\x90\x4b\x12\xc7\xdd\x3e\xe0\xe3\xe7\x0f\x5f\x5c\x07\xe3\x4c\xe0\x62\xa4\x37\x9f\x1a\x8a\x29\xc7\x48\x8a\x75\x99\xbc\xd1\xf3\x44\x89\x8c\xf0\x43\x2e\x15\x52\x5c\xb3\xf7\x0f\xcb\x80\xff\xdf\x65\xd7\xc1\xa7\x24\x77\xd4\x85\x02\xcf\xdb\x0e\xd4\xd6\x54\xd2\x1b\x69\x23\x78\x6b\xc7\x6d\x07\x6a\xaf\xff\x6d\x39\x1d\x9b\x0e\xdb\xbe\xe8\x67\x00\x00\x00\xff\xff\xe2\x11\x10\x5e\x5b\x02\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 603, mode: os.FileMode(420), modTime: time.Unix(1556220224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

