// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1495218822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x40\xda\x98\x6e\x77\x1e\xb0\x51\xe5\x88\xa9\xb7\x4d\x72\xb8\x37\x00\x9d\xed\xb6\x41\xbe\xbf\xc9\x9a\x64\x75\xb2\xe3\x35\x7f\xda\x0e\xff\x01\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1495218822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x96\xcd\x6e\x9b\x40\x10\x80\xef\x3c\xc5\xbc\x00\xb1\x7a\xe8\x85\x9b\x65\x48\x84\x14\xec\xc8\xb8\xaa\xaa\xaa\x5a\x6d\x60\xbc\xdd\x96\x65\xe9\xec\xd2\xca\xb2\xfc\xee\x15\xe0\x80\x8d\xa9\xeb\x3a\x95\x0f\xe4\x3c\xc3\xfc\x7c\x9f\x18\x2d\xa1\xd1\x25\x25\x68\x3c\xc7\x85\x9c\x2b\xf4\x20\xd1\xf9\x5a\x0a\x97\xb0\xd0\x0e\x80\xdd\x14\xe8\x81\x90\xd6\x01\x68\x52\x3d\x07\x00\xa0\x24\xe9\xc1\x76\x2b\xa4\x65\x55\x26\x2b\x49\xee\x76\x75\xe4\x99\x78\x9e\x7c\xf5\x40\x71\x63\x91\xda\xb2\xef\xde\xab\xb6\x9c\x95\x0a\xbb\x7a\xb0\x95\xb9\x45\xfa\xc9\xb3\x3a\x6b\xe7\x38\xdf\xf4\xf3\xe1\x40\x84\xdc\xa2\xab\x49\x18\x07\xa0\xc8\x78\x5e\x8d\xe0\x82\x40\xdb\x9f\x16\xc0\x92\x14\x02\xc9\x03\x4b\x25\xd6\x69\x96\x9b\xef\xfd\x22\x00\x6b\x99\x1d\xef\x3a\x49\xe4\xa4\x4a\x35\x93\x64\xed\x2a\xa1\xec\xdd\x46\x65\x75\x6a\xc1\x89\x2b\xd3\xac\x0d\x10\x7f\x8a\x57\x41\xc4\xfc\x45\x34\x0d\xe7\x15\x02\xb3\x31\x16\x15\x4b\xb5\xe2\x32\xdf\x33\x00\xf8\x10\x07\x4b\x16\xfa\x55\x42\x69\x90\x98\x4c\xdb\xd0\xd3\x34\x8e\x3f\x2e\x96\x75\xac\xe0\xc6\xfc\xd2\xd4\x05\x67\x8b\xf9\x7d\xf8\xc0\xfc\x70\xe9\xc1\xdd\xa4\x99\xef\x25\xf4\x18\x06\xf3\x15\x8b\x83\xd9\x32\x58\x55\x1f\x27\x99\xc4\xdc\x32\x83\x09\xa1\xed\x2a\xdc\xb3\xe8\x21\x5a\xb1\xd9\x22\x8a\xa6\x73\xff\x78\xf5\x1e\x53\x53\xf0\x04\x2f\xa0\x5a\x8d\x89\xa9\x07\x9f\x0f\x6a\x7d\xb9\x84\x77\xdb\x60\xcc\xc4\x1f\xfd\xe9\x13\x3b\xec\x91\xa5\xbc\x60\xa7\x8d\xfe\x20\x66\xcf\xe8\x45\x4d\x59\xa4\xaf\x51\xd3\x7c\x77\x5e\x4e\xbf\xc5\x98\xe5\x9c\x50\x3f\x5e\x7e\x88\xba\x5b\x8d\xf8\xdf\xd1\xd7\x25\x9a\x2b\x78\x99\x99\x76\x8c\x31\xeb\xb9\xf6\xdf\x19\x00\x35\xa8\xf2\x47\xa9\x2d\xbf\xc1\x6f\xd4\x35\x1a\xb3\xad\xf3\x1a\xf6\x08\x06\x3d\x18\x4c\x4a\x92\x76\xe3\x0a\xd2\x65\x71\x0b\x21\xa7\x1d\xdf\xae\x99\x3e\x8b\x9e\x22\x4d\xe2\xda\x9b\x77\xee\x25\xf0\x2f\x17\xef\x70\x84\x31\x7b\x7a\xe5\xbd\xeb\x30\x0d\x28\xbc\xf6\xd6\xfd\xfd\x35\x37\xd4\x64\xcc\x96\xce\xe1\xdf\x03\xf8\x1d\x00\x00\xff\xff\x6d\x22\x53\xcd\x3a\x0d\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 3386, mode: os.FileMode(420), modTime: time.Unix(1495218822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1495218822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\xc5\xbf\x41\xf7\x21\xf8\x2a\xc6\x55\x94\x54\x30\xb1\x8c\x24\x33\xcc\xed\x8b\x6b\x66\xd7\xd5\xac\xfc\xfe\xe3\x5b\xfc\x4b\xa2\x18\x77\x2d\xc3\x64\xc3\xfe\xd2\x61\xb8\x24\x30\x1d\x86\x49\x4e\xfe\xf2\xe0\xbb\x1c\x7a\x57\x69\xef\x0a\x9d\x58\x1e\xcb\xe7\x34\x9c\xad\xc8\xb1\x61\x9f\x84\x4a\xa4\xa3\x05\x9e\x12\x3f\xe8\x6c\xb7\xb8\x8b\x36\x84\x82\x8c\x6b\x30\xd4\x2e\xff\xf2\x5e\x89\x3d\xa7\x5e\xdd\x9f\x6a\xf3\xfb\x1b\xa1\x27\x3e\x39\x45\x0f\xe1\x16\xc5\x99\x8c\x63\xc3\xbe\x32\x56\xc6\xa9\x86\x51\x2b\x2d\x58\x9b\x73\x7a\x1c\xb5\x97\xff\x36\x84\xe2\x5b\xda\xdf\x3b\x3b\x39\xfd\x06\x00\x00\xff\xff\x27\x4c\x31\xa2\x30\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 304, mode: os.FileMode(420), modTime: time.Unix(1495218822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

