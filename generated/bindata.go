// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x40\xda\x98\x6e\x77\x1e\xb0\x51\xe5\x88\xa9\xb7\x4d\x72\xb8\x37\x00\x9d\xed\xb6\x41\xbe\xbf\xc9\x9a\x64\x75\xb2\xe3\x35\x7f\xda\x0e\xff\x01\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1512503607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdf\x6e\xda\x30\x14\xc6\xef\xf3\x14\xe7\x01\x9a\xa2\x5d\xec\x26\x77\xa8\xa4\x15\x12\x7f\x2a\x60\x9b\xa6\xa9\xb2\xdc\xe4\x90\x7a\x73\xe2\xcc\x76\x98\x50\xc5\xbb\x4f\x21\x6d\x02\x8e\x29\x69\x68\x57\x89\xe5\xae\xaa\x0f\xfe\x4e\xbe\x9f\xce\xf1\xb1\x25\x2a\x91\xc9\x00\x95\xe7\xb8\x90\xd0\x18\x3d\x08\x44\xb2\x64\x91\x2b\x31\x15\x0e\x80\x5e\xa7\xe8\x41\xc4\xb4\x03\x50\x84\x7a\x0e\x00\x40\x26\x99\x07\x8f\x8f\x11\xd3\x24\x8f\x24\x99\x64\x9b\xcd\x76\xe5\x5e\xd2\x24\x78\xd8\x5b\x2c\xfe\xb5\xd9\x94\x1a\x9f\x3e\xc7\xe5\xde\x9a\xc5\x58\x6d\x0e\x8f\x2c\xd1\x28\x57\x94\x6f\xa3\x36\x8e\xf3\x53\xdc\xef\x66\x27\x91\x6a\x74\x85\x8c\x94\x03\x90\x72\x9a\xe4\xf9\xb8\x10\xa1\x36\x53\x07\xd0\x92\x45\x11\x4a\x0f\xb4\xcc\x70\x1b\xa6\xa9\xfa\x65\x6e\x02\xb0\x64\x7c\xff\xc3\x7b\x01\xeb\xe5\xa1\xaa\x17\x2c\xdd\x38\x8a\xf5\xe5\x3a\xe6\xdb\xd0\x94\x4a\x1a\xab\xc2\x03\x80\xf9\xf7\xf9\xc2\x1f\x93\xc1\x74\xdc\x1f\x4e\xf2\x4f\x56\x6b\xa5\x31\x26\xa1\x88\x29\x4b\x9e\x0c\x01\xf8\x32\xf7\x67\x64\x38\xc8\x03\x32\x85\x92\xb0\xb0\x5c\xba\xed\xcf\xe7\xdf\xa6\xb3\xed\x5a\x4a\x95\xfa\x23\x64\xb5\x78\x35\x9d\x5c\x0f\x6f\xc8\x60\x38\xf3\xe0\xb2\x57\xe4\xf7\xbc\x34\x1a\xfa\x93\x05\x99\xfb\x57\x33\x7f\x91\xff\x38\xe0\x0c\x13\x4d\x14\x06\x12\x75\xb9\xc3\x68\x7a\x43\x46\xfe\x57\x7f\x94\x87\x70\x11\x11\x8e\x2b\xe4\x95\xc0\x35\x19\xdf\x8c\x17\xe4\x6a\x3a\x1e\xf7\x27\x83\x7d\x67\x4c\xcf\x15\x06\x99\x64\x7a\xed\x46\x52\x64\xe9\xe9\xf6\xd7\xf7\xeb\x48\xd4\x48\x98\x26\x95\x50\xa8\x52\x2c\x4a\xdc\x10\x97\x34\xe3\xfa\x74\x38\xb9\xa1\x4a\x61\xe8\xc1\x0f\xbb\xf4\xdd\x0e\xc1\xa3\xe2\x1d\xc9\x8a\xe4\x11\xb3\x4a\xa2\x21\x72\x3c\xa1\xb5\x6d\xc3\x8a\xc6\x7a\xb8\xf4\xf6\x35\x3a\x4a\x15\xa5\x5d\x67\x2c\xa7\x8d\x9b\x4a\xb6\xca\xff\x2e\x3e\xb0\x01\x21\xb3\x9c\xf2\x9d\xef\x1a\x1e\x4b\x16\xb5\x8e\x95\xed\x94\xaa\x19\x55\xa2\x53\x28\x57\x2c\x40\x97\x06\x01\xaa\x77\xc1\x55\x53\xe8\x10\x55\x88\x0c\x73\x2a\x2c\x0f\x54\xbe\x5d\x41\x99\x9b\x1c\x01\xf6\x82\x76\xc7\x6e\x87\xdd\x41\x9f\x6a\x23\x61\x4a\x03\x6c\x59\x5c\x17\x90\xa5\xe1\x33\xc7\xdc\x91\x66\xdd\xb1\x94\x3c\x6b\x62\x83\xfe\x2d\xd9\xd5\xe0\x21\x4d\x49\x4d\xa8\xed\x4c\x59\x58\x68\x0e\x1e\xa7\xc0\x3c\x84\xee\x35\x43\xc9\xff\x41\xb6\xdd\x58\x62\x22\x7b\x2a\x9d\xb6\xc8\x8a\xdf\xbd\x5c\x6f\xa6\x44\x47\xa5\xa2\xb2\xef\x8d\x95\x4a\xd1\xd2\xde\x1a\x4d\xa3\x7a\xb2\xa6\x71\xd6\xf8\xde\xa7\x5d\x5a\x7c\xb4\xa3\xfe\x9d\x09\x4d\xff\x41\x19\x56\x42\x67\x4d\xf3\x14\x4c\x4f\x0e\xd9\x39\xbd\xfa\x91\xc4\x0e\xec\xe2\xf0\x03\x49\x43\x8e\xdd\x83\x49\x63\xa0\x07\x9f\x4b\xcc\xe9\xf1\x03\x06\x17\x4b\x0a\x67\xcd\xf1\x5d\xdb\x6c\xe5\xa2\x0d\x71\xdb\x16\x7b\xfc\x1a\x6f\x13\x39\x6b\x8a\xed\xf1\x98\xcd\x95\x29\xc1\xa9\x66\x22\x71\x15\x46\x31\x26\xfa\x4d\xde\x9d\x8b\xcb\x61\xed\x88\x6c\x58\x93\xd6\x9c\x3e\x94\x67\x43\x2e\x2f\x90\x7d\x2d\x32\x8b\x07\xd5\xcd\x9d\x23\x4d\xb2\xb4\x55\xdf\x34\x2b\xf5\xa2\x3e\x21\x9d\xd4\x4f\x6d\xb9\x75\xa5\xb8\x73\x7f\xaf\xf9\xf3\x37\x00\x00\xff\xff\xce\x96\x6c\xe0\xc0\x1d\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 7616, mode: os.FileMode(420), modTime: time.Unix(1541525508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x81\x9c\x4d\xef\xbe\x85\x26\x85\x42\x69\x43\x69\xcf\x42\x91\xd7\xca\x82\xa4\x15\x5a\xb9\xc1\x7f\x5f\x6c\x37\xa1\xbd\xf6\xa4\xe5\x69\x76\x66\x36\x70\xb3\x95\x8a\xd8\xa9\x72\x8f\xdd\x2c\x53\x45\xe0\x86\x85\x61\xaa\x6c\xee\x82\x73\x75\xd9\x5f\x7a\x24\xa7\x8d\xaa\xd1\x59\x1b\x25\x3b\x48\x72\x9c\x6f\x9b\x7e\xc4\xc6\xb1\x71\x33\x29\x55\xcb\x43\x8f\x1d\x96\x11\xce\x7b\x99\x72\xc3\x95\xdb\x05\x85\x6a\x62\x55\x96\x8c\x26\xf0\x95\x5c\x23\x48\x0d\xfa\xa0\xc5\x79\x52\x53\x9c\xea\x55\xea\xba\x7e\x38\x9e\xde\x8f\x8f\xfb\x8f\xe3\x01\x1d\x3e\x95\xe0\x23\x53\x6e\x56\xc9\x57\x6a\xe8\x70\x13\x43\xc6\xff\x64\xfd\xb1\x5b\x02\x37\x80\x1f\xff\x51\x2a\x26\xe7\xfc\x36\x6c\x57\x99\x38\xb8\x62\x7f\x97\xbc\x77\x68\x82\x33\xe7\xf5\x5d\x44\xe8\x20\x39\xce\xc8\x44\x03\x0d\xe0\xa5\x21\xe7\x80\x97\xc3\xfe\x64\xa2\x04\x1b\xe9\x8b\x62\x8f\xe7\xd7\xa7\x37\xec\x10\x25\x84\xe5\x7b\xa5\x6b\xa2\x1f\xbb\x14\x52\x83\x97\x94\x5c\x1e\x14\x9c\xd1\x2e\x84\xc2\x85\x22\x67\x32\xdf\x01\x00\x00\xff\xff\xde\x8d\x2f\xd0\xc8\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 456, mode: os.FileMode(420), modTime: time.Unix(1541525557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

