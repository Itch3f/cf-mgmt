// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcd\x41\x8a\xc3\x30\x0c\x85\xe1\xbd\x4f\x21\xb2\x1e\x4f\xf6\xbe\xcc\x60\x3c\x8a\x23\x12\x5b\x46\x92\x43\x43\xe9\xdd\xeb\x94\x52\xe8\xf6\xfd\xf0\x3d\xef\xbd\x6b\x7b\xb4\x85\xa5\x04\xd8\xa9\xf6\x9b\x73\x54\x62\xc6\x3f\x41\xe5\x2e\x09\x83\x03\xb0\xb3\x61\x80\x7f\x4e\x1b\x8a\x7f\xe5\x31\xbe\x33\xdc\x05\x1b\x2b\x19\xcb\x19\xa0\xd1\xc1\x16\x77\x45\x39\x28\xa1\xce\x69\xf1\x25\x17\xfb\x01\x8b\x39\xc0\x34\xae\x50\x6d\x7a\x8c\x93\xda\xba\xe9\x85\x7b\xa8\xb1\x0c\x27\x71\x5d\x28\xfb\x4b\x73\x4e\x7a\xbd\x5a\x8b\xb6\x7e\x95\x39\xd1\x6c\x51\xb7\x8f\xfc\xab\xab\x7b\x06\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x98\xdf\x6e\xda\x3e\x14\xc7\xef\x79\x0a\x3f\x40\x53\xf4\xbb\xf8\xdd\xe4\x0e\x01\xad\x90\x1a\xa8\x08\xd3\x34\x4d\x93\xe5\x26\x26\xf5\x16\xc7\x9e\xed\x74\x42\x88\x77\x9f\x9d\x74\x01\x8c\xc9\x02\x29\x9a\x94\xdc\x05\x7c\x7c\xfe\x7c\x3f\x9c\x63\x07\x81\x25\xcb\x45\x84\xa5\x3f\xf0\x40\x86\x28\xf6\x41\xc4\xb2\x35\x49\x3c\x81\x39\x1b\x00\xa0\x36\x5c\x7f\x97\x10\xa5\x9f\x4b\x53\x5f\x3f\x01\x90\x0b\xe2\x83\xed\x56\x2f\x40\x63\x09\xf5\xe7\xdd\xae\x58\x79\x11\x28\x8b\x5e\x7d\x40\x91\x54\x58\x54\x6e\xff\xfb\x9f\x56\xee\x14\xa1\x78\xef\x0f\x6c\x49\xa6\x2d\xdf\x50\x5a\x58\xed\x06\x83\xef\xec\xe5\x30\x21\x81\x91\xc2\x1e\x13\x89\xd4\x9b\x78\x8a\x32\x93\x82\x07\x12\xac\xec\x6c\x75\x00\x41\x92\x04\x0b\x1d\x43\xe4\xb8\x30\x53\x48\xfe\xb0\x9d\x00\xb0\x26\xe9\x71\xad\xc3\x88\x0c\x8d\xa9\x1c\x46\x6b\x8f\x26\x54\xdd\x6f\x68\x5a\x98\x72\x24\x10\x95\x65\xd9\x00\x84\x5f\xc2\xd5\x34\x80\x93\x45\x30\x9a\xcd\x8d\x04\x72\xa3\xeb\xa4\x30\x66\x14\x91\xec\x5d\x03\x00\x3e\x85\xd3\x25\x9c\x4d\x8c\x41\x2e\xb1\x80\x24\xae\x96\x9e\x47\x61\xf8\x79\xb1\x2c\xd6\x38\x92\xf2\x17\x13\xfb\xc5\xf1\x62\xfe\x30\x7b\x84\x93\xd9\xd2\x07\xf7\xc3\x32\xbf\x3f\x4b\x4f\xb3\xe9\x7c\x05\xc3\xe9\x78\x39\x5d\x99\xcd\x51\x4a\x70\xa6\xa0\xc4\xba\x38\xb5\xf7\xf0\x00\x83\xc7\x60\x05\xc7\x8b\x20\x18\xcd\x27\xc7\xa5\xdb\xa2\xea\xbd\x9a\x9c\xda\x78\x89\x60\x39\x6f\xaf\xef\xa9\xbf\x3e\x4a\x6d\xab\x50\xa9\x1e\xe3\x14\xb7\xf8\x29\x17\x66\x65\x23\x9d\x27\x71\x1c\xa3\x57\xf2\x1f\x96\xee\x18\x1f\x1e\x17\xe4\xcd\x3c\x97\x15\x34\x40\x60\x92\xc6\xb1\x0f\xbe\x1e\xf4\xd0\xb7\x86\x73\xc6\x11\xad\x57\x30\x6a\x94\xa8\xd8\xc8\x57\x24\x3e\x0e\x8d\xed\xa4\x9e\x54\x5d\xec\x5e\x81\x3a\x2f\xc4\xc9\x69\xc1\x91\xbe\x2a\xdc\xb0\x6d\xaa\x00\x5d\x06\xf0\x34\x19\x3d\xc3\xc3\x18\x69\x8c\x38\x3c\x0d\x74\xee\x70\x29\x35\xb2\xcf\x94\x5b\xb0\xb9\xe4\xbc\xe9\x05\xba\x73\x27\x8e\xcd\x24\xe7\x71\x9b\x7e\x29\xf7\xd5\x77\x8c\x1d\xa2\x57\xb2\x1f\x17\xef\x94\xdd\x33\x39\x7e\xb8\xf6\x8d\x3a\xc2\x99\x46\x97\xf9\x5c\x3b\xd1\x1c\x42\xb9\x59\xfe\xcc\x99\x16\xea\xf6\x8d\xb4\x0f\xd4\x65\x5c\xf5\x1c\xde\x25\x70\x83\xb8\xf8\x7d\xd1\x4d\xe4\xce\xfd\xa2\x74\x01\xa8\x9e\xbf\x68\xd6\x6a\x61\xa3\x33\x57\xbb\x2b\xa7\x61\xeb\xdb\x81\x23\x85\x2e\x83\x6a\x39\x09\xf7\x32\xb9\x18\x5e\x3b\x05\xff\x7e\xfd\x76\x05\xe9\x32\xa6\x3a\xfd\xed\xf9\x47\x24\x4b\x91\x22\x2c\xd3\x7d\x96\x50\xed\xec\x8a\xbf\x6e\xdc\x4c\xee\xc0\xc9\x31\xd5\xb0\xab\x9c\x39\xfd\x53\x60\x4d\x85\xaf\x41\x67\x33\x71\x14\xf9\x3b\x00\x00\xff\xff\x9e\x3e\xc7\xdc\xaf\x16\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 5807, mode: os.FileMode(420), modTime: time.Unix(1511384693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x41\x6e\x43\x21\x0c\x44\xf7\x9c\x62\x6e\xd0\x7d\x55\x71\x15\xe4\xf2\xfd\x53\x4b\xf9\x18\xd9\x46\x51\x6e\x5f\x28\xca\xae\xab\xac\x98\x79\x0c\xc3\xdc\x24\x8a\x71\xd7\x32\x4c\x3e\xf1\xf5\xd4\x61\x98\x0c\x8b\x61\xb2\x9c\xfc\xe9\xc1\x57\x39\xf4\x22\x69\xaf\x48\x3d\xb1\x39\x36\xcf\x69\x38\x5b\x91\x63\x06\x96\x02\xd5\xaa\xa3\x05\x1e\x12\x3f\xe8\x6c\x97\xb8\x8b\x36\x84\xa2\x1a\x53\x30\xd4\x6e\xfe\xe1\x9d\x2a\x7b\x4e\x9d\xdc\x1f\x6a\xeb\xf9\x4b\x42\x4f\xbc\x53\x55\xef\xc2\x2d\x8a\xf3\xbc\x8c\xd9\xb7\x3d\xb6\xc7\xa9\x86\x41\x54\xb7\xd8\x9b\x73\xba\x1f\xd4\xcb\x7f\x1b\xe6\x1f\xdf\xd2\xfe\xce\x95\xc9\xe9\x37\x00\x00\xff\xff\x27\x4c\x31\xa2\x30\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 304, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

