// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1508346281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x40\xda\x98\x6e\x77\x1e\xb0\x51\xe5\x88\xa9\xb7\x4d\x72\xb8\x37\x00\x9d\xed\xb6\x41\xbe\xbf\xc9\x9a\x64\x75\xb2\xe3\x35\x7f\xda\x0e\xff\x01\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1508346281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xcd\x6e\xda\x40\x10\xc7\xef\x7e\x8a\x79\x00\x1c\xd4\x43\x2f\xbe\x21\x20\x11\x52\x0c\x11\xa6\xaa\xaa\x2a\x5a\x6d\xec\xc1\xdd\xd6\x6b\xbb\xb3\xeb\x54\x08\xf1\xee\xd5\xda\x04\xb0\x59\x28\x85\x26\x95\x4c\x6e\x48\x33\x9e\x8f\xff\xcf\x33\x1a\x4c\xa8\xb2\x82\x42\x54\x9e\xe3\x42\xca\x25\x7a\x10\x66\xe9\x5c\xc4\x2e\x61\x9e\x39\x00\x7a\x91\xa3\x07\xb1\xd0\x0e\x40\xe5\xea\x39\x00\x00\x05\x09\x0f\x96\xcb\x58\x68\x66\x3c\x59\x41\x62\xb5\x2a\x2d\x4f\xc4\xd3\xf0\x9b\x07\x92\x2b\x8d\xb4\x09\xfb\xe1\xa3\xdc\x84\xd3\x42\xe2\x36\x1e\x2c\x45\xaa\x91\x9e\x79\x52\x7a\xad\x1c\xe7\x7b\xf6\xb4\x5b\x10\x21\xd7\xe8\x66\x14\x2b\x07\x20\x4f\x78\x6a\x4a\x70\x21\x46\xdd\xac\x16\x40\x93\x88\x63\x24\x0f\x34\x15\x58\xba\x69\xae\x7e\x34\x83\x00\xcc\x45\x52\xef\xb5\x1b\x8a\xae\x71\x55\xdd\x70\xee\xca\x58\xea\x9b\x85\x4c\x4a\xd7\x9c\x13\x97\xaa\x6a\x1b\x20\xf8\x12\xcc\x86\x3e\x1b\x4c\xfc\xde\x68\x6c\x24\x50\x0b\xa5\x51\xb2\x28\x93\x5c\xa4\x6b\x0d\x00\x3e\x05\xc3\x29\x1b\x0d\x8c\x43\xa1\x90\x98\x88\x36\xa6\x87\x5e\x10\x7c\x9e\x4c\x4b\x5b\xce\x95\xfa\x95\xd1\xd6\xd8\x9f\x8c\x6f\x47\x77\x6c\x30\x9a\x7a\x70\xd3\xad\xea\x7b\x31\xdd\x8f\x86\xe3\x19\x0b\x86\xfd\xe9\x70\x66\x1e\x0e\x13\x81\xa9\x66\x0a\x43\x42\xbd\x8d\x70\xcb\xfc\x3b\x7f\xc6\xfa\x13\xdf\xef\x8d\x07\xf5\xd6\x5f\x34\x8d\x30\xc1\x0b\x34\x2d\xdd\x2a\xa2\x87\x25\xaf\xe7\xb8\x2a\xc9\x77\x5b\xdf\x7f\x8d\xdd\x9c\xc4\xb3\xf9\x5d\x35\x70\x02\x01\x53\x33\x46\x1e\x7c\xdd\x61\xf9\x78\xe2\xfb\x6e\xc9\xd6\x66\x16\xf7\x83\xde\x03\xdb\xcd\x91\x44\x3c\x67\xfb\x89\x0e\x4f\xc9\x9e\x60\x0d\x82\x2a\xe7\x21\xbe\x26\xb4\x4d\x82\x77\x4e\x07\x39\xad\x35\x6a\xec\xb3\xd7\x40\xf3\x37\xbb\xee\x2a\xc8\x1d\xda\x76\x0d\x24\x45\x1e\x5d\x32\x2d\xd5\x73\xc7\xe7\xa5\x99\xe2\xaa\x54\xaf\x37\x6f\x53\xdd\x35\x25\xfe\x73\xe9\x4f\x9a\x07\x6b\x19\x6d\xc6\x73\xee\x3a\xb3\x08\x65\x45\xf9\xb3\xc8\x34\x7f\x83\x31\xda\x26\x6a\x33\xad\xe3\x18\xd6\x12\x58\x39\x28\x0c\x0b\x12\x7a\xe1\xc6\x94\x15\xf9\x5b\x00\xd9\xcf\x78\xbd\x64\x9a\x5a\x34\x10\x99\xe3\xed\xcc\x9d\x77\xf1\x05\x60\x29\xa1\xcd\x9c\x2e\xdc\x77\x5b\x99\x2c\x08\xcf\xdd\x75\x7f\x3e\xb0\x6d\x49\xda\x4c\xe9\x98\xfc\xf6\x2d\x27\x54\xe6\x2a\x8c\x25\xa6\xfa\x8c\x2f\x03\x76\x26\x9d\xdd\xff\xc3\x9d\xfa\x05\xdf\xa9\x5f\x8f\x9d\xfa\x59\xf3\xb8\xcf\xae\x51\xe0\x7f\xa5\x77\x2a\x85\x23\x1c\x0f\x00\xaa\x75\xf9\x3b\x00\x00\xff\xff\x53\x85\xcb\x50\xa5\x13\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 5029, mode: os.FileMode(420), modTime: time.Unix(1508346281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1508346281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\xc5\xbf\x41\xf7\x21\xf8\x2a\xc6\x55\x94\x54\x30\xb1\x8c\x24\x33\xcc\xed\x8b\x6b\x66\xd7\xd5\xac\xfc\xfe\xe3\x5b\xfc\x4b\xa2\x18\x77\x2d\xc3\x64\xc3\xfe\xd2\x61\xb8\x24\x30\x1d\x86\x49\x4e\xfe\xf2\xe0\xbb\x1c\x7a\x57\x69\xef\x0a\x9d\x58\x1e\xcb\xe7\x34\x9c\xad\xc8\xb1\x61\x9f\x84\x4a\xa4\xa3\x05\x9e\x12\x3f\xe8\x6c\xb7\xb8\x8b\x36\x84\x82\x8c\x6b\x30\xd4\x2e\xff\xf2\x5e\x89\x3d\xa7\x5e\xdd\x9f\x6a\xf3\xfb\x1b\xa1\x27\x3e\x39\x45\x0f\xe1\x16\xc5\x99\x8c\x63\xc3\xbe\x32\x56\xc6\xa9\x86\x51\x2b\x2d\x58\x9b\x73\x7a\x1c\xb5\x97\xff\x36\x84\xe2\x5b\xda\xdf\x3b\x3b\x39\xfd\x06\x00\x00\xff\xff\x27\x4c\x31\xa2\x30\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 304, mode: os.FileMode(420), modTime: time.Unix(1508346281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

