// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6b\xc3\x20\x18\x86\xef\xfe\x8a\x8f\x9e\xe7\x7a\xf7\x16\x1a\x5b\x02\x31\x29\x31\xeb\xd8\x49\xc4\xd9\x54\x1a\xa3\xa8\x29\x2b\x63\xff\x7d\x28\xa5\x6c\xb7\xef\x7d\x1e\xde\x17\xc5\x18\x23\x3f\xcb\x74\x76\xc1\x12\x98\xcd\xb2\x7e\x21\x64\xac\x9c\xb4\x08\x3a\xba\x35\x28\x4d\x10\x40\xba\x7b\x4d\xe0\xd3\xa9\xab\x0e\xb8\x68\x04\xf0\xd0\xf0\x1d\xb4\x77\xd1\x24\x17\xee\x04\xbc\xb9\xb9\x24\xe7\xa8\xc3\xcd\x28\x1d\xb7\xea\x8c\xed\x64\xd3\x0b\x24\x39\x11\xd8\xcc\x32\xe9\x98\x36\x3f\x08\x99\xc5\xaf\x29\xe6\x71\x0c\x8b\xb4\x9a\x80\x72\xcb\xd9\x4c\x38\xaf\x21\xe4\x65\x90\xb6\x68\xfe\xc1\x47\xca\x44\xdd\xb3\xaa\xe9\x32\x78\xe3\x74\x10\x4d\x9d\xcf\x63\xc5\xf9\x7b\x3f\x94\x7b\xd7\x77\xfb\xe6\x20\xea\x66\x28\xa9\x6d\x68\x37\x0a\x4e\x77\x03\x1d\x33\x68\xeb\xea\x28\x72\xf5\x19\xfe\x96\x0b\xe0\x74\x38\x3d\x7c\x7f\x10\x2d\x3d\xd1\xb6\x4c\xed\x05\x3b\xb0\x51\xec\x7a\xc6\xaa\xae\x26\x28\xac\x4b\xe6\x5e\xa6\xcb\xbf\x57\x6f\x95\xd9\x26\x19\xaf\xcf\x5f\xbf\xc6\x0b\xfa\x0d\x00\x00\xff\xff\xb8\xff\x32\x11\x62\x01\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 354, mode: os.FileMode(420), modTime: time.Unix(1556817394, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x4d\x6f\xa3\x3c\x10\xc7\xef\xf9\x14\x3e\x36\x52\xfd\xf4\xce\x2d\x6a\x68\x15\x29\x2f\x55\xc8\xd3\xd5\x6a\x55\x59\x2e\x4c\xa8\x77\x79\x5b\xdb\x64\x95\x6f\xbf\x32\xa4\x04\x8c\xc9\x1b\x59\xb5\x52\x7d\x8b\xf0\x30\x33\xfc\x7f\x1e\x7b\xec\x70\x10\x69\xce\x7d\x10\xce\x00\xa3\x84\xc6\xe0\x20\x3f\x4d\xd6\x2c\xc4\x1c\xb2\x74\x80\x90\xdc\x66\xe0\xa0\x90\xc9\x01\x42\xa5\xa9\x33\x40\x08\xa1\x9c\x33\x07\xdd\xdc\x84\x4c\x12\x65\x49\x72\xce\x86\xc3\x62\xe4\x95\xd3\xc4\x7f\x6b\x0c\x96\x8f\x86\xc3\x2a\x86\x64\x31\x60\xc9\x59\x18\x02\xaf\x82\xa8\x87\x5a\x14\x96\x48\xe0\x1b\x1a\x29\x6f\xf5\x77\x86\xc3\xc1\xe0\x67\xfa\x5a\xcf\x9a\x03\x95\x80\x53\x1e\x8a\x01\x42\x59\x44\x13\xe5\x01\xa3\x10\xa4\xfe\x49\x08\xed\xbc\x38\x48\xf2\x1c\x0a\x33\x49\xc5\x2f\xdd\x09\x42\x6b\x16\x35\x05\xb9\xf3\xd9\x9d\x32\x15\x77\xfe\x1a\xc7\x61\x2c\xff\xdb\xc6\x51\x61\x9a\x51\x4e\x63\x51\x66\x8d\x90\xf7\xdd\x5b\xb9\x33\x32\x5e\xcc\x46\x93\xb9\x4a\x5e\x6c\x85\x84\x98\x04\x69\x4c\x59\xb2\x13\x0a\xa1\xff\x3d\x77\x49\x26\x63\x65\x90\x0b\xe0\x84\x05\xd5\xd0\xd3\xc8\xf3\xbe\x2d\x96\xc5\x58\x46\x85\xf8\x93\xf2\xfd\xe0\xfd\x62\xfe\x30\x79\x24\xe3\xc9\x52\x0d\x97\xf9\x91\x80\xf1\xbd\xc1\x74\xe2\xce\x57\xc4\x73\xef\x97\xee\xaa\xb0\x89\x18\x24\x92\x08\xf0\x39\xc8\xca\x6c\xba\x78\x24\x53\xf7\xd9\x9d\x2a\x93\x28\x0d\x49\x04\x1b\x88\xf6\x5e\x1e\xc8\xec\x71\xb6\x22\xf7\x8b\xd9\x6c\x34\x1f\x37\xf5\xa9\x94\x17\x6f\x94\x43\x80\xcb\x4f\xeb\x21\x7e\xcb\x8f\xd5\x5f\xd7\x5f\x93\x48\x9f\xfc\x02\xfc\x9c\x33\xb9\xc5\x21\x4f\xf3\xac\x7f\x1d\xb4\xfd\x59\x24\x1d\x25\xa1\x4b\x55\xa1\xa1\x42\xb0\x30\xc1\x01\xac\x69\x1e\xc9\xfe\x88\x94\xac\x42\x40\xe0\xa0\x1f\xe6\xd0\x2f\x35\x8e\x47\x83\x5b\x9e\x3a\xcf\x23\x92\x55\x5c\x03\x88\xa0\xc7\x7e\x53\x98\x69\xbb\x60\x77\x3d\x36\x83\x59\x68\x3a\xb4\xba\x3e\x15\xa1\x3c\x0b\xde\x37\x2b\x1c\x83\xa4\x01\x95\xf4\x38\x2a\xbd\xba\xd4\xeb\x2f\x07\xe1\x74\xc4\xb1\x94\x74\x4a\x46\xa1\x0c\x0d\x1c\xce\x38\xdb\xa8\xdf\x27\xb7\x14\xe7\x43\x3b\x18\xcd\xa2\xeb\x6e\xfc\x5a\x72\xed\xfb\x40\xe0\x1b\xe6\x03\xa6\xbe\x0f\xe2\x9f\x40\x6b\x45\xb0\xa0\x5a\x1d\x62\x53\xa2\x66\x93\x7e\xb5\xe2\xd2\x9d\x1c\xc1\x76\x20\xb6\x25\x68\xec\xf1\x0f\x57\xda\x7b\xe3\x97\x51\x1f\x2e\x2c\xb4\xdb\xda\x6a\x8c\x95\x2e\xa7\xad\x97\x55\x48\xcb\xad\xeb\x20\x50\x2a\xa4\xf7\x89\x7d\x58\x75\x91\xb9\xa8\x87\xb4\x04\x8f\x75\x91\x3a\xc1\x5d\xa1\x5c\x4a\xb0\x7c\xef\x3a\x0c\xf5\x54\x2c\xc3\x8e\x1e\xf3\x20\xc3\x1e\xa7\x81\xc3\x30\x0d\x90\xec\x89\xe0\x64\x5a\x86\x33\x41\x7d\xbc\xdc\xa5\x3e\x4f\xfd\x55\xf9\x7c\x01\xac\xe3\xd1\x13\x51\x49\x14\x58\x03\x9a\x11\x95\x46\x73\xb8\x9e\x48\x61\xd2\xca\xa6\x30\xf3\xdc\xe5\x73\xcd\x8f\x6a\x57\xeb\x9e\x7a\xcc\x9f\x1d\x0f\xf3\xdc\xf9\x9d\xa7\x92\x5e\x7d\xf2\x18\x26\x45\x15\xe8\x0b\xcc\x8a\x3e\xb0\x76\x3a\x99\x69\x9d\x7d\x49\x6a\xc6\x76\xdb\x7d\x41\x7a\x22\x4d\x7b\x61\x7a\x26\xd6\xce\xeb\x52\xfd\xb4\xf1\x91\x9d\xb0\x21\x97\x2f\x80\xf5\x93\xaf\xe1\x7b\x1a\xa6\x39\x73\xe9\xfa\x7d\xce\xed\xad\x5d\xbb\x4f\x82\xa4\xaf\xdc\x4c\xa4\x11\x95\x2c\x4d\xb0\x80\x30\x86\x44\x5e\xe5\x4f\xad\xf2\x8e\xa2\xb5\x0b\x9f\x5b\xea\xc6\xe4\x3e\x14\xef\x89\x80\x8e\x82\x3e\x97\xa0\x41\x89\xfd\x7d\x52\x04\x34\xc9\xb3\x8b\x56\x67\xbd\x7c\x6f\xdb\x3d\xd9\x75\x56\x6d\x53\x92\xb6\x50\x5b\xb7\x50\x2d\x95\xfe\x06\x00\x00\xff\xff\x0f\xd2\x6c\x54\xe2\x23\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 9186, mode: os.FileMode(420), modTime: time.Unix(1556817399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x51\xc1\x8a\x14\x31\x10\xbd\xe7\x2b\x1e\x3b\xe7\xd9\xc5\x83\x97\xbe\x2d\xee\x0a\x82\xe8\x22\x7a\x6e\x32\x49\x75\xa6\x24\x49\x35\x95\xea\x19\xfa\xef\x25\xdd\xb3\x8a\x82\x08\x9e\xba\x5f\xf2\xde\xab\x57\x2f\x87\x55\x16\x45\x62\x83\xd2\x2c\x58\x94\x5d\x62\x1b\x3b\x18\x17\xe5\xe1\x17\x3a\xa9\xaf\xe1\x3c\xa0\xf8\x66\xa4\x6e\x17\x86\x09\x6d\x6d\x46\x05\x51\x8a\xe7\xea\x76\x34\xee\x68\x70\x07\x2c\x8d\x14\x3e\x04\x59\xaa\xe1\xca\x76\xc6\x4c\x5a\xb8\x35\x96\x0a\x13\x04\x25\x6f\x04\xd1\xd4\x1e\xda\xec\x03\x35\xd7\x25\x23\xc7\xae\x7e\x7a\x7e\xf9\xf2\xfc\xee\xf1\xeb\xf3\x13\x8e\xf8\xd6\x08\x21\x33\x55\x1b\x1b\x05\x25\xc3\x11\xb3\x6f\xed\x2a\x1a\x21\xd3\xff\x8c\x7a\x95\x0f\xb8\xbb\x73\x87\x9b\x3b\x6e\xee\x93\x28\x16\xef\xc3\xfe\xb3\x87\x72\xbf\x05\xe8\x11\x7f\x26\x30\xc1\x89\xeb\xf6\xcd\xd1\xcf\x38\x42\x6a\x5e\x51\x89\x22\x45\x70\xcf\xc7\x35\xe1\xe3\xd3\xe3\x8b\xeb\x84\xf1\x8f\xe1\x59\x52\xea\x84\x4c\x17\xca\xdb\xcc\x30\x1d\x4b\x2a\x86\x20\xa5\xf8\x1a\x1b\xb8\xc2\xce\x84\x99\x67\xca\x5c\xc9\x65\x49\xe3\x46\x1f\xf0\xe1\xd3\xfb\xcf\xee\x00\xe3\x42\xe0\x6a\xa4\x17\x9f\x7b\x14\x53\x4e\x89\x14\xcb\x1c\xbd\xd1\x43\xa4\x4c\x46\xf8\x2e\xa7\x06\xa9\xae\xd3\x8f\x37\xca\x80\x37\x6f\x8b\xeb\x2d\x48\x9d\x38\x2d\xea\xad\x17\x17\x59\x29\x98\xe8\xea\xf6\xf3\x31\xb2\x0e\xb8\x7f\xd8\x51\xe7\xfb\x9c\xe5\x8a\x36\x53\xe0\x69\xdd\x36\xe8\xeb\x37\xd2\x0b\x69\x8f\xfc\x1a\x17\x97\x6d\x83\x7e\x7b\xbf\x96\xbc\x97\xb0\xd3\xb6\x0a\xfe\x6a\xb5\xd5\xba\xbd\xee\xbf\xdc\x3a\x69\xf3\xfa\x11\x00\x00\xff\xff\x64\x16\x72\x4a\xd8\x02\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 728, mode: os.FileMode(420), modTime: time.Unix(1556817356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

