// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x40\xda\x98\x6e\x77\x1e\xb0\x51\xe5\x88\xa9\xb7\x4d\x72\xb8\x37\x00\x9d\xed\xb6\x41\xbe\xbf\xc9\x9a\x64\x75\xb2\xe3\x35\x7f\xda\x0e\xff\x01\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1512503607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdd\x6e\xa3\x3a\x10\xc7\xef\x79\x8a\x79\x80\xd2\xe8\x5c\x9c\x1b\xee\xa2\x86\x56\x91\xf2\x51\x25\x39\x67\xb5\x5a\x55\x96\x0b\x13\xea\x5d\xf3\xb1\xb6\xc9\x2a\xaa\xf2\xee\x2b\x42\x0b\xc1\x38\x09\x85\x76\x2b\x65\xb9\x8b\xe2\x61\x66\xf8\xff\x98\xf1\xd8\x02\x65\x9c\x0a\x0f\xa5\x63\xd9\x10\xd1\x10\x1d\xf0\xe2\x68\xcd\x02\x5b\x60\x12\x5b\x00\x6a\x9b\xa0\x03\x01\x53\x16\x40\x6e\xea\x58\x00\x00\xa9\x60\x0e\x3c\x3f\x07\x4c\x91\xcc\x92\xa4\x82\xed\x76\xfb\x95\x47\x41\x23\xef\xa9\xb2\x98\xff\xb5\xdb\x15\x31\xfe\xf9\x37\x2c\x7c\x2b\x16\x62\xe9\x1c\x9e\x59\xa4\x50\x6c\x28\xdf\x5b\xed\x2c\xeb\x7b\xfc\x78\x98\x9d\x40\xaa\xd0\x8e\x45\x20\x2d\x80\x84\xd3\x28\xcb\xc7\x86\x00\x95\x9e\x3a\x80\x12\x2c\x08\x50\x38\xa0\x44\x8a\x7b\x33\x45\xe5\x0f\xdd\x09\xc0\x9a\xf1\xea\x8b\x0f\x3c\x36\xc8\x4c\xe5\xc0\x5b\xdb\x61\x10\xaa\xeb\x6d\xc8\xf7\xa6\x09\x15\x34\x94\xb9\x06\x00\xcb\xaf\xcb\x95\x3b\x25\xa3\xf9\x74\x38\x9e\x65\xaf\x2c\xb7\x52\x61\x48\xfc\x38\xa4\x2c\x7a\x11\x04\xe0\xbf\xa5\xbb\x20\xe3\x51\x66\x90\x4a\x14\x84\xf9\xc5\xd2\xfd\x70\xb9\xfc\x32\x5f\xec\xd7\x12\x2a\xe5\xaf\x58\x94\x8b\x37\xf3\xd9\xed\xf8\x8e\x8c\xc6\x0b\x07\xae\x07\x79\x7e\xaf\x4b\x93\xb1\x3b\x5b\x91\xa5\x7b\xb3\x70\x57\xd9\xc3\x1e\x67\x18\x29\x22\xd1\x13\xa8\x0a\x0f\x93\xf9\x1d\x99\xb8\xff\xbb\x93\xcc\x84\xc7\x01\xe1\xb8\x41\x5e\x06\xb8\x25\xd3\xbb\xe9\x8a\xdc\xcc\xa7\xd3\xe1\x6c\x54\x55\xa6\xd0\x5c\x3e\x51\x81\xbe\x9d\xbf\x54\x07\xd9\x6b\x7e\x7a\xe5\x4b\xe5\x35\x71\xf4\x0f\x5e\xa2\x97\x0a\xa6\xb6\x76\x20\xe2\x34\xe9\xfe\xed\xd7\xfd\xf5\x30\x6a\x65\xa0\x8b\x54\x40\xa1\x52\xb2\x20\xb2\x7d\x5c\xd3\x94\xab\xee\x70\x32\x41\xa5\x44\xdf\x81\x6f\xe6\xd0\x0f\x07\x04\xcf\x06\xef\x49\x96\x24\xcf\x88\x55\x10\xf5\x91\x63\x87\x7d\x65\x6f\x96\xef\x6a\xc7\x4b\xaf\x1a\xa3\xa7\x54\x52\x3a\x54\xc6\xb0\xd5\xdb\x89\x60\x9b\xec\x77\xe3\x2d\x48\x2f\xa7\xcc\xf3\x43\xc3\x99\xc0\x10\xad\x67\x65\x1a\x11\x6a\x42\x95\x13\x03\x8a\x0d\xf3\xd0\xa6\x9e\x87\xf2\x43\x70\xd5\x22\xf4\x88\x0e\x66\x89\xaa\x38\xd5\x41\xee\xdd\x0a\x4a\x77\x72\x06\xd8\x89\xd8\x3d\x3b\x6d\x0e\x3c\x5d\x5d\xaf\x23\x42\x42\x3d\x6c\x59\x5c\x57\x90\x26\xfe\x2b\xc7\x4c\x91\x66\xdd\xb1\x08\x79\xd1\xc4\x46\xc3\x7b\x72\x18\x83\xfb\x34\x21\xb5\x40\x6d\x67\xca\x5c\x42\x7d\xf0\xe8\x02\xf3\x18\xba\xb7\x0c\x25\x7f\x07\xd9\x76\x63\x89\x8e\xec\xa5\x74\xda\x22\xcb\x9f\x3b\x5d\x6f\x7a\x88\x9e\x4a\x49\xa5\xaa\x8d\x91\x4a\xde\xd2\xde\x1b\x4d\xa3\x7a\x32\xa6\x71\xd1\xf8\x3e\xa6\x5d\x1a\x74\x34\xa3\xfe\x99\xc6\x8a\xfe\x81\x32\x2c\x03\x5d\x34\xcd\x2e\x98\x5e\x14\x32\x73\x7a\xf3\x25\x89\x19\xd8\xd5\xf1\x0b\x92\x86\x1c\xfb\x0b\x93\xc6\x40\x8f\x5e\x97\xe8\xd3\xe3\x27\x0c\x2e\x86\x14\x2e\x9a\xe3\x87\xb6\xd9\x52\x45\x13\xe2\xb6\x2d\xf6\xfc\x31\xde\x14\xe4\xa2\x29\xb6\xc7\xa3\x37\x57\x26\x63\x4e\x15\x8b\x23\x5b\x62\x10\x62\xa4\xde\xe5\xde\x39\x3f\x1c\xd6\xb6\xc8\x86\x35\x69\xcc\xe9\x53\x79\x36\xe4\x72\x82\xec\x5b\x91\x19\x34\x28\x4f\xee\x1c\x69\x94\x26\xad\xfa\xa6\x5e\xa9\x57\xf5\x09\xa9\x53\x3f\x35\xe5\xd6\x97\xe2\xc1\xf9\xbd\xa6\xcf\xef\x00\x00\x00\xff\xff\x42\x58\x73\x26\x3d\x1f\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 7997, mode: os.FileMode(420), modTime: time.Unix(1543959725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x81\x9c\x4d\xef\xbe\x85\x26\x85\x42\x69\x43\x69\xcf\x42\x91\xd7\xca\x82\xa4\x15\x5a\xb9\xc1\x7f\x5f\x6c\x37\xa1\xbd\xf6\xa4\xe5\x69\x76\x66\x36\x70\xb3\x95\x8a\xd8\xa9\x72\x8f\xdd\x2c\x53\x45\xe0\x86\x85\x61\xaa\x6c\xee\x82\x73\x75\xd9\x5f\x7a\x24\xa7\x8d\xaa\xd1\x59\x1b\x25\x3b\x48\x72\x9c\x6f\x9b\x7e\xc4\xc6\xb1\x71\x33\x29\x55\xcb\x43\x8f\x1d\x96\x11\xce\x7b\x99\x72\xc3\x95\xdb\x05\x85\x6a\x62\x55\x96\x8c\x26\xf0\x95\x5c\x23\x48\x0d\xfa\xa0\xc5\x79\x52\x53\x9c\xea\x55\xea\xba\x7e\x38\x9e\xde\x8f\x8f\xfb\x8f\xe3\x01\x1d\x3e\x95\xe0\x23\x53\x6e\x56\xc9\x57\x6a\xe8\x70\x13\x43\xc6\xff\x64\xfd\xb1\x5b\x02\x37\x80\x1f\xff\x51\x2a\x26\xe7\xfc\x36\x6c\x57\x99\x38\xb8\x62\x7f\x97\xbc\x77\x68\x82\x33\xe7\xf5\x5d\x44\xe8\x20\x39\xce\xc8\x44\x03\x0d\xe0\xa5\x21\xe7\x80\x97\xc3\xfe\x64\xa2\x04\x1b\xe9\x8b\x62\x8f\xe7\xd7\xa7\x37\xec\x10\x25\x84\xe5\x7b\xa5\x6b\xa2\x1f\xbb\x14\x52\x83\x97\x94\x5c\x1e\x14\x9c\xd1\x2e\x84\xc2\x85\x22\x67\x32\xdf\x01\x00\x00\xff\xff\xde\x8d\x2f\xd0\xc8\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 456, mode: os.FileMode(420), modTime: time.Unix(1543255828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

