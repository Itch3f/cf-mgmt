// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x51\x6b\xc3\x20\x14\x85\xdf\xfd\x15\x97\x3e\xcf\xf5\xdd\xb7\xd0\xd8\x12\x88\x49\x89\x59\xc7\x9e\x44\x9c\x49\xa5\x31\x8a\x9a\xb2\x32\xf6\xdf\x87\x32\xc6\xf6\x76\xee\x77\xee\x39\xdc\x8b\x31\x46\x7e\x91\x69\x72\xc1\x12\x58\xcc\xba\x7d\x20\x64\xac\x9c\xb5\x08\x3a\xba\x2d\x28\x4d\x10\x40\x7a\x78\x4d\xe0\xdd\xa9\x9b\x0e\xb8\xd8\x08\xe0\xc7\x86\xcf\xa0\xbd\x8b\x26\xb9\xf0\x20\xe0\xcd\xdd\x25\xb9\x44\x1d\xee\x46\xe9\xb8\x57\x13\xb6\xb3\x4d\x4f\x90\xe4\x4c\x60\xb7\xc8\xa4\x63\xda\x7d\x21\x64\x56\xbf\xa5\x98\xcb\x31\xac\xd2\x6a\x02\xca\xad\x93\x99\x71\x6e\x43\xc8\xcb\x20\x6d\xb1\xf9\x1b\x1f\x29\x13\x75\xcf\xaa\xa6\xcb\xe0\x85\xd3\x41\x34\x75\x96\xe7\x8a\xf3\xd7\x7e\x28\xfa\xd0\x77\xc7\xe6\x24\xea\x66\x28\x53\xdb\xd0\x6e\x14\x9c\x1e\x06\x3a\x66\xd0\xd6\xd5\x59\xfc\xdd\x2f\x80\xd3\xe1\x42\x4b\xa0\xed\x4f\xa2\xa5\x17\xda\x96\xf4\x51\xb0\x13\x1b\xc5\xa1\x67\xac\xea\x6a\x82\xc2\xb6\x66\xee\x65\xba\xfe\x3b\x74\xaf\xcc\x3e\xc9\x78\xfb\x7d\xf4\x39\x5e\xd1\x77\x00\x00\x00\xff\xff\x64\xba\xaf\x15\x55\x01\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 341, mode: os.FileMode(420), modTime: time.Unix(1556668327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x5b\x6f\x9b\x30\x14\xc7\xdf\xf9\x14\x7e\x6c\xa4\x7a\x7d\xe7\x2d\x6a\x68\x15\x29\x97\x2a\x64\x9d\xa6\xa9\xb2\x5c\x38\xa1\xde\xb8\xcd\x36\x99\xf2\xed\x27\x43\x4a\x88\x31\xb9\x91\xa9\x93\xea\xb7\x08\x1f\x7c\x0e\xff\x9f\x8f\x7d\x7c\xc2\x41\x64\x05\x0f\x40\xb8\x0e\x46\x29\x4d\xc0\x45\x41\x96\xae\x58\x84\x39\xe4\x99\x83\x90\xdc\xe4\xe0\xa2\x88\x49\x07\xa1\xca\xd4\x75\x10\x42\xa8\xe0\xcc\x45\x37\x37\x11\x93\x44\x59\x92\x82\xb3\xc1\xa0\x1c\x79\xe5\x34\x0d\xde\xf6\x06\xab\x47\x83\x41\xed\x43\xb2\x04\xb0\xe4\x2c\x8a\x80\xd7\x4e\xd4\x43\xcd\x0b\x4b\x25\xf0\x35\x8d\xd5\x6c\xcd\x77\x06\x03\xc7\xf9\x99\xbd\x36\xa3\xe6\x40\x25\xe0\x8c\x47\xc2\x41\x28\x8f\x69\xaa\x66\xc0\x28\x02\xa9\x7f\x12\x42\xdb\x59\x5c\x24\x79\x01\xa5\x99\xa4\xe2\x97\x3e\x09\x42\x2b\x16\xef\x0b\x72\x17\xb0\x3b\x65\x2a\xee\x82\x15\x4e\xa2\x44\x7e\xd9\x24\x71\x69\x9a\x53\x4e\x13\x51\x45\x8d\x90\xff\xdd\x5f\x7a\x53\x32\x9a\x4f\x87\xe3\x99\x0a\x5e\x6c\x84\x84\x84\x84\x59\x42\x59\xba\x15\x0a\xa1\xaf\xbe\xb7\x20\xe3\x91\x32\x28\x04\x70\xc2\xc2\x7a\xe8\x69\xe8\xfb\xdf\xe6\x8b\x72\x2c\xa7\x42\xfc\xc9\xf8\x6e\xf0\x7e\x3e\x7b\x18\x3f\x92\xd1\x78\xa1\x86\xab\xf8\x48\xc8\xf8\xce\x60\x32\xf6\x66\x4b\xe2\x7b\xf7\x0b\x6f\x59\xda\xc4\x0c\x52\x49\x04\x04\x1c\x64\x6d\x36\x99\x3f\x92\x89\xf7\xec\x4d\x94\x49\x9c\x45\x24\x86\x35\xc4\xbb\x59\x1e\xc8\xf4\x71\xba\x24\xf7\xf3\xe9\x74\x38\x1b\xed\xeb\x53\x2b\x2f\xde\x28\x87\x10\x57\x9f\xd6\x43\xfc\xd6\x3c\x56\x7f\x5d\x7f\x4d\x22\x7d\xf1\x0b\x08\x0a\xce\xe4\x06\x47\x3c\x2b\xf2\xfe\x79\xd0\x9e\xcf\x22\xe9\x48\x09\x5d\xaa\x1a\x0d\x15\x82\x45\x29\x0e\x61\x45\x8b\x58\xf6\x47\xa4\x64\x15\x02\x42\x17\xfd\x30\xbb\x7e\x69\x70\x3c\xea\xdc\xf2\xd4\x79\x1e\x91\xac\xe6\x1a\x42\x0c\x3d\xce\x9b\xd2\x4c\x3b\x05\xbb\xf3\x71\xdf\x99\x85\xa6\x43\x6b\xea\x53\x13\x2a\xf2\xf0\xfd\xb0\xc2\x09\x48\x1a\x52\x49\x8f\xa3\xd2\xb3\x4b\xbd\xfe\x72\x10\x4e\x87\x1f\x4b\x49\xa7\x64\x14\xca\x50\xc0\xe1\x9c\xb3\xb5\xfa\x7d\x72\x49\x71\x3e\xb4\x83\xde\x2c\xba\xee\xc2\xaf\x25\xd7\xae\x0e\x04\xbe\x66\x01\x60\x1a\x04\x20\xfe\x09\xb4\x96\x07\x0b\xaa\x55\x21\xee\x4b\xb4\x5f\xa4\x5f\x2d\xb9\xf4\x49\x8e\x60\x3b\xe0\xdb\x12\x34\xd6\xf8\x87\x33\xed\xbd\xf0\xcb\x69\x00\x17\x26\xda\x6d\x63\x37\xc6\x4a\x97\xd3\xf6\xcb\xda\xa5\xe5\xd6\x75\x11\xa8\x14\xd2\xeb\xc4\x3e\xac\xba\xc8\x5c\x54\x43\x5a\x82\xc7\xaa\x48\x9d\xe0\x36\x51\x2e\x25\x58\xbd\x77\x1d\x86\x7a\x28\x96\x61\x47\x8d\x79\x90\x61\x8f\xdb\xc0\x61\x98\x06\x48\xf6\x46\x70\x32\x2d\xc3\x9d\xa0\x39\x5e\x9d\x52\xff\x4f\xfe\xd5\xf1\x7c\x02\xac\xa3\xe1\x13\x69\x7a\x8a\x43\x9a\x93\x96\xbb\xd2\xcc\xf7\x16\xcf\xde\xa2\x36\x52\xf5\x28\xf0\xab\x2c\x90\xad\xe0\xe6\xc5\xf1\xbb\xc8\x24\xbd\xfa\xea\x30\x50\xaf\x1d\x7d\x02\xec\x7d\x60\x6d\x75\x32\xd3\x3a\xbb\x0b\x6a\xc6\x76\xdb\xdd\x01\x3d\x91\xa6\xed\x88\x9e\x89\xb5\xb3\x1f\xaa\x5f\x27\x3e\xb2\xd4\x35\xc4\xf2\x09\xb0\x7e\xf4\x26\xbd\x93\xdb\xb4\x28\x2e\xdd\xa0\xcf\xe9\xbf\xda\xcd\xf9\x24\x48\xfa\xd6\xcc\x44\x16\x53\xc9\xb2\x14\x0b\x88\x12\x48\xe5\x55\xfe\x96\xaa\xba\x0c\xad\x63\xf6\xdc\x5c\x36\x06\xf7\xa1\x78\x4f\x04\x74\x14\xf4\xb9\x04\x0d\x4a\xec\x3a\x42\x31\xd0\xb4\xc8\x2f\xda\x7e\xf5\xf4\xbd\x6d\x17\x5d\xd7\xd9\x96\x4d\x41\xda\x44\x6d\xf5\x91\x5a\x2a\xfd\x0d\x00\x00\xff\xff\x7f\x5a\xfa\x37\xa4\x23\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 9124, mode: os.FileMode(420), modTime: time.Unix(1556668479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x31\x8f\xd4\x30\x10\x85\x7b\xff\x8a\xa7\xdb\x7a\xef\x44\x41\x93\xee\xc4\x2d\x12\x12\x82\x13\x82\x3a\xf2\xda\x13\xef\x20\xdb\x13\x8d\x27\xbb\xca\xbf\x47\x4e\xf6\x40\x50\x52\x25\x2f\x79\x6f\xe6\x9b\x77\x58\x65\x51\x24\x36\x28\xcd\x82\x45\xd9\x25\xb6\xb1\x8b\x71\x51\x1e\xfe\xa8\xb3\xfa\x1a\x2e\x03\x8a\x6f\x46\xea\xf6\x60\x98\xd0\xd6\x66\x54\x10\xa5\x78\xae\x6e\x57\xe3\xae\x06\x77\xc0\xd2\x48\xe1\x43\x90\xa5\x1a\x6e\x6c\x17\xcc\xa4\x85\x5b\x63\xa9\x30\x41\x50\xf2\x46\x10\x4d\xed\xa9\xcd\x3e\x50\x73\x3d\x32\x72\xec\xe9\x97\xd3\xeb\xb7\xd3\x87\xe7\xef\xa7\x17\x1c\xf1\xa3\x11\x42\x66\xaa\x36\x36\x0a\x4a\x86\x23\x66\xdf\xda\x4d\x34\x42\xa6\xff\x59\xf5\x16\x1f\xf0\xf0\xe0\x0e\xf7\xe9\xb8\x4f\x9f\x44\xb1\x78\x1f\xf6\x97\x1d\xca\xfd\x05\xd0\x11\x7f\x13\x98\xe0\xcc\x75\x7b\xe6\xe8\x67\x1c\x21\x35\xaf\xa8\x44\x91\x22\xb8\xf3\x71\x4d\xf8\xfc\xf2\xfc\xea\xba\x61\xfc\x67\x79\x96\x94\xba\x21\xd3\x95\xf2\xb6\x33\x4c\xc7\x92\x8a\x21\x48\x29\xbe\xc6\x06\xae\xb0\x0b\x61\xe6\x99\x32\x57\x72\x59\xd2\xb8\xd9\x07\x7c\xfa\xf2\xf1\xab\x3b\xc0\xb8\x10\xb8\x1a\xe9\xd5\xe7\x8e\x62\xca\x29\x91\x62\x99\xa3\x37\x7a\x8a\x94\xc9\x08\x3f\xe5\xdc\x20\xd5\x75\xfb\xf1\x6e\x19\xf0\xee\x7d\x71\xbd\x05\xa9\x13\xa7\x45\xbd\xf5\xe2\x22\x2b\x05\x13\x5d\xdd\xfe\x7d\x8c\xac\x03\x1e\x9f\x76\xd5\xfd\x3e\x67\xb9\xa1\xcd\x14\x78\x5a\xb7\x0b\xfa\xf9\x8d\xf4\x4a\xda\x91\xdf\x70\x71\xdd\x2e\xe8\x7f\x1f\xd7\x92\xf7\x12\x76\xdb\x56\xc1\xaf\x00\x00\x00\xff\xff\xcc\xf5\x97\x32\x8c\x02\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 652, mode: os.FileMode(420), modTime: time.Unix(1556642197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

