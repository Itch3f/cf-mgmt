// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcd\x41\x8a\xc3\x30\x0c\x85\xe1\xbd\x4f\x21\xb2\x1e\x4f\xf6\xbe\xcc\x60\x3c\x8a\x23\x12\x5b\x46\x92\x43\x43\xe9\xdd\xeb\x94\x52\xe8\xf6\xfd\xf0\x3d\xef\xbd\x6b\x7b\xb4\x85\xa5\x04\xd8\xa9\xf6\x9b\x73\x54\x62\xc6\x3f\x41\xe5\x2e\x09\x83\x03\xb0\xb3\x61\x80\x7f\x4e\x1b\x8a\x7f\xe5\x31\xbe\x33\xdc\x05\x1b\x2b\x19\xcb\x19\xa0\xd1\xc1\x16\x77\x45\x39\x28\xa1\xce\x69\xf1\x25\x17\xfb\x01\x8b\x39\xc0\x34\xae\x50\x6d\x7a\x8c\x93\xda\xba\xe9\x85\x7b\xa8\xb1\x0c\x27\x71\x5d\x28\xfb\x4b\x73\x4e\x7a\xbd\x5a\x8b\xb6\x7e\x95\x39\xd1\x6c\x51\xb7\x8f\xfc\xab\xab\x7b\x06\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1512503607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x98\xdf\x6e\xda\x3e\x14\xc7\xef\x79\x0a\x3f\x40\x53\xf4\xbb\xf8\xdd\xe4\x0e\x01\xad\x90\x1a\xa8\x08\xd3\x34\x4d\x95\xe5\x26\x26\xf5\x16\xc7\x9e\xed\x74\x42\x88\x77\x9f\x9d\x74\x01\x8c\x09\x29\x01\x4d\x22\x77\x69\x7d\x7c\xfe\x7c\x3f\x3a\xc7\x36\x02\x4b\x96\x8b\x08\x4b\xbf\xe7\x81\x0c\x51\xec\x83\x88\x65\x4b\x92\x78\x02\x73\xd6\x03\x40\xad\xb8\xfe\x5f\x42\x94\xfe\x2e\x4d\x7d\xfd\x05\x40\x2e\x88\x0f\xd6\x6b\xbd\x00\x8d\x25\xd4\x7f\x6f\x36\xc5\xca\xab\x40\x59\xf4\xe6\x03\x8a\xa4\xc2\xa2\x72\xfb\xdf\xff\xb4\x72\xa7\x08\xc5\x5b\x7f\x60\x4d\x32\x6d\xf9\x8e\xd2\xc2\x6a\xd3\xeb\xfd\x60\xaf\xbb\x09\x09\x8c\x14\xf6\x98\x48\xa4\xde\xc4\x53\x94\x99\x14\x3c\x90\x60\x65\x67\xab\x03\x08\x92\x24\x58\xe8\x18\x22\xc7\x85\x99\x42\xf2\xa7\xed\x04\x80\x25\x49\xf7\x6b\xed\x47\xa4\x6f\x4c\x65\x3f\x5a\x7a\x34\xa1\xea\x7e\x45\xd3\xc2\x94\x23\x81\xa8\x2c\xcb\x06\x20\xfc\x16\x2e\xc6\x01\x1c\xcd\x82\xc1\x64\x6a\x24\x90\x2b\x5d\x27\x85\x31\xa3\x88\x64\x1f\x1a\x00\xf0\x25\x1c\xcf\xe1\x64\x64\x0c\x72\x89\x05\x24\x71\xb5\xf4\x3c\x08\xc3\xaf\xb3\x79\xb1\xc6\x91\x94\xbf\x99\xd8\x2e\x0e\x67\xd3\x87\xc9\x23\x1c\x4d\xe6\x3e\xb8\xef\x97\xf9\xfd\x5d\x7a\x9a\x8c\xa7\x0b\x18\x8e\x87\xf3\xf1\xc2\x6c\x8e\x52\x82\x33\x05\x25\xd6\xc5\xa9\xad\x87\x07\x18\x3c\x06\x0b\x38\x9c\x05\xc1\x60\x3a\xda\x2f\xdd\x16\x55\xef\xd5\xe4\xd4\xca\x4b\x04\xcb\x79\x7b\x7d\x0f\xfd\x75\x51\x6a\x5b\x85\x4a\x75\x9d\x02\x49\x32\x2f\xc6\x4b\x94\xa7\xaa\xbd\xfa\x46\x31\x29\x71\xec\x83\xef\xee\xd0\x2f\x3b\x88\x4e\x06\xef\x14\xaa\x13\x6a\x54\xc8\x62\x9c\xe2\x16\xd3\xa7\x30\x2b\x67\xdf\xf1\xe6\xd9\x8f\xd1\x29\x0c\xbb\xa5\x3b\x26\xbe\xc7\x05\x79\x37\xdf\x65\x05\x0d\x10\xd8\x0d\x61\x3c\xbf\x34\x3c\x1a\x1c\xd1\x3a\x05\xa3\x46\x89\x8a\x8d\x7c\x43\xe2\x72\x68\x6c\x27\xf5\xa4\xea\x62\x77\x0a\xd4\x71\x21\x0e\x0e\x78\x8e\xf4\xed\xee\x8a\x6d\x53\x05\xb8\x65\x00\x4f\xa3\xc1\x33\xdc\x8d\x91\xc6\x88\xc3\xc3\x40\xc7\xee\x03\xa5\x46\xf6\x99\x72\x0d\x36\x9f\x39\x6f\x3a\x81\xee\xd8\x89\x63\x33\xc9\x79\xdc\xa6\x5f\xca\x7d\xf5\x1d\x63\x87\xe8\x94\xec\xfb\xc5\x3b\x65\xf7\x4c\x8e\x17\xd7\xbe\x51\x47\x38\xd3\xb8\x65\x3e\xe7\x4e\x34\x87\x50\x6e\x96\xbf\x72\xa6\x85\xba\x7e\x23\x6d\x03\xdd\x32\xae\x7a\x0e\x1f\x12\xb8\x41\x7c\xfa\x91\xe9\x26\x72\x77\xfc\x81\xd9\x10\x54\xc7\x1f\x9c\xb5\x5a\xd8\xe8\xcc\xd5\xee\xcc\x69\xd8\xfa\x76\xe0\x48\xe1\x96\x41\xb5\x9c\x84\x5b\x99\x5c\x0c\xcf\x9d\x82\xa7\xaf\xdf\xae\x20\xb7\x8c\xa9\x4e\x7f\x7b\xfe\x11\xc9\x52\xa4\x08\xcb\x74\x9f\x25\x54\x3b\xbb\xc8\x4f\x6b\x86\xc9\x1d\x38\x38\xa6\x1a\x76\x95\x33\xa7\x7f\x0a\xac\xa9\xf0\x35\xe8\x6c\x26\x8e\x22\xff\x04\x00\x00\xff\xff\x34\x49\xb3\xbb\x62\x18\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 6242, mode: os.FileMode(420), modTime: time.Unix(1519108704, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x41\x6e\x43\x21\x0c\x44\xf7\x9c\x62\x6e\xd0\x7d\x55\x71\x15\xe4\xf2\xfd\x53\x4b\xf9\x18\xd9\x46\x51\x6e\x5f\x28\xca\xae\xab\xac\x98\x79\x0c\xc3\xdc\x24\x8a\x71\xd7\x32\x4c\x3e\xf1\xf5\xd4\x61\x98\x0c\x8b\x61\xb2\x9c\xfc\xe9\xc1\x57\x39\xf4\x22\x69\xaf\x48\x3d\xb1\x39\x36\xcf\x69\x38\x5b\x91\x63\x06\x96\x02\xd5\xaa\xa3\x05\x1e\x12\x3f\xe8\x6c\x97\xb8\x8b\x36\x84\xa2\x1a\x53\x30\xd4\x6e\xfe\xe1\x9d\x2a\x7b\x4e\x9d\xdc\x1f\x6a\xeb\xf9\x4b\x42\x4f\xbc\x53\x55\xef\xc2\x2d\x8a\xf3\xbc\x8c\xd9\xb7\x3d\xb6\xc7\xa9\x86\x41\x54\xb7\xd8\x9b\x73\xba\x1f\xd4\xcb\x7f\x1b\xe6\x1f\xdf\xd2\xfe\xce\x95\xc9\xe9\x37\x00\x00\xff\xff\x27\x4c\x31\xa2\x30\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 304, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

