// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1518199076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x40\xda\x98\x6e\x77\x1e\xb0\x51\xe5\x88\xa9\xb7\x4d\x72\xb8\x37\x00\x9d\xed\xb6\x41\xbe\xbf\xc9\x9a\x64\x75\xb2\xe3\x35\x7f\xda\x0e\xff\x01\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1512503607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdb\x6e\xda\x40\x10\x86\xef\xfd\x14\xf3\x00\x71\xb8\xf7\x1d\x0a\x4e\x84\xc4\x21\x02\xda\xaa\xaa\xa2\xd5\xc6\x1e\x9c\x6d\x7d\xea\xee\x9a\x0a\x45\xbc\x7b\xb5\x98\xf8\xb0\x5e\x02\x31\xa0\x54\xd4\x77\x11\x3b\x9e\x19\xff\x9f\x67\x76\x32\x1c\x45\x92\x71\x0f\x85\x63\xd9\x10\xd3\x08\x1d\xf0\x92\x78\xc9\x02\x9b\x63\x9a\x58\x00\x72\x9d\xa2\x03\x01\x93\x16\x40\x6e\xea\x58\x00\x00\x19\x67\x0e\xbc\xbe\x06\x4c\x12\x65\x49\x32\xce\x36\x9b\xed\xc9\x33\xa7\xb1\xf7\x52\x3b\xcc\x7f\xda\x6c\x8a\x18\x92\x45\x68\x4b\xce\x82\x00\x79\x11\x44\xfd\xa8\x45\x61\xb1\x44\xbe\xa2\xa1\xf2\x56\x7d\x66\xb3\xb1\xac\x9f\xc9\x73\x35\x6b\x8e\x54\xa2\x9d\xf0\x40\x58\x00\x69\x48\x63\xe5\xc1\x86\x00\xa5\xfe\x4a\x00\x3b\x2f\x0e\x48\x9e\xe1\xd6\x4c\x52\xf1\x4b\x77\x02\xb0\x64\x61\x5d\x90\x9e\xc7\x7a\xca\x54\xf4\xbc\xa5\x1d\x05\x91\xbc\x5d\x47\xe1\xd6\x34\xa5\x9c\x46\x22\xcf\x1a\x60\xfe\x7d\xbe\x70\xc7\x64\x30\x1d\xf7\x87\x13\x95\xbc\x58\x0b\x89\x11\xf1\x93\x88\xb2\x78\x27\x14\xc0\x97\xb9\x3b\x23\xc3\x81\x32\xc8\x04\x72\xc2\xfc\xe2\xe8\xb1\x3f\x9f\x7f\x9b\xce\xb6\x67\x29\x15\xe2\x4f\xc2\xcb\xc3\xbb\xe9\xe4\x7e\xf8\x40\x06\xc3\x99\x03\xb7\xbd\x3c\xbf\xb7\xa3\xd1\xd0\x9d\x2c\xc8\xdc\xbd\x9b\xb9\x0b\xf5\xb0\x17\x32\x8c\x25\x11\xe8\x71\x94\x85\x87\xd1\xf4\x81\x8c\xdc\xaf\xee\x48\x99\x84\x49\x40\x42\x5c\x61\x58\x06\xb8\x27\xe3\x87\xf1\x82\xdc\x4d\xc7\xe3\xfe\x64\x50\x57\xa6\xd0\x5c\xbc\x50\x8e\xbe\x9d\xbf\xd4\x09\xb2\x37\xfc\x74\xca\x97\xca\x6b\xe2\xe8\x1f\xbc\x40\x2f\xe3\x4c\xae\xed\x80\x27\x59\x7a\xfa\xb7\xdf\xf4\xd7\xc1\x68\x94\x81\x2e\x52\x01\x85\x0a\xc1\x82\xd8\xf6\x71\x49\xb3\x50\x9e\x0e\x47\x09\x2a\x04\xfa\x0e\xfc\x30\x87\x7e\xaa\x10\x3c\x18\xbc\x23\x59\x92\x3c\x20\x56\x41\xd4\xc7\x10\x4f\xb8\x57\xb6\x66\xda\x6d\xb7\xbf\x06\xeb\xc1\x3a\x5c\x25\xae\xaa\x32\x86\x3b\xdf\x4e\x39\x5b\xa9\xbf\x8f\xbe\x8b\xf4\xba\x52\x9e\x9f\x8e\x1c\x0e\x0c\xd1\x3a\x56\xa6\x59\xa1\x21\x54\x39\x3a\x20\x5f\x31\x0f\x6d\xea\x79\x28\x2e\x82\xab\x11\xa1\x43\x54\x19\x2a\xea\xe2\xd4\x27\xba\xb3\x15\x94\xee\xe4\x00\xb0\x77\x62\x77\xec\xb4\x81\xf0\xfd\xea\x7a\x9b\x15\x52\xea\x61\xcb\xe2\xba\x81\x2c\xf5\xdf\x38\x2a\x45\x8e\xeb\x8e\x45\xc8\xab\x26\x36\xe8\x3f\x92\x6a\x8c\xd0\xa7\x29\x69\x04\x6a\x3b\x5c\xe6\x12\xea\x13\xc8\x29\x30\xf7\xa1\x6b\x35\x9d\xfc\x1f\x88\xdb\xcd\x27\x3a\xbb\x5d\x0d\xb5\x65\x97\x3f\x77\x1e\x7a\x7a\x2a\x1d\xbd\x92\x5e\x5d\x1b\x23\xbd\xbc\x07\xfe\x3b\x08\x8b\x7c\xae\x9a\xe3\x65\x1a\xad\x41\x47\x33\xf3\xdf\x59\x22\xe9\xd9\xa1\x1b\x60\x16\x81\xae\x9a\xe6\x29\x98\x76\x0a\x99\x39\x7d\x78\xcf\x62\x06\x76\xb3\x7f\xc7\x72\x24\xc7\x6e\xe7\x72\x34\xd0\xbd\x1b\x17\x7d\xee\xfc\xcc\x91\xc7\x90\xcb\x55\x03\xbd\x68\xbf\x2d\x55\x34\xb1\x6e\xdb\x6b\x0f\x6f\x02\x4c\x41\xae\x9a\x62\x7b\x3c\x7a\x97\x65\x22\x09\xa9\x64\x49\x6c\x0b\x0c\x22\x8c\xe5\x59\x76\xd8\xf9\xff\x97\x8d\xbb\xf2\xa3\xc5\x69\x4c\xee\x53\xc1\x1e\x09\xe8\x1d\xc4\x1f\x65\x67\xd0\xa0\xdc\x02\x84\x48\xe3\x2c\x6d\xd5\x49\xf5\x92\xbd\x69\xce\x4c\xe7\xe9\xb0\xa6\x24\xbb\xe2\xac\x2c\x05\x1a\xfa\xfc\x0d\x00\x00\xff\xff\x5d\xee\x0d\x0d\xb3\x1f\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 8115, mode: os.FileMode(420), modTime: time.Unix(1547341464, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1510432475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\x41\x8b\x14\x31\x10\x85\xef\xf9\x15\x8f\x9d\x73\xb3\x78\xf0\xd2\xb7\xc5\x19\x41\x10\x5d\x44\xcf\x4d\x26\xa9\xce\x94\x24\xa9\x50\xa9\xde\x65\xfe\xbd\x64\x7a\x54\xf4\xb8\xa7\xe4\xc1\xf7\xea\x7d\x87\xab\x6c\x8a\xc4\x06\xa5\x26\xd8\x94\x5d\x62\x5b\x46\x58\x36\xe5\xf9\x6f\x3a\xab\xaf\xe1\x32\xa3\xf8\x6e\xa4\x6e\x2f\x86\x15\xfd\xda\x8d\x0a\xa2\x14\xcf\xd5\xed\x69\xd9\xd3\xec\x0e\xd8\x3a\x29\x7c\x08\xb2\x55\xc3\x2b\xdb\x05\x8d\xb4\x70\xef\x2c\x15\x26\x08\x4a\xde\x08\xa2\xa9\x3f\xf6\xe6\x03\x75\x37\x2a\x0b\xc7\xd1\x3e\x9e\x9e\xbf\x9d\x3e\x3c\x7d\x3f\x1d\x31\xe1\x47\x27\x84\xcc\x54\x6d\xe9\x14\x94\x0c\x13\x9a\xef\xfd\x55\x34\x42\xd6\xb7\x4c\xfd\xae\xcf\x78\x78\x70\x87\xfb\x75\xdc\xaf\xaf\xa2\xd8\xbc\x0f\xfb\x67\x97\x72\xff\x08\x0c\xc5\x3f\x06\x26\x38\x73\xbd\xbd\x39\xfa\x86\x09\x52\xf3\x15\x95\x28\x52\x04\x0f\x3f\xae\x09\x9f\x8f\x4f\xcf\x6e\x00\xcb\x7f\xe3\x59\x52\x1a\x40\xa6\x17\xca\xb7\xcd\xb0\x4e\x25\x15\x43\x90\x52\x7c\x8d\x1d\x5c\x61\x17\x42\xe3\x46\x99\x2b\xb9\x2c\x69\xb9\xe1\x33\x3e\x7d\xf9\xf8\xd5\x1d\x60\x5c\x08\x5c\x8d\xf4\xc5\xe7\xa1\x62\xca\x29\x91\x62\x6b\xd1\x1b\x3d\x46\xca\x64\x84\x9f\x72\xee\x90\x0a\x37\xf8\xe9\xce\xcc\x78\xf7\xbe\xb8\x5f\x01\x00\x00\xff\xff\x52\xaa\x8e\x68\x12\x02\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 530, mode: os.FileMode(420), modTime: time.Unix(1547341559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

