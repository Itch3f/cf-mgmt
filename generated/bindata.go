// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(493), modTime: time.Unix(1526395406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x4b\x6a\xc4\x30\x0c\x00\xd0\xbd\x4e\x21\xb2\xae\x9b\xbd\x2f\x53\x84\xab\x38\x22\xfe\x21\xc9\xa1\xa1\xf4\xee\x25\xc3\x30\x30\xeb\x07\x2f\x84\x00\xa3\x90\x6f\x5d\x6b\xc4\x22\x6d\xfe\x00\x48\xa5\xcc\x5f\xca\xd6\xa7\x26\x8e\x80\xe8\xd7\xe0\x88\xdf\x3d\x1d\xac\xe1\xc1\x80\xf8\x64\xfc\x55\x1e\xdd\xc4\xbb\x5e\x11\x87\x9c\xdd\xa9\x18\xeb\x29\x89\x6d\x4d\x5b\xa8\xb9\xfa\x07\x3a\xe5\x88\x4b\x21\x67\xf3\xe5\x0f\x40\xda\x98\x6e\x77\x1e\xb0\x51\xe5\x88\xa9\xb7\x4d\x72\xb8\x37\x00\x9d\xed\xb6\x41\xbe\xbf\xc9\x9a\x64\x75\xb2\xe3\x35\x7f\xda\x0e\xff\x01\x00\x00\xff\xff\x0a\x5a\x24\x71\xc6\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 198, mode: os.FileMode(420), modTime: time.Unix(1526395406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xcd\x6e\xdb\x30\x0c\xc7\xef\x7e\x0a\x3e\x40\xdd\x60\x87\x5d\x7c\x0b\x1a\xb7\x08\x90\x8f\x22\xc9\x36\x0c\x43\x21\xa8\x36\xa3\x6a\x93\x2d\x4f\x92\x3b\x04\x45\xdf\x7d\xb0\xdd\xda\x89\xad\xa4\xae\xd3\xae\x40\xe6\x5b\x00\xd1\x24\xf5\xff\x81\xa4\x18\x85\x5a\xa6\x2a\x40\xed\x39\x2e\xc4\x34\x42\x0f\x02\x19\xaf\x39\x73\x15\x26\xd2\x01\x30\x9b\x04\x3d\x60\xdc\x38\x00\x85\xa9\xe7\x00\x00\xa4\x8a\x7b\xf0\xf0\xc0\xb8\x21\x99\x25\x49\x15\x7f\x7c\xcc\x4f\x6e\x15\x8d\x83\x3b\x0f\x22\xaa\x0d\xaa\xd2\xed\xa7\xcf\x51\xe9\xce\xf0\x08\x2b\x7f\xf0\xc0\x63\x83\xea\x9e\x8a\xdc\xea\xd1\x71\x7e\xca\xdb\xed\x84\x14\x52\x83\xae\x54\x4c\x3b\x00\x89\xa0\x71\x96\x82\x0b\x0c\x4d\x3d\x5b\x00\xa3\x38\x63\xa8\x3c\x30\x2a\xc5\xdc\xcc\x50\xfd\xab\xee\x04\x60\xcd\xc5\xee\x5d\x07\x01\x1f\x64\xa6\x7a\x10\xac\xdd\x88\x45\xe6\x7c\x13\x89\xdc\x34\xa1\x8a\x46\xba\xb8\x36\xc0\xf2\xfb\x72\xe5\x4f\xc9\x68\x3e\x1d\x8e\x67\x99\x04\x7a\xa3\x0d\x46\x24\x94\x11\xe5\xf1\x93\x06\x00\x5f\x96\xfe\x82\x8c\x47\x99\x41\xaa\x51\x11\x1e\x96\x47\xd7\xc3\xe5\xf2\xdb\x7c\x91\x9f\x25\x54\xeb\x3f\x52\x55\x87\x17\xf3\xd9\xe5\xf8\x8a\x8c\xc6\x0b\x0f\xce\x07\x45\x7e\xcf\x47\x93\xb1\x3f\x5b\x91\xa5\x7f\xb1\xf0\x57\xd9\xc7\x81\xe0\x18\x1b\xa2\x31\x50\x68\x4a\x0f\x93\xf9\x15\x99\xf8\x5f\xfd\x49\x66\x22\x24\x23\x02\xef\x51\x54\x01\x2e\xc9\xf4\x6a\xba\x22\x17\xf3\xe9\x74\x38\x1b\xed\x2a\x53\xd7\x5c\x63\x90\x2a\x6e\x36\x2e\x53\x32\x4d\x8e\x97\xbf\xe9\xaf\x27\xd1\x20\x51\x17\xa9\x84\x42\xb5\xe6\x2c\x76\x43\x5c\xd3\x54\x98\xe3\xe1\x64\x82\x6a\x8d\xa1\x07\x3f\xec\xa1\x6f\xb6\x08\xbe\x18\xbc\x27\x59\x91\x7c\x41\xac\x92\x68\x88\x02\x8f\x68\x6d\xb9\x59\xd1\x58\xf7\x97\xde\x6e\x8c\x9e\x52\x45\x69\x5b\x19\xcb\xb4\x71\x13\xc5\xef\xb3\xdf\xc5\x05\x5b\x10\xaa\x97\x53\xe6\xf9\xa6\xe5\x58\xb2\x44\xeb\x59\xd9\xa6\x54\x43\xa8\x12\x9d\xbe\xa3\xea\xed\xc8\xd5\x9d\x1c\x06\x79\x28\x76\xcf\xb1\xe2\xb8\x5f\xa7\xc6\xdb\x23\xa1\x01\x76\x2c\xba\x33\x48\x93\xf0\x99\x63\xa6\x48\xbb\x32\x2c\x43\x9e\x34\xb1\xd1\xf0\x9a\x6c\xc7\x10\x21\x4d\x48\x23\x50\xd7\xc7\x4b\x21\x61\x7d\xc2\x1d\x03\x73\x1f\xba\xd7\x4c\xbf\xff\x83\x6c\xb7\xf9\x57\x47\xf6\x54\x3a\x5d\x91\x15\xdf\x1d\xae\xb7\x7a\x88\x9e\x4a\x45\x65\x57\x1b\x2b\x95\xa2\xa5\xbd\x35\x9a\x56\xf5\x64\x4d\xe3\xa4\xf1\xbd\x4f\xbb\xb4\xe8\x68\x47\xfd\x3b\x95\x86\xfe\x83\x32\xac\x02\x9d\x34\xcd\x63\x30\x3d\x29\x64\xe7\xf4\xea\x6d\xdc\x0e\xec\x6c\xff\x26\xde\x92\x63\xbf\x99\xb7\x06\xba\x77\x2f\xaf\xbf\x1e\x3f\xe0\xe1\x62\x49\xe1\xa4\x39\xbe\x6b\x9b\xad\x54\xb4\x21\xee\xda\x62\x5f\x5e\xef\x6d\x41\x4e\x9a\x62\x77\x3c\xf5\xe6\xca\xb5\x14\xd4\x70\x19\xbb\x1a\x59\x84\xb1\x79\x93\x3f\x38\x8b\xe5\xb0\x31\x22\x5b\xd6\xa4\x35\xa7\x0f\xe5\xd9\x92\xcb\x01\xb2\xaf\x45\x66\xd1\xe0\x6f\x00\x00\x00\xff\xff\x89\x88\x0c\x2d\x45\x1a\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 6725, mode: os.FileMode(420), modTime: time.Unix(1526416213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1526395406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\xb1\x6e\x04\x21\x0c\x44\xfb\xfd\x8a\xf9\x81\x53\xfa\xd5\x6a\xa5\x48\x29\x53\xe4\x0f\x10\x61\xbd\x9c\x25\xc0\x08\x9b\x9c\xee\xef\x23\x16\x5d\x97\x2a\x15\x33\xc3\xd8\x7e\x91\xcd\x35\xaa\xe2\x7a\xe3\x15\xdb\x53\x7a\x43\x64\xc3\xc8\xd0\x1b\xef\x8b\x3e\xd5\x28\xbb\x43\xb2\xe7\xf2\xaa\x84\x13\x33\xc7\xcc\xf7\xa5\x2b\x35\xc7\xc7\x8a\x6d\x28\xf8\x10\xa4\x17\xc3\x83\xed\x8e\x4a\x2d\xb3\x2a\x4b\x81\x09\x42\x23\x6f\x04\x69\x51\xdf\xb4\xfa\x40\xba\x2f\xd5\xab\x3e\xa4\x8d\xf1\x97\x84\x9c\xf8\xcf\xaa\x90\x98\x8a\x39\xa5\xd0\xc8\x56\x6c\xd3\x63\x7a\x9c\xd2\xd0\xbd\x0f\x53\x4c\xe6\x7d\x49\x87\xaf\xee\x2f\x06\x13\x7c\x73\xb9\xde\xd1\xc1\x0d\x52\xd2\x13\x85\xe8\xa0\x03\x3c\x08\xb9\x44\x7c\x7e\xbc\x7f\xed\x4b\x92\xe8\x12\xfd\x50\x5a\xb1\x25\x89\x71\xfc\x5c\xfe\x3a\x16\xce\x5b\x8e\xd9\x10\x24\x67\x5f\x0e\x05\x17\xd8\x9d\x50\xb9\x52\xe2\x42\xfb\xf2\x1b\x00\x00\xff\xff\xce\x82\xed\x3a\x8c\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 396, mode: os.FileMode(420), modTime: time.Unix(1526416885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

